/*
 * opencmiss.i. This file is automatically generated from opencmiss.f90.
 * Do not edit this file directly, instead edit opencmiss.f90 or the generate_bindings script
 */

/*
 * Defines
 */

const int CMISS_NO_ERROR = 0;
const int CMISS_POINTER_IS_NULL = -1;
const int CMISS_POINTER_NOT_NULL = -2;
const int CMISS_COULD_NOT_ALLOCATE_POINTER = -3;
const int CMISS_ERROR_CONVERTING_POINTER = -4;

typedef unsigned int CMISSBool;
const CMISSBool CMISSTrue = 1;
const CMISSBool CMISSFalse = 0;

typedef int CMISSError;

struct CMISSBasisType_;
/*>Contains information about a basis function. */
typedef struct CMISSBasisType_ *CMISSBasisType;

struct CMISSBoundaryConditionsType_;
/*>Contains information on the boundary conditions for the equations set. */
typedef struct CMISSBoundaryConditionsType_ *CMISSBoundaryConditionsType;

struct CMISSCellMLType_;
/*>Contains information on a CellML environment. */
typedef struct CMISSCellMLType_ *CMISSCellMLType;

struct CMISSCellMLEquationsType_;
/*>Contains information about the CellML equations for a solver. */
typedef struct CMISSCellMLEquationsType_ *CMISSCellMLEquationsType;

struct CMISSControlLoopType_;
/*>Contains information on a control loop. */
typedef struct CMISSControlLoopType_ *CMISSControlLoopType;

struct CMISSCoordinateSystemType_;
/*>Contains information on a coordinate system. */
typedef struct CMISSCoordinateSystemType_ *CMISSCoordinateSystemType;

struct CMISSDataPointsType_;
/*>Contains information on the data points defined on a region. */
typedef struct CMISSDataPointsType_ *CMISSDataPointsType;

struct CMISSDataProjectionType_;
/*>Contains information about a data projection. */
typedef struct CMISSDataProjectionType_ *CMISSDataProjectionType;

struct CMISSDecompositionType_;
/*>Contains information on the mesh decomposition. */
typedef struct CMISSDecompositionType_ *CMISSDecompositionType;

struct CMISSEquationsType_;
/*>Contains information about the equations in an equations set. */
typedef struct CMISSEquationsType_ *CMISSEquationsType;

struct CMISSEquationsSetType_;
/*>Contains information on an equations set defined on a region. */
typedef struct CMISSEquationsSetType_ *CMISSEquationsSetType;

struct CMISSFieldType_;
/*>Contains information for a field defined on a region. */
typedef struct CMISSFieldType_ *CMISSFieldType;

struct CMISSFieldsType_;
/*>Contains information for a fields defined on a region. */
typedef struct CMISSFieldsType_ *CMISSFieldsType;

struct CMISSGeneratedMeshType_;
/*>Contains information on a generated mesh. */
typedef struct CMISSGeneratedMeshType_ *CMISSGeneratedMeshType;

struct CMISSHistoryType_;
/*>Contains information about a history file for a control loop. */
typedef struct CMISSHistoryType_ *CMISSHistoryType;

struct CMISSInterfaceType_;
/*>Contains information about an interface. */
typedef struct CMISSInterfaceType_ *CMISSInterfaceType;

struct CMISSInterfaceConditionType_;
/*>Contains information about an interface condition. */
typedef struct CMISSInterfaceConditionType_ *CMISSInterfaceConditionType;

struct CMISSInterfaceEquationsType_;
/*>Contains information about an interface condition. */
typedef struct CMISSInterfaceEquationsType_ *CMISSInterfaceEquationsType;

struct CMISSInterfaceMeshConnectivityType_;
/*>Contains information on an interfaces meshes connectivity. */
typedef struct CMISSInterfaceMeshConnectivityType_ *CMISSInterfaceMeshConnectivityType;

struct CMISSInterfacePointsConnectivityType_;
/*>Contains information on an interfaces points connectivity. */
typedef struct CMISSInterfacePointsConnectivityType_ *CMISSInterfacePointsConnectivityType;

struct CMISSDistributedMatrixType_;
/*>A matrix that may be distributed across multiple computational nodes
 *>and may use sparse or full storage. */
typedef struct CMISSDistributedMatrixType_ *CMISSDistributedMatrixType;

struct CMISSDistributedVectorType_;
/*>A vector that may be distributed across multiple computational nodes */
typedef struct CMISSDistributedVectorType_ *CMISSDistributedVectorType;

struct CMISSMeshType_;
/*>Contains information on a mesh defined on a region. */
typedef struct CMISSMeshType_ *CMISSMeshType;

struct CMISSMeshElementsType_;
/*>Contains information on a mesh elements defined in a mesh */
typedef struct CMISSMeshElementsType_ *CMISSMeshElementsType;

struct CMISSMeshEmbeddingType_;
/*>Contains information on an embedded mesh */
typedef struct CMISSMeshEmbeddingType_ *CMISSMeshEmbeddingType;

struct CMISSMeshNodesType_;
/*>Contains information on a mesh nodes defined in a mesh */
typedef struct CMISSMeshNodesType_ *CMISSMeshNodesType;

struct CMISSNodesType_;
/*>Contains information on the nodes defined on a region. */
typedef struct CMISSNodesType_ *CMISSNodesType;

struct CMISSProblemType_;
/*>Contains information for a problem. */
typedef struct CMISSProblemType_ *CMISSProblemType;

struct CMISSQuadratureType_;
/*>Contains information for a particular quadrature scheme for a basis. */
typedef struct CMISSQuadratureType_ *CMISSQuadratureType;

struct CMISSRegionType_;
/*>Contains information for a region. */
typedef struct CMISSRegionType_ *CMISSRegionType;

struct CMISSSolverType_;
/*>Contains information about a solver. */
typedef struct CMISSSolverType_ *CMISSSolverType;

struct CMISSSolverEquationsType_;
/*>Contains information about the solver equations for a solver. */
typedef struct CMISSSolverEquationsType_ *CMISSSolverEquationsType;

struct CMISSComputationalWorkGroupType_;
/*>Contains information on a computational work group */
typedef struct CMISSComputationalWorkGroupType_ *CMISSComputationalWorkGroupType;

const int CMISS_ALL_DIAG_TYPE = 1; /*<Type for setting diagnostic output in all routines \see OPENCMISS_DiagnosticTypes,OPENCMISS */
const int CMISS_IN_DIAG_TYPE = 2; /*<Type for setting diagnostic output in one routine \see OPENCMISS_DiagnosticTypes,OPENCMISS */
const int CMISS_FROM_DIAG_TYPE = 3; /*<Type for setting diagnostic output in one routine downwards \see OPENCMISS_DiagnosticTypes,OPENCMISS */
const int CMISS_ALL_TIMING_TYPE = 1; /*<Type for setting timing output in all routines \see OPENCMISS_TimingTypes,OPENCMISS */
const int CMISS_IN_TIMING_TYPE = 2; /*<Type for setting timing output in one routine \see OPENCMISS_TimingTypes,OPENCMISS */
const int CMISS_FROM_TIMING_TYPE = 3; /*<Type for setting timing output from one routine downwards \see OPENCMISS_TimingTypes,OPENCMISS */
const int CMISS_BASIS_LAGRANGE_HERMITE_TP_TYPE = 1; /*<Lagrange-Hermite tensor product basis type \see OPENCMISS_BasisTypes,OPENCMISS */
const int CMISS_BASIS_SIMPLEX_TYPE = 2; /*<Simplex basis type \see OPENCMISS_BasisTypes,OPENCMISS */
const int CMISS_BASIS_SERENDIPITY_TYPE = 3; /*<Serendipity basis type \see OPENCMISS_BasisTypes,OPENCMISS */
const int CMISS_BASIS_AUXILLIARY_TYPE = 4; /*<Auxillary basis type \see OPENCMISS_BasisTypes,OPENCMISS */
const int CMISS_BASIS_B_SPLINE_TP_TYPE = 5; /*<B-spline basis type \see OPENCMISS_BasisTypes,OPENCMISS */
const int CMISS_BASIS_FOURIER_LAGRANGE_HERMITE_TP_TYPE = 6; /*<Fourier-Lagrange tensor product basis type \see OPENCMISS_BasisTypes,OPENCMISS */
const int CMISS_BASIS_EXTENDED_LAGRANGE_TP_TYPE = 7; /*<Extendend Lagrange tensor product basis type \see OPENCMISS_BasisTypes,OPENCMISS */
const int CMISS_BASIS_LINEAR_LAGRANGE_INTERPOLATION = 1; /*<Linear Lagrange interpolation specification \see OPENCMISS_BasisInterpolationSpecifications,OPENCMISS */
const int CMISS_BASIS_QUADRATIC_LAGRANGE_INTERPOLATION = 2; /*<Quadratic Lagrange interpolation specification \see OPENCMISS_BasisInterpolationSpecifications,OPENCMISS */
const int CMISS_BASIS_CUBIC_LAGRANGE_INTERPOLATION = 3; /*<Cubic Lagrange interpolation specification \see OPENCMISS_BasisInterpolationSpecifications,OPENCMISS */
const int CMISS_BASIS_CUBIC_HERMITE_INTERPOLATION = 4; /*<Cubic Hermite interpolation specification \see OPENCMISS_BasisInterpolationSpecifications,OPENCMISS */
const int CMISS_BASIS_QUADRATIC1_HERMITE_INTERPOLATION = 5; /*<Quadratic Hermite (no derivative at xi=0) interpolation specification \see OPENCMISS_BasisInterpolationSpecifications,OPENCMISS */
const int CMISS_BASIS_QUADRATIC2_HERMITE_INTERPOLATION = 6; /*<Quadratic Hermite (no derivative at xi=1) interpolation specification \see OPENCMISS_BasisInterpolationSpecifications,OPENCMISS */
const int CMISS_BASIS_LINEAR_SIMPLEX_INTERPOLATION = 7; /*<Linear Simplex interpolation specification \see OPENCMISS_BasisInterpolationSpecifications,OPENCMISS */
const int CMISS_BASIS_QUADRATIC_SIMPLEX_INTERPOLATION = 8; /*<Quadratic Simplex interpolation specification \see OPENCMISS_BasisInterpolationSpecifications,OPENCMISS */
const int CMISS_BASIS_CUBIC_SIMPLEX_INTERPOLATION = 9; /*<Cubic Simplex interpolation specification \see OPENCMISS_BasisInterpolationSpecifications,OPENCMISS */
const int CMISS_BASIS_DEFAULT_QUADRATURE_SCHEME = 1; /*<Identifier for the default quadrature scheme \see OPENCMISS_BasisQuadratureSchemes,OPENCMISS */
const int CMISS_BASIS_LOW_QUADRATURE_SCHEME = 2; /*<Identifier for a low order quadrature scheme \see OPENCMISS_BasisQuadratureSchemes,OPENCMISS */
const int CMISS_BASIS_MID_QUADRATURE_SCHEME = 3; /*<Identifier for a mid order quadrature scheme \see OPENCMISS_BasisQuadratureSchemes,OPENCMISS */
const int CMISS_BASIS_HIGH_QUADRATURE_SCHEME = 4; /*<Identifier for a high order quadrature scheme \see OPENCMISS_BasisQuadratureSchemes,OPENCMISS */
const int CMISS_BASIS_GAUSS_LEGENDRE_QUADRATURE = 1; /*<Gauss-Legendre quadrature \see OPENCMISS_BasisQuadratureTypes,OPENCMISS */
const int CMISS_BASIS_GAUSS_LAGUERRE_QUADRATURE = 2; /*<Gauss-Laguerre quadrature \see OPENCMISS_BasisQuadratureTypes,OPENCMISS */
const int CMISS_BASIS_GUASS_HERMITE_QUADRATURE = 3; /*<Gauss-Hermite quadrature \see OPENCMISS_BasisQuadratureTypes,OPENCMISS */
const int CMISS_BASIS_ADAPTIVE_GAUSS_LEGENDRE_QUADRATURE = 4; /*<Adaptive Gauss-Legendre quadrature \see OPENCMISS_BasisQuadratureTypes,OPENCMISS */
const int CMISS_BASIS_GAUSS_SIMPLEX_QUADRATURE = 5; /*<Gauss-Legendre for Simplex elements quadrature \see OPENCMISS_BasisQuadratureTypes,OPENCMISS */
const int CMISS_BASIS_XI_COLLAPSED = 1; /*<The Xi direction is collapsed \see OPENCMISS_BasisXiCollapse,OPENCMISS */
const int CMISS_BASIS_COLLAPSED_AT_XI0 = 2; /*<The Xi direction at the xi=0 end of this Xi direction is collapsed \see OPENCMISS_BasisXiCollapse,OPENCMISS */
const int CMISS_BASIS_COLLAPSED_AT_XI1 = 3; /*<The Xi direction at the xi=1 end of this Xi direction is collapsed \see OPENCMISS_BasisXiCollapse,OPENCMISS */
const int CMISS_BASIS_NOT_COLLAPSED = 4; /*<The Xi direction is not collapsed \see OPENCMISS_BasisXiCollapse,OPENCMISS */
const int CMISS_BOUNDARY_CONDITION_FREE = 0; /*<The dof is free. */
const int CMISS_BOUNDARY_CONDITION_FIXED = 1; /*<The dof is fixed as a boundary condition. */
const int CMISS_BOUNDARY_CONDITION_FIXED_WALL = 4;
const int CMISS_BOUNDARY_CONDITION_FIXED_INLET = 2;
const int CMISS_BOUNDARY_CONDITION_FIXED_OUTLET = 3;
const int CMISS_BOUNDARY_CONDITION_MOVED_WALL = 5;
const int CMISS_BOUNDARY_CONDITION_MOVED_WALL_INCREMENTED = 17;
const int CMISS_BOUNDARY_CONDITION_FREE_WALL = 6;
const int CMISS_BOUNDARY_CONDITION_NEUMANN_POINT = 8; /*<Specify the normal derivative at a node, which is then integrated to find the nodal load term */
const int CMISS_BOUNDARY_CONDITION_NEUMANN_POINT_INCREMENTED = 22; /*<Specify the normal derivative at a node, which is then integrated to find the nodal load term. The value is incremented inside a load incremented control loop. */
const int CMISS_BOUNDARY_CONDITION_NEUMANN_INTEGRATED = 9; /*<Set the integrated right hand side load value directly */
const int CMISS_BOUNDARY_CONDITION_DIRICHLET = 10;
const int CMISS_BOUNDARY_CONDITION_CAUCHY = 11;
const int CMISS_BOUNDARY_CONDITION_ROBIN = 12;
const int CMISS_BOUNDARY_CONDITION_FIXED_INCREMENTED = 13;
const int CMISS_BOUNDARY_CONDITION_PRESSURE = 14;
const int CMISS_BOUNDARY_CONDITION_PRESSURE_INCREMENTED = 15;
const int CMISS_BOUNDARY_CONDITION_CORRECTION_MASS_INCREASE = 18;
const int CMISS_BOUNDARY_CONDITION_IMPERMEABLE_WALL = 19;
const int CMISS_BOUNDARY_CONDITION_NEUMANN_INTEGRATED_ONLY = 20; /*<A Neumann integrated boundary condition, and no point values will be integrated over a face or line that includes this dof */
const int CMISS_BOUNDARY_CONDITION_FIXED_FITTED = 23;
const int CMISS_BOUNDARY_CONDITION_FIXED_NONREFLECTING = 24;
const int CMISS_BOUNDARY_CONDITION_FIXED_CELLML = 25;
const int CMISS_BOUNDARY_CONDITION_SPARSE_MATRICES = 1;
const int CMISS_BOUNDARY_CONDITION_FULL_MATRICES = 2;
const int CMISS_ERRORS_RETURN_ERROR_CODE = 0; /*<Just return the error code \see OPENCMISS_CMISSErrorHandlingModes,OPENCMISS */
const int CMISS_ERRORS_OUTPUT_ERROR = 1; /*<Output the error traceback and return the error code \see OPENCMISS_CMISSErrorHandlingModes,OPENCMISS */
const int CMISS_ERRORS_TRAP_ERROR = 2; /*<Trap the error by outputing the error traceback and stopping the program \see OPENCMISS_CMISSErrorHandlingModes,OPENCMISS */
const int CMISS_CELLML_MODELS_FIELD = 1; /*<CellML models field type \see OPENCMISS_CellMLFieldTypes,OPENCMISS */
const int CMISS_CELLML_STATE_FIELD = 2; /*<CellML state field type \see OPENCMISS_CellMLFieldTypes,OPENCMISS */
const int CMISS_CELLML_INTERMEDIATE_FIELD = 3; /*<CellML intermediate field type \see OPENCMISS_CellMLFieldTypes,OPENCMISS */
const int CMISS_CELLML_PARAMETERS_FIELD = 4; /*<CellML parameters field type \see OPENCMISS_CellMLFieldTypes,OPENCMISS */
const int CMISS_NO_GLOBAL_DERIV = 1; /*<No global derivative i.e., u \see OPENCMISS_GlobalDerivativeConstants,OPENCMISS */
const int CMISS_GLOBAL_DERIV_S1 = 2; /*<First global derivative in the s1 direction i.e., du/ds1 \see OPENCMISS_GlobalDerivativeConstants,OPENCMISS */
const int CMISS_GLOBAL_DERIV_S2 = 3; /*<First global derivative in the s2 direction i.e., du/ds2 \see OPENCMISS_GlobalDerivativeConstants,OPENCMISS */
const int CMISS_GLOBAL_DERIV_S1_S2 = 4; /*<Global Cross derivative in the s1 and s2 direction i.e., d^2u/ds1ds2 \see OPENCMISS_GlobalDerivativeConstants,OPENCMISS */
const int CMISS_GLOBAL_DERIV_S3 = 5; /*<First global derivative in the s3 direction i.e., du/ds3 \see OPENCMISS_GlobalDerivativeConstants,OPENCMISS */
const int CMISS_GLOBAL_DERIV_S1_S3 = 6; /*<Global Cross derivative in the s1 and s3 direction i.e., d^2u/ds1ds3 \see OPENCMISS_GlobalDerivativeConstants,OPENCMISS */
const int CMISS_GLOBAL_DERIV_S2_S3 = 7; /*<Global Cross derivative in the s2 and s3 direction i.e., d^2u/ds2ds3 \see OPENCMISS_GlobalDerivativeConstants,OPENCMISS */
const int CMISS_GLOBAL_DERIV_S1_S2_S3 = 8; /*<Cross derivative in the s1, s2 and s3 direction i.e., d^3u/ds1ds2ds3 \see OPENCMISS_GlobalDerivativeConstants,OPENCMISS */
const int CMISS_CONTROL_LOOP_NODE = 0; /*<The identifier for a each "leaf" node in a control loop. \see OPENCMISS_ControlLoopIdentifiers,OPENCMISS */
const int CMISS_CONTROL_LOOP_NO_OUTPUT = 0; /*<No output from the control loop. \see OPENCMISS_ControlLoopOutputTypes,OPENCMISS */
const int CMISS_CONTROL_LOOP_PROGRESS_OUTPUT = 1; /*<Progress output from the control loop. \see OPENCMISS_ControlLoopOutputTypes,OPENCMISS */
const int CMISS_CONTROL_LOOP_TIMING_OUTPUT = 2; /*<Timing output from the control loop. \see OPENCMISS_ControlLoopOutputTypes,OPENCMISS */
const int CMISS_COORDINATE_RECTANGULAR_CARTESIAN_TYPE = 1; /*<Rectangular Cartesian coordinate system type \see OPENCMISS_CoordinateSystemTypes,OPENCMISS */
const int CMISS_COORDINATE_CYLINDRICAL_POLAR_TYPE = 2; /*<Cylindrical polar coordinate system type \see OPENCMISS_CoordinateSystemTypes,OPENCMISS */
const int CMISS_COORDINATE_SPHERICAL_POLAR_TYPE = 3; /*<Spherical polar coordinate system type \see OPENCMISS_CoordinateSystemTypes,OPENCMISS */
const int CMISS_COORDINATE_PROLATE_SPHEROIDAL_TYPE = 4; /*<Prolate spheroidal coordinate system type \see OPENCMISS_CoordinateSystemTypes,OPENCMISS */
const int CMISS_COORDINATE_OBLATE_SPHEROIDAL_TYPE = 5; /*<Oblate spheroidal coordinate system type \see OPENCMISS_CoordinateSystemTypes,OPENCMISS */
const int CMISS_COORDINATE_NO_RADIAL_INTERPOLATION_TYPE = 0; /*<No radial interpolation \see OPENCMISS_CoordinateRadialInterpolations,OPENCMISS */
const int CMISS_COORDINATE_RADIAL_INTERPOLATION_TYPE = 1; /*<r radial interpolation \see OPENCMISS_CoordinateRadialInterpolations,OPENCMISS */
const int CMISS_COORDINATE_RADIAL_SQUARED_INTERPOLATION_TYPE = 2; /*<r^2 radial interpolation \see OPENCMISS_CoordinateRadialInterpolations,OPENCMISS */
const int CMISS_COORDINATE_RADIAL_CUBED_INTERPOLATION_TYPE = 3; /*<r^3 radial interpolation \see OPENCMISS_CoordinateRadialInterpolations,OPENCMISS */
const int CMISS_DATA_PROJECTION_BOUNDARY_LINES_PROJECTION_TYPE = 1; /*<The boundary line projection type for data projection, only projects to boundary lines of the mesh. \see OPENCMISS_DataProjectionProjectionTypes,OPENCMISS */
const int CMISS_DATA_PROJECTION_BOUNDARY_FACES_PROJECTION_TYPE = 2; /*<The boundary face projection type for data projection, only projects to boundary faces of the mesh. \see OPENCMISS_DataProjectionProjectionTypes,OPENCMISS */
const int CMISS_DATA_PROJECTION_ALL_ELEMENTS_PROJECTION_TYPE = 3; /*<The element projection type for data projection, projects to all elements in mesh. \see OPENCMISS_DataProjectionProjectionTypes,OPENCMISS */
const int CMISS_EQUATIONS_NO_OUTPUT = 0; /*<No output from the equations \see OPENCMISS_EquationsOutputTypes,OPENCMISS */
const int CMISS_EQUATIONS_TIMING_OUTPUT = 1; /*<Timing information output. \see OPENCMISS_EquationsOutputTypes,OPENCMISS */
const int CMISS_EQUATIONS_MATRIX_OUTPUT = 2; /*<All below and equation matrices output. \see OPENCMISS_EquationsOutputTypes,OPENCMISS */
const int CMISS_EQUATIONS_ELEMENT_MATRIX_OUTPUT = 3; /*<All below and element matrices output. \see OPENCMISS_EquationsOutputTypes,OPENCMISS */
const int CMISS_EQUATIONS_NODAL_MATRIX_OUTPUT = 4; /*<All below and nodal matrices output. \see OPENCMISS_EquationsOutputTypes,OPENCMISS */
const int CMISS_EQUATIONS_SPARSE_MATRICES = 1; /*<Use sparse matrices for the equations. \see OPENCMISS_EquationsSparsityTypes,OPENCMISS */
const int CMISS_EQUATIONS_FULL_MATRICES = 2; /*<Use fully populated matrices for the equations. \see OPENCMISS_EquationsSparsityTypes,OPENCMISS */
const int CMISS_EQUATIONS_UNLUMPED_MATRICES = 1; /*<The equations matrices are not lumped. \see OPENCMISS_EquationsLumpingTypes,OPENCMISS */
const int CMISS_EQUATIONS_LUMPED_MATRICES = 2; /*<The equations matrices are "mass" lumped. \see OPENCMISS_EquationsLumpingTypes,OPENCMISS */
const int CMISS_EQUATIONS_LINEAR = 1; /*<The equations are linear. \see OPENCMISS_EquationsLinearityTypes,OPENCMISS */
const int CMISS_EQUATIONS_NONLINEAR = 2; /*<The equations are non-linear. \see \see OPENCMISS_EquationsLinearityTypes,OPENCMISS */
const int CMISS_EQUATIONS_NONLINEAR_BCS = 3; /*<The equations have non-linear boundary conditions. \see \see OPENCMISS_EquationsLinearityTypes,OPENCMISS */
const int CMISS_EQUATIONS_STATIC = 1; /*<The equations are static and have no time dependence. \see OPENCMISS_EquationsTimeDependenceTypes,OPENCMISS */
const int CMISS_EQUATIONS_QUASISTATIC = 2; /*<The equations are quasi-static. \see OPENCMISS_EquationsTimeDependenceTypes,OPENCMISS */
const int CMISS_EQUATIONS_FIRST_ORDER_DYNAMIC = 3; /*<The equations are first order dynamic. \see OPENCMISS_EquationsTimeDependenceTypes,OPENCMISS */
const int CMISS_EQUATIONS_SECOND_ORDER_DYNAMIC = 4; /*<The equations are a second order dynamic. \see OPENCMISS_EquationsTimeDependenceTypes,OPENCMISS */
const int CMISS_EQUATIONS_TIME_STEPPING = 5; /*<The equations are for time stepping. \see OPENCMISS_EquationsTimeDependenceTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NO_CLASS = 0; /*<No equations set class \see OPENCMISS_EquationsSetClasses,OPENCMISS */
const int CMISS_EQUATIONS_SET_ELASTICITY_CLASS = 1; /*<Elasticity equations set class \see OPENCMISS_EquationsSetClasses,OPENCMISS */
const int CMISS_EQUATIONS_SET_FLUID_MECHANICS_CLASS = 2; /*<Fluid Mechanics equations set class \see OPENCMISS_EquationsSetClasses,OPENCMISS */
const int CMISS_EQUATIONS_SET_ELECTROMAGNETICS_CLASS = 3; /*<Electromagnetics equations set class \see OPENCMISS_EquationsSetClasses,OPENCMISS */
const int CMISS_EQUATIONS_SET_CLASSICAL_FIELD_CLASS = 4; /*<Classical Field equations set class \see OPENCMISS_EquationsSetClasses,OPENCMISS */
const int CMISS_EQUATIONS_SET_BIOELECTRICS_CLASS = 5; /*<Bioelectrics equations set class \see OPENCMISS_EquationsSetClasses,OPENCMISS */
const int CMISS_EQUATIONS_SET_MODAL_CLASS = 6; /*<Modal equations set class \see OPENCMISS_EquationsSetClasses,OPENCMISS */
const int CMISS_EQUATIONS_SET_FITTING_CLASS = 7; /*<Fitting equations set class \see OPENCMISS_EquationsSetClasses,OPENCMISS */
const int CMISS_EQUATIONS_SET_OPTIMISATION_CLASS = 8; /*<Optimisation equations set class \see OPENCMISS_EquationsSetClasses,OPENCMISS */
const int CMISS_EQUATIONS_SET_MULTI_PHYSICS_CLASS = 9; /*<Multi Physics equations set class \see OPENCMISS_EquationsSetClasses,OPENCMISS */
const int CMISS_EQUATIONS_SET_NO_TYPE = 0; /*<No equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_LINEAR_ELASTICITY_TYPE = 1; /*<Linear elasticity equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_FINITE_ELASTICITY_TYPE = 2; /*<Finite elasticity equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_STOKES_EQUATION_TYPE = 1; /*<Stokes equation equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NAVIER_STOKES_EQUATION_TYPE = 2; /*<Navier-Stokes equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_DARCY_EQUATION_TYPE = 3; /*<Darcy equation equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_DARCY_PRESSURE_EQUATION_TYPE = 4; /*<Darcy pressure equation equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_POISEUILLE_EQUATION_TYPE = 5; /*<Poiseuille equation equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_BURGERS_EQUATION_TYPE = 6; /*<Burgers equation equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_CHARACTERISTIC_EQUATION_TYPE = 7; /*<Characteristic equation equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_ELECTROSTATIC_TYPE = 1; /*<Electrostatic equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_MAGNETOSTATIC_TYPE = 2; /*<Magnetostatic equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_MAXWELLS_EQUATIONS_TYPE = 3; /*<Maxwells equation equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_LAPLACE_EQUATION_TYPE = 1; /*<Laplace equation equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_POISSON_EQUATION_TYPE = 2; /*<Poisson equation equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_HELMHOLTZ_EQUATION_TYPE = 3; /*<Helmholtz equation equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_WAVE_EQUATION_TYPE = 4; /*<Wave equation equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_DIFFUSION_EQUATION_TYPE = 6; /*<Diffusion equation equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_ADVECTION_EQUATION_TYPE = 11; /*<Advection-Diffusion equation equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_ADVECTION_DIFFUSION_EQUATION_TYPE = 7; /*<Advection-Diffusion equation equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_REACTION_DIFFUSION_EQUATION_TYPE = 8; /*<Reaction-Diffusion equation equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_BIHARMONIC_EQUATION_TYPE = 9; /*<Biharmonic equation equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_MONODOMAIN_EQUATION_TYPE = 1; /*<Monodomain equation equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_BIDOMAIN_EQUATION_TYPE = 2; /*<Bidomain equation equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_LINEAR_ELASTIC_MODAL_TYPE = 1; /*<Linear elasticity modal equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_DATA_FITTING_EQUATION_TYPE = 10; /*<Galerkin projection equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_FINITE_ELASTICITY_DARCY_TYPE = 1; /*<Finite Elasticity Darcy equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_FINITE_ELASTICITY_STOKES_TYPE = 2; /*<Finite Elasticity Stokes equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_FINITE_ELASTICITY_NAVIER_STOKES_TYPE = 3; /*<Finite Elasticity Navier Stokes equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_DIFFUSION_DIFFUSION_TYPE = 4; /*<Diffusion Diffusion equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_DIFFUSION_ADVECTION_DIFFUSION_TYPE = 5; /*<Diffusion Advection Diffusion equations set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_MONODOMAIN_STRANG_SPLITTING_EQUATION_TYPE = 3; /*<Monodomain equation equations Strang Splitting set type \see OPENCMISS_EquationsSetTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NO_SUBTYPE = 0; /*<No equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_THREE_DIMENSIONAL_SUBTYPE = 4; /*<Three dimensional linear elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_TWO_DIMENSIONAL_PLANE_STRESS_SUBTYPE = 2; /*<Plane stress linear elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_TWO_DIMENSIONAL_PLANE_STRAIN_SUBTYPE = 3; /*<Plane strain linear elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_ONE_DIMENSIONAL_SUBTYPE = 1; /*<One dimensional linear elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_PLATE_SUBTYPE = 5; /*<Plate linear elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_SHELL_SUBTYPE = 6; /*<Shell linear elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_MOONEY_RIVLIN_SUBTYPE = 1; /*<Mooney-Rivlin constitutive law for finite elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_INCOMPRESSIBLE_MOONEY_RIVLIN_SUBTYPE = 21; /*<Incompressible Mooney-Rivlin constitutive law for finite elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NEARLY_INCOMPRESSIBLE_MOONEY_RIVLIN_SUBTYPE = 22; /*<Nearly Incompressible Mooney-Rivlin constitutive law for finite elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_MOONEY_RIVLIN_ACTIVECONTRACTION_SUBTYPE = 24; /*<Mooney-Rivlin constitutive law with steady-state active contraction for finite elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_STVENANT_KIRCHOFF_ACTIVECONTRACTION_SUBTYPE = 25; /*<St Venant Kirchoff constitutive law with steady-state active contraction for finite elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_ACTIVECONTRACTION_SUBTYPE = 6; /*<Active contraction/costa-based law with quasistatic time loop for finite elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_ISOTROPIC_EXPONENTIAL_SUBTYPE = 2; /*<Isotropic exponential constitutive law for finite elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_TRANSVERSE_ISOTROPIC_EXPONENTIAL_SUBTYPE = 3; /*<Transverse isotropic exponential constitutive law for finite elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_TRANSVERSE_ISOTROPIC_ACTIVE_SUBTYPE = 27; /*<Transverse isotropic, active-contraction constitutive law for finite elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_TRANS_ISOTROPIC_ACTIVE_TRANSITION_SUBTYPE = 28; /*<Transverse isotropic, active-contraction material-transition constitutive law for finite elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_ORTHOTROPIC_MATERIAL_COSTA_SUBTYPE = 4; /*<Orthotropic Costa constitutive law for finite elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_COMPRESSIBLE_FINITE_ELASTICITY_SUBTYPE = 5; /*<Compressible version for finite elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_COMPRESSIBLE_ACTIVECONTRACTION_SUBTYPE = 26; /*<Compressible version for finite elasticity equations set with active contraction subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_TRANSVERSE_ISOTROPIC_GUCCIONE_SUBTYPE = 15; /*<Transverse isotropic Guccione constitutive law for finite elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_GUCCIONE_ACTIVECONTRACTION_SUBTYPE = 32; /*<Transverse isotropic Guccione constitutive law with active contraction subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_INCOMPRESS_FINITE_ELASTICITY_DARCY_SUBTYPE = 8; /*<Incompressible version for finite elasticity coupled with Darcy equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_ELASTICITY_DARCY_INRIA_MODEL_SUBTYPE = 10; /*<INRIA Model for finite elasticity coupled with Darcy equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_ELASTICITY_MULTI_COMP_DARCY_INRIA_SUBTYPE = 12; /*<Multi Compartment Darcy INRIA Model coupled with finite elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_INCOMPRESS_ELASTICITY_DRIVEN_DARCY_SUBTYPE = 11; /*<Incompressible finite elasticity with Darcy flow driven by solid hydrostatic pressure \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_INCOMPRESSIBLE_ELASTICITY_DRIVEN_MR_SUBTYPE = 13; /*<Incompressible finite elasticity with Darcy flow driven by solid hydrostatic pressure, formulated in terms of modified invariants. \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_INCOMPRESS_ELAST_MULTI_COMP_DARCY_SUBTYPE = 14;
const int CMISS_EQUATIONS_SET_MEMBRANE_SUBTYPE = 7; /*<Compressible version for finite elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_ORTHOTROPIC_HOLZAPFEL_OGDEN_SUBTYPE = 9; /*<Orthotropic Holzapfel-Ogden constitutive law for finite elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_HOLZAPFEL_OGDEN_ACTIVECONTRACTION_SUBTYPE = 31; /*<Orthotropic Holzapfel-Ogden constitutive law with active contraction for finite elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_ELASTICITY_FLUID_PRES_STATIC_INRIA_SUBTYPE = 16; /*<Static finite elasticity coupled with fluid pressure set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_ELASTICITY_FLUID_PRES_HOLMES_MOW_SUBTYPE = 19; /*<Holmes and Mow's poroelastic constitutive relation subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_TRANSVERSE_ISOTROPIC_POLYNOMIAL_SUBTYPE = 20; /*<Transverse isotropic constitutive law for finite elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_ANISOTROPIC_POLYNOMIAL_SUBTYPE = 29; /*<Anisotropic polynomial constitutive law for finite elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_ANISOTROPIC_POLYNOMIAL_ACTIVE_SUBTYPE = 30; /*<Anisotropic polynomial active constitutive law for finite elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_TRANSVERSE_ISOTROPIC_HUMPHREY_YIN_SUBTYPE = 23; /*<Humphrey and Yin transversely isotropic constitutive relation subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_STATIC_STOKES_SUBTYPE = 1; /*<Static Stokes equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_LAPLACE_STOKES_SUBTYPE = 2; /*<Laplace type Stokes equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_TRANSIENT_STOKES_SUBTYPE = 3; /*<Transient Stokes equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_ALE_STOKES_SUBTYPE = 5; /*<ALE Stokes equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_PGM_STOKES_SUBTYPE = 6; /*<PGM Stokes equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_OPTIMISED_STOKES_SUBTYPE = 4; /*<Optimised Stokes equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_STATIC_NAVIER_STOKES_SUBTYPE = 1; /*<Static Navier-Stokes equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_LAPLACE_NAVIER_STOKES_SUBTYPE = 2; /*<Laplace type Navier-Stokes equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_TRANSIENT_NAVIER_STOKES_SUBTYPE = 3; /*<Transient Navier-Stokes equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_TRANSIENT_RBS_NAVIER_STOKES_SUBTYPE = 9; /*<Transient residual-based stabilisation Navier-Stokes equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_STATIC_RBS_NAVIER_STOKES_SUBTYPE = 13; /*<Transient residual-based stabilisation Navier-Stokes equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_MULTISCALE3D_NAVIER_STOKES_SUBTYPE = 11; /*<Transient stabilised 3D Navier-Stokes equations set with coupled multiscale boundaries subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_CONSTITUTIVE_MU_NAVIER_STOKES_SUBTYPE = 18; /*<Transient stabilised 3D Navier-Stokes equations set with coupled constitutive model for non-Newtonian viscosity \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_TRANSIENT1D_NAVIER_STOKES_SUBTYPE = 8; /*<TRANSIENT1D Navier-Stokes equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_TRANSIENT1D_ADV_NAVIER_STOKES_SUBTYPE = 14; /*<TRANSIENT1D Navier-Stokes equations set subtype with coupled Advection \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_CHARACTERISTIC_SUBTYPE = 1; /*<Static Characteristics equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_COUPLED1D0D_NAVIER_STOKES_SUBTYPE = 12; /*<Coupled 1D-0D Navier-Stokes equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_COUPLED1D0D_ADV_NAVIER_STOKES_SUBTYPE = 15; /*<Coupled 1D-0D Navier-Stokes equations set subtype with coupled Advection \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_STREE1D0D_SUBTYPE = 16; /*<Coupled 1D-0D Navier-Stokes equations set subtype with coupled Advection \see */
const int CMISS_EQUATIONS_SET_STREE1D0D_ADV_SUBTYPE = 17; /*<Coupled 1D-0D Navier-Stokes equations set subtype with coupled Advection \see */
const int CMISS_EQUATIONS_SET_ALE_NAVIER_STOKES_SUBTYPE = 5; /*<ALE Navier-Stokes equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_PGM_NAVIER_STOKES_SUBTYPE = 6; /*<PGM Navier-Stokes equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_OPTIMISED_NAVIER_STOKES_SUBTYPE = 4; /*<Optimised Navier-Stokes equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_STANDARD_DARCY_SUBTYPE = 1; /*<Standard Darcy equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_QUASISTATIC_DARCY_SUBTYPE = 2; /*<Quasistatic Darcy equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_ALE_DARCY_SUBTYPE = 3; /*<ALE Darcy equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_TRANSIENT_DARCY_SUBTYPE = 4; /*<Transient Darcy equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_TRANSIENT_ALE_DARCY_SUBTYPE = 5; /*<Transient ALE Darcy equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_MULTI_COMPARTMENT_DARCY_SUBTYPE = 6; /*<Multi Compartment Darcy equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_BURGERS_SUBTYPE = 1; /*<Burgers equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_GENERALISED_BURGERS_SUBTYPE = 2; /*<Generalised Burgers equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_STATIC_BURGERS_SUBTYPE = 3; /*<Static Burgers equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_INVISCID_BURGERS_SUBTYPE = 4; /*<Inviscid Burgers equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_STANDARD_LAPLACE_SUBTYPE = 1; /*<Standard Laplace equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_GENERALISED_LAPLACE_SUBTYPE = 2; /*<Generalised Laplace equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_MOVING_MESH_LAPLACE_SUBTYPE = 3; /*<Moving mesh Laplace equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_STATIC_POISEUILLE_SUBTYPE = 1; /*<Static Poiseuille equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_DYNAMIC_POISEUILLE_SUBTYPE = 2; /*<Dynamic Poiseuille equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_LINEAR_PRESSURE_POISSON_SUBTYPE = 5; /*<Vector source Poisson equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NONLINEAR_PRESSURE_POISSON_SUBTYPE = 6; /*<Vector source Poisson equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_ALE_PRESSURE_POISSON_SUBTYPE = 7; /*<Vector source Poisson equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_FITTED_PRESSURE_POISSON_SUBTYPE = 8; /*<Vector source Poisson equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_CONSTANT_SOURCE_POISSON_SUBTYPE = 1; /*<Constant source Poisson equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_EXTRACELLULAR_BIDOMAIN_POISSON_SUBTYPE = 9; /*<Poisson equations set subtype, that is the extracellular bidomain equation \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_LINEAR_SOURCE_POISSON_SUBTYPE = 2; /*<Linear source Poisson equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_QUADRATIC_SOURCE_POISSON_SUBTYPE = 3; /*<Quadratic source Poisson equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_EXPONENTIAL_SOURCE_POISSON_SUBTYPE = 4; /*<Exponential source Poisson equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_STANDARD_HELMHOLTZ_SUBTYPE = 2; /*<No source Helmholtz equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_GENERALISED_HELMHOLTZ_SUBTYPE = 3; /*<No source Helmholtz equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NO_SOURCE_DIFFUSION_SUBTYPE = 1; /*<No source diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_CONSTANT_SOURCE_DIFFUSION_SUBTYPE = 2; /*<Constant source diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_LINEAR_SOURCE_DIFFUSION_SUBTYPE = 3; /*<Linear source diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_QUADRATIC_SOURCE_DIFFUSION_SUBTYPE = 4; /*<Quadratic source diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_EXPONENTIAL_SOURCE_DIFFUSION_SUBTYPE = 5; /*<Exponential source diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NO_SOURCE_ALE_DIFFUSION_SUBTYPE = 6; /*<No source diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_CONSTANT_SOURCE_ALE_DIFFUSION_SUBTYPE = 7; /*<Constant source diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_LINEAR_SOURCE_ALE_DIFFUSION_SUBTYPE = 8; /*<Linear source diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_QUADRATIC_SOURCE_ALE_DIFFUSION_SUBTYPE = 9; /*<Quadratic source diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_EXPONENTIAL_SOURCE_ALE_DIFFUSION_SUBTYPE = 10; /*<Exponential source diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_MULTI_COMP_TRANSPORT_DIFFUSION_SUBTYPE = 11; /*<Multi-compartment transport diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_ADVECTION_SUBTYPE = 1; /*<advection equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NO_SOURCE_ADVECTION_DIFFUSION_SUBTYPE = 1; /*<No source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_CONSTANT_SOURCE_ADVECTION_DIFFUSION_SUBTYPE = 2; /*<Constant source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_LINEAR_SOURCE_ADVECTION_DIFFUSION_SUBTYPE = 3; /*<Linear source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_QUADRATIC_SOURCE_ADVEC_DIFF_SUBTYPE = 4; /*<Quadratic source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_EXPONENTIAL_SOURCE_ADVEC_DIFF_SUBTYPE = 5; /*<Exponential source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_CONSTITUTIVE_LAW_IN_CELLML_EVALUATE_SUBTYPE = 17; /*<In CellML evaluated incompressible material law for finite elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NO_SOURCE_ALE_ADVECTION_DIFFUSION_SUBTYPE = 21; /*<No source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_CONSTANT_SOURCE_ALE_ADVEC_DIFF_SUBTYPE = 22; /*<Constant source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_LINEAR_SOURCE_ALE_ADVEC_DIFF_SUBTYPE = 23; /*<Linear source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_QUADRATIC_SOURCE_ALE_ADVEC_DIFF_SUBTYPE = 24; /*<Quadratic source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_EXP_SOURCE_ALE_ADVECTION_DIFFUSION_SUBTYPE = 25; /*<Exponential source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NO_SOURCE_STATIC_ADVEC_DIFF_SUBTYPE = 6; /*<No source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_CONSTANT_SOURCE_STATIC_ADVEC_DIFF_SUBTYPE = 7; /*<Constant source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_LINEAR_SOURCE_STATIC_ADVEC_DIFF_SUBTYPE = 8; /*<Linear source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NO_SOURCE_ADVECTION_DIFF_SUPG_SUBTYPE = 9; /*<No source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_CONSTANT_SOURCE_ADVECTION_DIFF_SUPG_SUBTYPE = 10; /*<Constant source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_LINEAR_SOURCE_ADVECTION_DIFF_SUPG_SUBTYPE = 11; /*<Linear source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_QUAD_SOURCE_ADVECTION_DIFF_SUPG_SUBTYPE = 12; /*<Quadratic source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_EXP_SOURCE_ADVECTION_DIFF_SUPG_SUBTYPE = 13; /*<Exponential source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NO_SOURCE_ALE_ADVECTION_DIFF_SUPG_SUBTYPE = 29; /*<No source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_CONSTANT_SOURCE_ALE_ADVEC_DIFF_SUPG_SUBTYPE = 30; /*<Constant source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_LINEAR_SOURCE_ALE_ADVEC_DIFF_SUPG_SUBTYPE = 31; /*<Linear source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_QUAD_SOURCE_ALE_ADVECTION_DIFF_SUPG_SUBTYPE = 32; /*<Quadratic source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_EXP_SOURCE_ALE_ADVECTION_DIFF_SUPG_SUBTYPE = 33; /*<Exponential source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NO_SOURCE_STATIC_ADVEC_DIFF_SUPG_SUBTYPE = 14; /*<No source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_CONST_SOURCE_STATIC_ADVEC_DIFF_SUPG_SUBTYPE = 15; /*<Constant source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_LIN_SOURCE_STATIC_ADVEC_DIFF_SUPG_SUBTYPE = 16; /*<Linear source advection diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_COUPLED_SOURCE_DIFFUSION_ADVEC_DIFF_SUBTYPE = 17; /*<Coupled source diffusion & advection-diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_MULTI_COMP_TRANSPORT_ADVEC_DIFF_SUBTYPE = 18; /*<Multi-component transport advection-diffusion equations set \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_MULT_COMP_TRANSPORT_ADVEC_DIFF_SUPG_SUBTYPE = 19; /*<Multi-component transport advection-diffusion equations set using SUPG scheme \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_CELLML_REAC_SPLIT_REAC_DIFF_SUBTYPE = 2;
const int CMISS_EQUATIONS_SET_CELLML_REAC_NO_SPLIT_REAC_DIFF_SUBTYPE = 3;
const int CMISS_EQUATIONS_SET_CONSTANT_REAC_DIFF_SUBTYPE = 1;
const int CMISS_EQUATIONS_SET_MONODOMAIN_BUENOOROVIO_SUBTYPE = 1; /*<First monodomain equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_MONODOMAIN_TENTUSSCHER06_SUBTYPE = 2; /*<First monodomain equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_FIRST_BIDOMAIN_SUBTYPE = 1; /*<First bidomain equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_SECOND_BIDOMAIN_SUBTYPE = 2; /*<Second bidomain equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_STANDARD_DATA_FITTING_SUBTYPE = 1; /*<Standard Galerkin Projection equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_GENERALISED_DATA_FITTING_SUBTYPE = 2; /*<Generalised Galerkin Projection equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_MAT_PROPERTIES_DATA_FITTING_SUBTYPE = 3; /*<Material Properties Galerkin Projection equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_MAT_PROP_INRIA_MODEL_DATA_FITTING_SUBTYPE = 4; /*<Material Properties INRIA Model Galerkin Projection equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_VECTOR_DATA_FITTING_SUBTYPE = 5; /*<Standard Galerkin Projection equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_DIVFREE_VECTOR_DATA_FITTING_SUBTYPE = 6; /*<Standard Galerkin Projection equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_DATA_POINT_VECTOR_STATIC_FITTING_SUBTYPE = 9; /*<Standard static Galerkin Projection using data points subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_DATA_PT_VECTOR_QUASISTATIC_FITTING_SUBTYPE = 10; /*<Standard quasistatic Galerkin Projection using data points subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_VECTOR_DATA_PRE_FITTING_SUBTYPE = 7; /*<Standard Galerkin Projection equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_DIVFREE_VECTOR_DATA_PRE_FITTING_SUBTYPE = 8; /*<Standard Galerkin Projection equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_COUPLED_SOURCE_DIFFUSION_DIFFUSION_SUBTYPE = 111; /*<Coupled source diffusion-diffusion equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_STANDARD_MONODOMAIN_ELASTICITY_SUBTYPE = 141; /*<Standard Monodomain Elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_1D3D_MONODOMAIN_ELASTICITY_SUBTYPE = 142; /*<Coupled 1D Monodomain 3D Elasticity equations set subtype \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_MONODOMAIN_ELASTICITY_W_TITIN_SUBTYPE = 143; /*<Coupled 1D Monodomain 3D Elasticity equations set subtype with titin \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_MONODOMAIN_ELASTICITY_VELOCITY_SUBTYPE = 144; /*<Coupled 1D Monodomain 3D Elasticity equations set subtype with force-velocity relation \see OPENCMISS_EquationsSetSubtypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_FINITE_ELASTICITY_NAVIER_STOKES_ALE_SUBTYPE = 151; /*<Finite Elasticity Navier Stokes ALE equations set subtype \see OPENCMISS_EquationsSetSubtype,OPENCMISS */
const int CMISS_EQUATIONS_SET_FEM_SOLUTION_METHOD = 1; /*<Finite Element Method solution method. \see OPENCMISS_EquationsSetSolutionMethods,OPENCMISS */
const int CMISS_EQUATIONS_SET_BEM_SOLUTION_METHOD = 2; /*<Boundary Element Method solution method. \see OPENCMISS_EquationsSetSolutionMethods,OPENCMISS */
const int CMISS_EQUATIONS_SET_FD_SOLUTION_METHOD = 3; /*<Finite Difference solution method. \see OPENCMISS_EquationsSetSolutionMethods,OPENCMISS */
const int CMISS_EQUATIONS_SET_FV_SOLUTION_METHOD = 4; /*<Finite Volume solution method. \see OPENCMISS_EquationsSetSolutionMethods,OPENCMISS */
const int CMISS_EQUATIONS_SET_GFEM_SOLUTION_METHOD = 5; /*<Grid-based Finite Element Method solution method. \see OPENCMISS_EquationsSetSolutionMethods,OPENCMISS */
const int CMISS_EQUATIONS_SET_GFD_SOLUTION_METHOD = 6; /*<Grid-based Finite Difference solution method. \see OPENCMISS_EquationsSetSolutionMethods,OPENCMISS */
const int CMISS_EQUATIONS_SET_GFV_SOLUTION_METHOD = 7; /*<Grid-based Finite Volume solution method. \see OPENCMISS_EquationsSetSolutionMethods,OPENCMISS */
const int CMISS_EQUATIONS_SET_DERIVED_STRAIN = 1; /*<Strain tensor field output. \see OPENCMISS_EquationsSetDerivedTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_DERIVED_STRESS = 2; /*<Stress tensor field output. \see OPENCMISS_EquationsSetDerivedTypes,OPENCMISS */
const int CMISS_EQUATIONS_MATRIX_STIFFNESS = 1; /*<A stiffness matrix (multiplies displacement values) */
const int CMISS_EQUATIONS_MATRIX_DAMPING = 2; /*<A damping matrix (multiplies velocity values) */
const int CMISS_EQUATIONS_MATRIX_MASS = 3; /*<A mass matrix (multiplies acceleration values) */
const int CMISS_EQUATIONS_SET_LAPLACE_EQUATION_TWO_DIM_1 = 1; /*<u=x**2+2*x*y-y**2 \see OPENCMISS_EquationsSetLaplaceAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_LAPLACE_EQUATION_TWO_DIM_2 = 2; /*<u=cos(x)cosh(y) \see OPENCMISS_EquationsSetLaplaceAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_LAPLACE_EQUATION_THREE_DIM_1 = 3; /*<u=x**2-2*y**2+z**2 \see OPENCMISS_EquationsSetLaplaceAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_LAPLACE_EQUATION_THREE_DIM_2 = 4; /*<u=cos(x)*cosh(y)*z \see OPENCMISS_EquationsSetLaplaceAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_HELMHOLTZ_EQUATION_TWO_DIM_1 = 1; /*<u=cos(sqrt(2)*k*x)*sin(sqrt(2)*k*y) \see OPENCMISS_EquationsSetHelmholtzAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_POISEUILLE_EQUATION_TWO_DIM_1 = 1; /*<u=ln(4/(x+y+1^2)) \see OPENCMISS_EquationsSetPoiseuilleAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_POISSON_EQUATION_TWO_DIM_1 = 1; /*<u=ln(4/(x+y+1^2)) \see OPENCMISS_EquationsSetPoissonAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_POISSON_EQUATION_TWO_DIM_2 = 2; /*<u=tbd \see OPENCMISS_EquationsSetPoissonAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_POISSON_EQUATION_TWO_DIM_3 = 3; /*<u=tbd \see OPENCMISS_EquationsSetPoissonAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_POISSON_EQUATION_THREE_DIM_1 = 4; /*<u=ln(6/(x+y+z+1^2)) \see OPENCMISS_EquationsSetPoissonAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_POISSON_EQUATION_THREE_DIM_2 = 5; /*<u=tbd \see OPENCMISS_EquationsSetPoissonAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_POISSON_EQUATION_THREE_DIM_3 = 6; /*<u=tbd \see OPENCMISS_EquationsSetPoissonAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_PRESSURE_POISSON_THREE_DIM_1 = 18; /*<u=tbd \see OPENCMISS_EquationsSetPoissonAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_PRESSURE_POISSON_THREE_DIM_2 = 19; /*<u=tbd \see OPENCMISS_EquationsSetPoissonAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_DIFFUSION_EQUATION_ONE_DIM_1 = 1;
const int CMISS_EQUATIONS_SET_DIFFUSION_EQUATION_TWO_DIM_1 = 2; /*<u=exp(-kt)*sin(sqrt(k)*(x*cos(phi)+y*sin(phi))) \see OPENCMISS_EquationsSetDiffusionAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_DIFFUSION_EQUATION_THREE_DIM_1 = 3;
const int CMISS_EQUATIONS_SET_LINEAR_SOURCE_DIFFUSION_THREE_DIM_1 = 3;
const int CMISS_EQUATIONS_SET_QUADRATIC_SOURCE_DIFFUSION_ONE_DIM_1 = 1;
const int CMISS_EQUATIONS_SET_EXPONENTIAL_SOURCE_DIFFUSION_ONE_DIM_1 = 1;
const int CMISS_EQUATIONS_SET_MULTI_COMP_DIFFUSION_TWO_COMP_TWO_DIM = 4; /*<Prescribed solution, using a source term to correct for error - 2D with 2 compartments */
const int CMISS_EQUATIONS_SET_MULTI_COMP_DIFFUSION_TWO_COMP_THREE_DIM = 5; /*<Prescribed solution, using a source term to correct for error - 3D with 2 compartments */
const int CMISS_EQUATIONS_SET_MULTI_COMP_DIFFUSION_THREE_COMP_THREE_DIM = 6; /*<Prescribed solution, using a source term to correct for error - 3D with 3 compartments */
const int CMISS_EQUATIONS_SET_MULTI_COMP_DIFFUSION_FOUR_COMP_THREE_DIM = 7; /*<Prescribed solution, using a source term to correct for error - 3D with 3 compartments */
const int CMISS_EQUATIONS_SET_ADVECTION_DIFFUSION_EQUATION_TWO_DIM_1 = 1; /*<u=exp(-kt)*sin(sqrt(k)*(x*cos(phi)+y*sin(phi))) \see OPENCMISS_EquationsSetDiffusionAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_STOKES_EQUATION_TWO_DIM_1 = 1; /*<u=tbd \see OPENCMISS_EquationsSetStokesAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_STOKES_EQUATION_TWO_DIM_2 = 2; /*<u=tbd \see OPENCMISS_EquationsSetStokesAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_STOKES_EQUATION_TWO_DIM_3 = 3; /*<u=tbd \see OPENCMISS_EquationsSetStokesAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_STOKES_EQUATION_TWO_DIM_4 = 4; /*<u=tbd \see OPENCMISS_EquationsSetStokesAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_STOKES_EQUATION_TWO_DIM_5 = 5; /*<u=tbd \see OPENCMISS_EquationsSetStokesAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_STOKES_EQUATION_THREE_DIM_1 = 6; /*<u=tbd \see OPENCMISS_EquationsSetStokesAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_STOKES_EQUATION_THREE_DIM_2 = 7; /*<u=tbd \see OPENCMISS_EquationsSetStokesAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_STOKES_EQUATION_THREE_DIM_3 = 8; /*<u=tbd \see OPENCMISS_EquationsSetStokesAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_STOKES_EQUATION_THREE_DIM_4 = 9; /*<u=tbd \see OPENCMISS_EquationsSetStokesAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_STOKES_EQUATION_THREE_DIM_5 = 10; /*<u=tbd \see OPENCMISS_EquationsSetStokesAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NAVIER_STOKES_EQUATION_TWO_DIM_POISEUILLE = 12; /*<fully developed 2D channel flow (parabolic) \see OPENCMISS_EquationsSetNavierStokesAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NAVIER_STOKES_EQUATION_TWO_DIM_TAYLOR_GREEN = 13; /*<2D dynamic nonlinear Taylor-Green vortex decay \see OPENCMISS_EquationsSetNavierStokesAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NAVIER_STOKES_EQUATION_FLOWRATE_AORTA = 14; /*<A fourier decomposed flow waveform for boundary conditions */
const int CMISS_EQUATIONS_SET_NAVIER_STOKES_EQUATION_SINUSOID = 15; /*<A sinusoidal flow waveform */
const int CMISS_EQUATIONS_SET_NAVIER_STOKES_EQUATION_SPLINT_FROM_FILE = 17; /*<Spline integration of dependent values specified in a file */
const int CMISS_EQUATIONS_SET_NAVIER_STOKES_EQUATION_TWO_DIM_1 = 1; /*<u=tbd \see OPENCMISS_EquationsSetNavierStokesAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NAVIER_STOKES_EQUATION_TWO_DIM_2 = 2; /*<u=tbd \see OPENCMISS_EquationsSetNavierStokesAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NAVIER_STOKES_EQUATION_TWO_DIM_3 = 3; /*<u=tbd \see OPENCMISS_EquationsSetNavierStokesAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NAVIER_STOKES_EQUATION_TWO_DIM_4 = 4; /*<u=tbd \see OPENCMISS_EquationsSetNavierStokesAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NAVIER_STOKES_EQUATION_TWO_DIM_5 = 5; /*<u=tbd \see OPENCMISS_EquationsSetNavierStokesAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NAVIER_STOKES_EQUATION_THREE_DIM_1 = 6; /*<u=tbd \see OPENCMISS_EquationsSetNavierStokesAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NAVIER_STOKES_EQUATION_THREE_DIM_2 = 7; /*<u=tbd \see OPENCMISS_EquationsSetNavierStokesAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NAVIER_STOKES_EQUATION_THREE_DIM_3 = 8; /*<u=tbd \see OPENCMISS_EquationsSetNavierStokesAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NAVIER_STOKES_EQUATION_THREE_DIM_4 = 9; /*<u=tbd \see OPENCMISS_EquationsSetNavierStokesAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_NAVIER_STOKES_EQUATION_THREE_DIM_5 = 10; /*<u=tbd \see OPENCMISS_EquationsSetNavierStokesAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_DARCY_EQUATION_TWO_DIM_1 = 1; /*<u=tbd \see OPENCMISS_EquationsSetDarcyAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_DARCY_EQUATION_TWO_DIM_2 = 2; /*<u=tbd \see OPENCMISS_EquationsSetDarcyAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_DARCY_EQUATION_TWO_DIM_3 = 3; /*<u=tbd \see OPENCMISS_EquationsSetDarcyAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_DARCY_EQUATION_THREE_DIM_1 = 4; /*<u=tbd \see OPENCMISS_EquationsSetDarcyAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_DARCY_EQUATION_THREE_DIM_2 = 5; /*<u=tbd \see OPENCMISS_EquationsSetDarcyAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_DARCY_EQUATION_THREE_DIM_3 = 6; /*<u=tbd \see OPENCMISS_EquationsSetDarcyAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_INCOMP_ELAST_DARCY_ANALYTIC_DARCY = 7; /*<this is a solution where the finite elasticity solve is skipped to allow easy analytic testing of the mass increase & velocity solve step of incompressible poromechanical model */
const int CMISS_EQUATIONS_SET_BURGERS_EQUATION_ONE_DIM_1 = 1;
const int CMISS_EQUATIONS_SET_GENERALISED_BURGERS_EQUATION_ONE_DIM_1 = 1;
const int CMISS_EQUATIONS_SET_GENERALISED_BURGERS_EQUATION_ONE_DIM_2 = 2;
const int CMISS_EQUATIONS_SET_STATIC_BURGERS_EQUATION_ONE_DIM_1 = 1;
const int CMISS_EQUATIONS_SET_LINEAR_ELASTICITY_ONE_DIM_1 = 1; /*<u=tbd \see OPENCMISS_EquationsSetLinearElasticityAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_LINEAR_ELASTICITY_TWO_DIM_1 = 2; /*<u=tbd \see OPENCMISS_EquationsSetLinearElasticityAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_LINEAR_ELASTICITY_TWO_DIM_2 = 3; /*<u=tbd \see OPENCMISS_EquationsSetLinearElasticityAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_LINEAR_ELASTICITY_THREE_DIM_1 = 4; /*<u=tbd \see OPENCMISS_EquationsSetLinearElasticityAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_LINEAR_ELASTICITY_THREE_DIM_2 = 5; /*<u=tbd \see OPENCMISS_EquationsSetLinearElasticityAnalyticFunctionTypes,OPENCMISS */
const int CMISS_EQUATIONS_SET_FINITE_ELASTICITY_CYLINDER = 1; /*<u=tbd \see OPENCMISS_EquationsSetLinearElasticityAnalyticFunctionTypes,OPENCMISS */
const int CMISS_FINITE_ELASTICITY_ANALYTIC_CYLINDER_PARAM_PIN_IDX = 1; /*<Inner pressure parameter index \see OPENCMISS_AnalyticParamIndices,OPENCMISS */
const int CMISS_FINITE_ELASTICITY_ANALYTIC_CYLINDER_PARAM_POUT_IDX = 2; /*<Outer pressure parameter index \see OPENCMISS_AnalyticParamIndices,OPENCMISS */
const int CMISS_FINITE_ELASTICITY_ANALYTIC_CYLINDER_PARAM_LAMBDA_IDX = 3; /*<Lambda parameter index \see OPENCMISS_AnalyticParamIndices,OPENCMISS */
const int CMISS_FINITE_ELASTICITY_ANALYTIC_CYLINDER_PARAM_TSI_IDX = 4; /*<Tsi parameter index \see OPENCMISS_AnalyticParamIndices,OPENCMISS */
const int CMISS_FINITE_ELASTICITY_ANALYTIC_CYLINDER_PARAM_RIN_IDX = 5; /*<Inner radius parameter index \see OPENCMISS_AnalyticParamIndices,OPENCMISS */
const int CMISS_FINITE_ELASTICITY_ANALYTIC_CYLINDER_PARAM_ROUT_IDX = 6; /*<Outer radius parameter index \see OPENCMISS_AnalyticParamIndices,OPENCMISS */
const int CMISS_FINITE_ELASTICITY_ANALYTIC_CYLINDER_PARAM_C1_IDX = 7; /*<c1 parameter index \see OPENCMISS_AnalyticParamIndices,OPENCMISS */
const int CMISS_FINITE_ELASTICITY_ANALYTIC_CYLINDER_PARAM_C2_IDX = 8; /*<c2 parameter index \see OPENCMISS_AnalyticParamIndices,OPENCMISS */
const int CMISS_FIELD_INDEPENDENT_TYPE = 1; /*<Independent field type \see OPENCMISS_FieldDependentTypes,OPENCMISS */
const int CMISS_FIELD_DEPENDENT_TYPE = 2; /*<Dependent field type \see OPENCMISS_FieldDependentTypes,OPENCMISS */
const int CMISS_FIELD_SCALAR_DIMENSION_TYPE = 1; /*<Scalar field \see OPENCMISS_FieldDimensionTypes,OPENCMISS */
const int CMISS_FIELD_VECTOR_DIMENSION_TYPE = 2; /*<Vector field \see OPENCMISS_FieldDimensionTypes,OPENCMISS */
const int CMISS_FIELD_TENSOR_DIMENSION_TYPE = 3; /*<Tensor field \see OPENCMISS_FieldDimensionTypes,OPENCMISS */
const int CMISS_FIELD_GEOMETRIC_TYPE = 1; /*<Geometric field \see OPENCMISS_FieldTypes,OPENCMISS */
const int CMISS_FIELD_FIBRE_TYPE = 2; /*<Fibre field \see OPENCMISS_FieldTypes,OPENCMISS */
const int CMISS_FIELD_GENERAL_TYPE = 3; /*<General field \see OPENCMISS_FieldTypes,OPENCMISS */
const int CMISS_FIELD_MATERIAL_TYPE = 4; /*<Material field \see OPENCMISS_FieldTypes,OPENCMISS */
const int CMISS_FIELD_GEOMETRIC_GENERAL_TYPE = 5; /*<Geometric general field \see OPENCMISS_FieldTypes,OPENCMISS */
const int CMISS_FIELD_CONSTANT_INTERPOLATION = 1; /*<Constant interpolation. One parameter for the field \see OPENCMISS_FieldInterpolationTypes,OPENCMISS */
const int CMISS_FIELD_ELEMENT_BASED_INTERPOLATION = 2; /*<Element based interpolation. Parameters are different in each element \see OPENCMISS_FieldInterpolationTypes,OPENCMISS */
const int CMISS_FIELD_NODE_BASED_INTERPOLATION = 3; /*<Node based interpolation. Parameters are nodal based and a basis function is used \see OPENCMISS_FieldInterpolationTypes,OPENCMISS */
const int CMISS_FIELD_GRID_POINT_BASED_INTERPOLATION = 4; /*<Grid point based interpolation. Parameters are different at each grid point \see OPENCMISS_FieldInterpolationTypes,OPENCMISS */
const int CMISS_FIELD_GAUSS_POINT_BASED_INTERPOLATION = 5; /*<Gauss point based interpolation. Parameters are different at each Gauss point \see OPENCMISS_FieldInterpolationTypes,OPENCMISS */
const int CMISS_FIELD_DATA_POINT_BASED_INTERPOLATION = 6; /*<Data point based interpolation. Parameters are different at each data point \see OPENCMISS_FieldInterpolationTypes,OPENCMISS */
const int CMISS_FIELD_NUMBER_OF_VARIABLE_SUBTYPES = 4; /*<The number of subtypes of a variable - i.e., u, du/dn, du/dt, d^2u/dt^2 \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_U_VARIABLE_TYPE = 1; /*<Standard variable type i.e., u \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DELUDELN_VARIABLE_TYPE = 2; /*<Normal derivative variable type i.e., du/dn \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DELUDELT_VARIABLE_TYPE = 3; /*<First time derivative variable type i.e., du/dt \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DEL2UDELT2_VARIABLE_TYPE = 4; /*<Second time derivative variable type i.e., d^2u/dt^2 \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_V_VARIABLE_TYPE = 5; /*<Second standard variable type i.e., v \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DELVDELN_VARIABLE_TYPE = 6; /*<Second normal derivative variable type i.e., dv/dn \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DELVDELT_VARIABLE_TYPE = 7; /*<Second first time derivative variable type i.e., dv/dt \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DEL2VDELT2_VARIABLE_TYPE = 8; /*<Second second time derivative variable type i.e., d^2v/dt^2 \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_U1_VARIABLE_TYPE = 9; /*<Standard variable type i.e., u \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DELU1DELN_VARIABLE_TYPE = 10; /*<Normal derivative variable type i.e., du/dn \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DELU1DELT_VARIABLE_TYPE = 11; /*<First time derivative variable type i.e., du/dt \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DEL2U1DELT2_VARIABLE_TYPE = 12; /*<Second time derivative variable type i.e., d^2u/dt^2 \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_U2_VARIABLE_TYPE = 13; /*<Standard variable type i.e., u \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DELU2DELN_VARIABLE_TYPE = 14; /*<Normal derivative variable type i.e., du/dn \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DELU2DELT_VARIABLE_TYPE = 15; /*<First time derivative variable type i.e., du/dt \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DEL2U2DELT2_VARIABLE_TYPE = 16; /*<Second time derivative variable type i.e., d^2u/dt^2 \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_U3_VARIABLE_TYPE = 17; /*<Standard variable type i.e., u \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DELU3DELN_VARIABLE_TYPE = 18; /*<Normal derivative variable type i.e., du/dn \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DELU3DELT_VARIABLE_TYPE = 19; /*<First time derivative variable type i.e., du/dt \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DEL2U3DELT2_VARIABLE_TYPE = 20; /*<Second time derivative variable type i.e., d^2u/dt^2 \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_U4_VARIABLE_TYPE = 21; /*<Standard variable type i.e., u \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DELU4DELN_VARIABLE_TYPE = 22; /*<Normal derivative variable type i.e., du/dn \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DELU4DELT_VARIABLE_TYPE = 23; /*<First time derivative variable type i.e., du/dt \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DEL2U4DELT2_VARIABLE_TYPE = 24; /*<Second time derivative variable type i.e., d^2u/dt^2 \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_U5_VARIABLE_TYPE = 25; /*<Standard variable type i.e., u \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DELU5DELN_VARIABLE_TYPE = 26; /*<Normal derivative variable type i.e., du/dn \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DELU5DELT_VARIABLE_TYPE = 27; /*<First time derivative variable type i.e., du/dt \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DEL2U5DELT2_VARIABLE_TYPE = 28; /*<Second time derivative variable type i.e., d^2u/dt^2 \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_U6_VARIABLE_TYPE = 29; /*<Standard variable type i.e., u \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DELU6DELN_VARIABLE_TYPE = 30; /*<Normal derivative variable type i.e., du/dn \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DELU6DELT_VARIABLE_TYPE = 31; /*<First time derivative variable type i.e., du/dt \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DEL2U6DELT2_VARIABLE_TYPE = 32; /*<Second time derivative variable type i.e., d^2u/dt^2 \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_U7_VARIABLE_TYPE = 33; /*<Standard variable type i.e., u \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DELU7DELN_VARIABLE_TYPE = 34; /*<Normal derivative variable type i.e., du/dn \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DELU7DELT_VARIABLE_TYPE = 35; /*<First time derivative variable type i.e., du/dt \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DEL2U7DELT2_VARIABLE_TYPE = 36; /*<Second time derivative variable type i.e., d^2u/dt^2 \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_U8_VARIABLE_TYPE = 37; /*<Standard variable type i.e., u \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DELU8DELN_VARIABLE_TYPE = 38; /*<Normal derivative variable type i.e., du/dn \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DELU8DELT_VARIABLE_TYPE = 39; /*<First time derivative variable type i.e., du/dt \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DEL2U8DELT2_VARIABLE_TYPE = 40; /*<Second time derivative variable type i.e., d^2u/dt^2 \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_U9_VARIABLE_TYPE = 41; /*<Standard variable type i.e., u \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DELU9DELN_VARIABLE_TYPE = 42; /*<Normal derivative variable type i.e., du/dn \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DELU9DELT_VARIABLE_TYPE = 43; /*<First time derivative variable type i.e., du/dt \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DEL2U9DELT2_VARIABLE_TYPE = 44; /*<Second time derivative variable type i.e., d^2u/dt^2 \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_U10_VARIABLE_TYPE = 45; /*<Standard variable type i.e., u \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DELU10DELN_VARIABLE_TYPE = 46; /*<Normal derivative variable type i.e., du/dn \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DELU10DELT_VARIABLE_TYPE = 47; /*<First time derivative variable type i.e., du/dt \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_DEL2U10DELT2_VARIABLE_TYPE = 48; /*<Second time derivative variable type i.e., d^2u/dt^2 \see OPENCMISS_FieldVariableTypes,OPENCMISS */
const int CMISS_FIELD_INTG_TYPE = 1; /*<Integer field data type \see OPENCMISS_FieldDataTypes,OPENCMISS */
const int CMISS_FIELD_SP_TYPE = 2; /*<Single precision real field data type \see OPENCMISS_FieldDataTypes,OPENCMISS */
const int CMISS_FIELD_DP_TYPE = 3; /*<Double precision real field data type \see OPENCMISS_FieldDataTypes,OPENCMISS */
const int CMISS_FIELD_L_TYPE = 4; /*<Logical field data type \see OPENCMISS_FieldDataTypes,OPENCMISS */
const int CMISS_FIELD_SEPARATED_COMPONENT_DOF_ORDER = 1; /*<Field variable component dofs are not contiguous \see OPENCMISS_FieldDOFOrderTypes,OPENCMISS */
const int CMISS_FIELD_CONTIGUOUS_COMPONENT_DOF_ORDER = 2; /*<Field variable component dofs are contiguous \see OPENCMISS_FieldDOFOrderTypes,OPENCMISS */
const int CMISS_FIELD_VALUES_SET_TYPE = 1; /*<The parameter set corresponding to the field values (at time T+DT for dynamic problems) \see OPENCMISS_FieldParameterSetTypes,OPENCMISS */
const int CMISS_FIELD_BOUNDARY_CONDITIONS_SET_TYPE = 2; /*<The parameter set corresponding to the field boundary condition values \see OPENCMISS_FieldParameterSetTypes,OPENCMISS */
const int CMISS_FIELD_INITIAL_VALUES_SET_TYPE = 3; /*<The parameter set corresponding to the field initial values \see OPENCMISS_FieldParameterSetTypes,OPENCMISS */
const int CMISS_FIELD_INCREMENTAL_VALUES_SET_TYPE = 4; /*<The parameter set corresponding to the field incremental values \see OPENCMISS_FieldParameterSetTypes,OPENCMISS */
const int CMISS_FIELD_ANALYTIC_VALUES_SET_TYPE = 5; /*<The parameter set corresponding to the analytic field values \see OPENCMISS_FieldParameterSetTypes,OPENCMISS */
const int CMISS_FIELD_PREVIOUS_VALUES_SET_TYPE = 6; /*<The parameter set corresponding to the previous field values (at time T) \see OPENCMISS_FieldParameterSetTypes,OPENCMISS */
const int CMISS_FIELD_MEAN_PREDICTED_DISPLACEMENT_SET_TYPE = 7; /*<The parameter set corresponding to the mean predicited avalues (at time T+DT) \see OPENCMISS_FieldParameterSetTypes,OPENCMISS */
const int CMISS_FIELD_VELOCITY_VALUES_SET_TYPE = 8; /*<The parameter set corresponding to the velocity values (at time T+DT) \see OPENCMISS_FieldParameterSetTypes,OPENCMISS */
const int CMISS_FIELD_INITIAL_VELOCITY_SET_TYPE = 9; /*<The parameter set corresponding to the initial velocity values for dynamic problems. This is also the previous velocity values \see OPENCMISS_FieldParameterSetTypes,OPENCMISS */
const int CMISS_FIELD_PREVIOUS_VELOCITY_SET_TYPE = 9; /*<The parameter set corresponding to the previous velocity values (at time T). This is also the initial velocity values for dynamic problems. \see OPENCMISS_FieldParameterSetTypes,OPENCMISS */
const int CMISS_FIELD_MEAN_PREDICTED_VELOCITY_SET_TYPE = 10; /*<The parameter set corresponding to the mean predicited velocity values (at time T+DT) \see OPENCMISS_FieldParameterSetTypes,OPENCMISS */
const int CMISS_FIELD_ACCELERATION_VALUES_SET_TYPE = 11; /*<The parameter set corresponding to the acceleration values (at time T+DT) \see OPENCMISS_FieldParameterSetTypes,OPENCMISS */
const int CMISS_FIELD_INITIAL_ACCELERATION_SET_TYPE = 12; /*<The parameter set corresponding to the initial acceleration values for dynamic problems. This is also the previous accelearation values \see OPENCMISS_FieldParameterSetTypes,OPENCMISS */
const int CMISS_FIELD_PREVIOUS_ACCELERATION_SET_TYPE = 12; /*<The parameter set corresponding to the previous acceleration values (at time T).This is also the initial acceleration values for dynamic problems. \see OPENCMISS_FieldParameterSetTypes,OPENCMISS */
const int CMISS_FIELD_MEAN_PREDICTED_ACCELERATION_SET_TYPE = 13; /*<The parameter set corresponding to the mean predicited acceleration values (at time T+DT) \see OPENCMISS_FieldParameterSetTypes,OPENCMISS */
const int CMISS_FIELD_PRESSURE_VALUES_SET_TYPE = 29; /*<The parameter set corresponding to the surface pressure values. \see OPENCMISS_FieldParameterSetTypes,OPENCMISS */
const int CMISS_FIELD_PREVIOUS_PRESSURE_SET_TYPE = 30; /*<The parameter set corresponding to the previous surface pressure values (at time T). \see OPENCMISS_FieldParameterSetTypes,OPENCMISS */
const int CMISS_FIELD_IMPERMEABLE_FLAG_VALUES_SET_TYPE = 34; /*<The parameter set corresponding to the impermeable flag values. \see OPENCMISS_FieldParameterSetTypes,OPENCMISS */
const int CMISS_FIELD_INTEGRATED_NEUMANN_SET_TYPE = 35; /*<Stores integrated Neumann values calculated from Neumann point values. \see OPENCMISS_FieldParameterSetTypes,OPENCMISS */
const int CMISS_FIELD_NO_SCALING = 0; /*<The field is not scaled \see OPENCMISS_FieldScalingTypes,OPENCMISS */
const int CMISS_FIELD_UNIT_SCALING = 1; /*<The field has unit scaling \see OPENCMISS_FieldScalingTypes,OPENCMISS */
const int CMISS_FIELD_ARC_LENGTH_SCALING = 2; /*<The field has arc length scaling \see OPENCMISS_FieldScalingTypes,OPENCMISS */
const int CMISS_FIELD_ARITHMETIC_MEAN_SCALING = 3; /*<The field has arithmetic mean of the arc length scaling \see OPENCMISS_FieldScalingTypes,OPENCMISS */
const int CMISS_FIELD_GEOMETRIC_MEAN_SCALING = 4; /*<The field has geometric mean of the arc length scaling \see OPENCMISS_FieldScalingTypes,OPENCMISS */
const int CMISS_FIELD_HARMONIC_MEAN_SCALING = 5; /*<The field has geometric mean of the arc length scaling \see OPENCMISS_FieldScalingTypes,OPENCMISS */
const int CMISS_GENERATED_MESH_REGULAR_MESH_TYPE = 1; /*<A regular generated mesh. \see OPENCMISS_GeneratedMeshTypes,OPENCMISS */
const int CMISS_GENERATED_MESH_POLAR_MESH_TYPE = 2; /*<A polar generated mesh. \see OPENCMISS_GeneratedMeshTypes,OPENCMISS */
const int CMISS_GENERATED_MESH_FRACTAL_TREE_MESH_TYPE = 3; /*<A fractal tree generated mesh. \see OPENCMISS_GeneratedMeshTypes,OPENCMISS */
const int CMISS_GENERATED_MESH_CYLINDER_MESH_TYPE = 4; /*<A cylinder generated mesh. \see OPENCMISS_GeneratedMeshTypes,OPENCMISS */
const int CMISS_GENERATED_MESH_ELLIPSOID_MESH_TYPE = 5; /*<An ellipsoid generated mesh. \see OPENCMISS_GeneratedMeshTypes,OPENCMISS */
const int CMISS_GENERATED_MESH_CYLINDER_INNER_SURFACE = 1; /*<Cylinder inner surface constant. \see OPENCMISS_GeneratedMeshSurfaceTypes,OPENCMISS */
const int CMISS_GENERATED_MESH_CYLINDER_OUTER_SURFACE = 2; /*<Cylinder outer surface. \see OPENCMISS_GeneratedMeshSurfaceTypes,OPENCMISS */
const int CMISS_GENERATED_MESH_CYLINDER_TOP_SURFACE = 3; /*<Cylinder top surface constant. \see OPENCMISS_GeneratedMeshSurfaceTypes,OPENCMISS */
const int CMISS_GENERATED_MESH_CYLINDER_BOTTOM_SURFACE = 4; /*<Cylinder bottom surface constant. \see OPENCMISS_GeneratedMeshSurfaceTypes,OPENCMISS */
const int CMISS_GENERATED_MESH_ELLIPSOID_INNER_SURFACE = 5; /*<Ellipsoid inner surface constant. \see OPENCMISS_GeneratedMeshSurfaceTypes,OPENCMISS */
const int CMISS_GENERATED_MESH_ELLIPSOID_OUTER_SURFACE = 6; /*<Ellipsoid outer surface constant. \see OPENCMISS_GeneratedMeshSurfaceTypes,OPENCMISS */
const int CMISS_GENERATED_MESH_ELLIPSOID_TOP_SURFACE = 7; /*<Ellipsoid top surface constant. \see OPENCMISS_GeneratedMeshSurfaceTypes,OPENCMISS */
const int CMISS_GENERATED_MESH_REGULAR_LEFT_SURFACE = 8; /*<Regular left surface constant. \see OPENCMISS_GeneratedMeshSurfaceTypes,OPENCMISS */
const int CMISS_GENERATED_MESH_REGULAR_RIGHT_SURFACE = 9; /*<Regular right surface constant. \see OPENCMISS_GeneratedMeshSurfaceTypes,OPENCMISS */
const int CMISS_GENERATED_MESH_REGULAR_TOP_SURFACE = 10; /*<Regular top surface constant. \see OPENCMISS_GeneratedMeshSurfaceTypes,OPENCMISS */
const int CMISS_GENERATED_MESH_REGULAR_BOTTOM_SURFACE = 11; /*<Regular bottom surface constant. \see OPENCMISS_GeneratedMeshSurfaceTypes,OPENCMISS */
const int CMISS_GENERATED_MESH_REGULAR_FRONT_SURFACE = 12; /*<Regular front surface constant. \see OPENCMISS_GeneratedMeshSurfaceTypes,OPENCMISS */
const int CMISS_GENERATED_MESH_REGULAR_BACK_SURFACE = 13; /*<Regular back surface constant. \see OPENCMISS_GeneratedMeshSurfaceTypes,OPENCMISS */
const int CMISS_INTERFACE_CONDITION_LAGRANGE_MULTIPLIERS_METHOD = 1; /*<Lagrange multipliers interface condition method. \see OPENCMISS_InterfaceConditionMethods,OPENCMISS */
const int CMISS_INTERFACE_CONDITION_AUGMENTED_LAGRANGE_METHOD = 2; /*<Augmented Lagrange multiplers interface condition method. \see OPENCMISS_InterfaceConditionMethods,OPENCMISS */
const int CMISS_INTERFACE_CONDITION_PENALTY_METHOD = 3; /*<Penalty interface condition method. \see OPENCMISS_InterfaceConditionMethods,OPENCMISS */
const int CMISS_INTERFACE_CONDITION_POINT_TO_POINT_METHOD = 4; /*<Point to point interface condition method. \see OPENCMISS_InterfaceConditionMethods,OPENCMISS */
const int CMISS_INTERFACE_CONDITION_FIELD_CONTINUITY_OPERATOR = 1; /*<Continuous field operator, i.e., lambda.(u1_gauss-u2_gauss). \see OPENCMISS_InterfaceConditionOperators,OPENCMISS */
const int CMISS_INTERFACE_CONDITION_FIELD_NORMAL_CONTINUITY_OPERATOR = 2; /*<Continuous field normal operator, i.e., lambda(u_1.n_1-u_2.n_2). \see OPENCMISS_InterfaceConditionOperators,OPENCMISS */
const int CMISS_INTERFACE_CONDITION_FLS_CONTACT_OPERATOR = 3; /*<Frictionless contact operator, i.e., lambda.(x_1.n-x_2.n). \see OPENCMISS_InterfaceConditionOperators,OPENCMISS */
const int CMISS_INTERFACE_CONDITION_FLS_CONTACT_REPROJECT_OPERATOR = 4; /*<Frictionless contact operator, reproject at each newton iteration and has geometric linearisation terms i.e., lambda.(x_1.n-x_2.n). \see OPENCMISS_InterfaceConditionOperators,OPENCMISS */
const int CMISS_INTERFACE_CONDITION_SOLID_FLUID_OPERATOR = 5; /*<Solid fluid operator, i.e., lambda.(v_f-du_s/dt). \see OPENCMISS_InterfaceConditionOperators,OPENCMISS */
const int CMISS_INTERFACE_CONDITION_SOLID_FLUID_NORMAL_OPERATOR = 6; /*<Solid fluid normal operator, i.e., lambda(v_f.n_f-du_s/dt.n_s). \see OPENCMISS_InterfaceConditionOperators,OPENCMISS */
const int CMISS_INTERFACE_CONDITION_GAUSS_INTEGRATION = 1; /*<Gauss points integration type, i.e. Loop over element Gauss points and sum up their contribution. \see OPENCMISS_InterfaceConditionIntegrationTypes,OPENCMISS */
const int CMISS_INTERFACE_CONDITION_DATA_POINTS_INTEGRATION = 2; /*<Data points integration type i.e. Loop over data points and  sum up their contribution. \see OPENCMISS_InterfaceConditionIntegrationTypes,OPENCMISS */
const int CMISS_DECOMPOSITION_ALL_TYPE = 1; /*<The decomposition contains all elements. \see OPENCMISS_DecompositionTypes,OPENCMISS */
const int CMISS_DECOMPOSITION_CALCULATED_TYPE = 2; /*<The element decomposition is calculated by graph partitioning. \see OPENCMISS_DecompositionTypes,OPENCMISS */
const int CMISS_DECOMPOSITION_USER_DEFINED_TYPE = 3; /*<The user will set the element decomposition. \see OPENCMISS_DecompositionTypes,OPENCMISS */
const int CMISS_MATRIX_BLOCK_STORAGE_TYPE = 0; /*<Distributed matrix block storage type \see OPENCMISS_MatrixStorageTypes,OPENCMISS */
const int CMISS_MATRIX_DIAGONAL_STORAGE_TYPE = 1; /*<Distributed matrix diagonal storage type \see OPENCMISS_MatrixStorageTypes,OPENCMISS */
const int CMISS_MATRIX_COLUMN_MAJOR_STORAGE_TYPE = 2; /*<Distributed matrix column major storage type \see OPENCMISS_MatrixStorageTypes,OPENCMISS */
const int CMISS_MATRIX_ROW_MAJOR_STORAGE_TYPE = 3; /*<Distributed matrix row major storage type \see OPENCMISS_MatrixStorageTypes,OPENCMISS */
const int CMISS_MATRIX_COMPRESSED_ROW_STORAGE_TYPE = 4; /*<Distributed matrix compressed row storage type \see OPENCMISS_MatrixStorageTypes,OPENCMISS */
const int CMISS_MATRIX_COMPRESSED_COLUMN_STORAGE_TYPE = 5; /*<Distributed matrix compressed column storage type \see OPENCMISS_MatrixStorageTypes,OPENCMISS */
const int CMISS_MATRIX_ROW_COLUMN_STORAGE_TYPE = 6; /*<Distributed matrix row-column storage type \see OPENCMISS_MatrixStorageTypes,OPENCMISS */
const int CMISS_MATRIX_VECTOR_INTG_TYPE = 1;
const int CMISS_MATRIX_VECTOR_SP_TYPE = 4; /*<Single precision real distributed matrix-vector data type \see OPENCMISS_MatrixVectorDataTypes,OPENCMISS */
const int CMISS_MATRIX_VECTOR_DP_TYPE = 5; /*<Double precision real distributed matrix-vector data type \see OPENCMISS_MatrixVectorDataTypes,OPENCMISS */
const int CMISS_MATRIX_VECTOR_L_TYPE = 8; /*<Logical distributed matrix-vector data type \see OPENCMISS_MatrixVectorDataTypes,OPENCMISS */
const int CMISS_PROBLEM_NO_CLASS = 0; /*<No problem class \see OPENCMISS_ProblemClasses,OPENCMISS */
const int CMISS_PROBLEM_ELASTICITY_CLASS = 1; /*<Elasticity problem class \see OPENCMISS_ProblemClasses,OPENCMISS */
const int CMISS_PROBLEM_FLUID_MECHANICS_CLASS = 2; /*<Fluid mechanics problem class \see OPENCMISS_ProblemClasses,OPENCMISS */
const int CMISS_PROBLEM_ELECTROMAGNETICS_CLASS = 3; /*<Electromagnetics problem class \see OPENCMISS_ProblemClasses,OPENCMISS */
const int CMISS_PROBLEM_CLASSICAL_FIELD_CLASS = 4; /*<Classical field problem class \see OPENCMISS_ProblemClasses,OPENCMISS */
const int CMISS_PROBLEM_BIOELECTRICS_CLASS = 5; /*<Bioelectrics problem class \see OPENCMISS_ProblemClasses,OPENCMISS */
const int CMISS_PROBLEM_MODAL_CLASS = 6; /*<Modal problem class \see OPENCMISS_ProblemClasses,OPENCMISS */
const int CMISS_PROBLEM_FITTING_CLASS = 7; /*<Fitting problem class \see OPENCMISS_ProblemClasses,OPENCMISS */
const int CMISS_PROBLEM_OPTIMISATION_CLASS = 8; /*<Optimisation problem class \see OPENCMISS_ProblemClasses,OPENCMISS */
const int CMISS_PROBLEM_MULTI_PHYSICS_CLASS = 9; /*<Multi physics problem class \see OPENCMISS_ProblemClasses,OPENCMISS */
const int CMISS_PROBLEM_NO_TYPE = 0; /*<No problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_LINEAR_ELASTICITY_TYPE = 1; /*<Linear elasticity problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_FINITE_ELASTICITY_TYPE = 2; /*<Finite elasticity problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_LINEAR_ELASTICITY_CONTACT_TYPE = 3; /*<Linear elasticity problem subject to contact contstraint type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_FINITE_ELASTICITY_CONTACT_TYPE = 4; /*<Finite elasticity problem subject to contact constraint type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_STOKES_EQUATION_TYPE = 1; /*<Stokes equation problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_NAVIER_STOKES_EQUATION_TYPE = 2; /*<Navier-Stokes problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_DARCY_EQUATION_TYPE = 3; /*<Darcy equation problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_POISEUILLE_EQUATION_TYPE = 5; /*<Poiseuille equation problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_BURGERS_EQUATION_TYPE = 6; /*<Burgers equation problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_ELECTROSTATIC_TYPE = 1; /*<Electrostatic problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_MAGNETOSTATIC_TYPE = 2; /*<Magnetostatic problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_MAXWELLS_EQUATIONS_TYPE = 3; /*<Maxwell's equations problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_LAPLACE_EQUATION_TYPE = 1; /*<Laplace problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_POISSON_EQUATION_TYPE = 2; /*<Poisson problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_HELMHOLTZ_EQUATION_TYPE = 3; /*<Helmholtz problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_WAVE_EQUATION_TYPE = 4; /*<Wave equation problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_DIFFUSION_EQUATION_TYPE = 6; /*<Diffusion equation problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_ADVECTION_DIFFUSION_EQUATION_TYPE = 7; /*<Advection-Diffusion equation problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_REACTION_DIFFUSION_EQUATION_TYPE = 8; /*<Reaction-Diffusion equation problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_BIHARMONIC_EQUATION_TYPE = 9; /*<Bi-harmonic equation problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_MONODOMAIN_EQUATION_TYPE = 1; /*<Monodomain equation problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_BIDOMAIN_EQUATION_TYPE = 2; /*<Bidomain equation problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_LINEAR_ELASTIC_MODAL_TYPE = 1; /*<Linear elastic modal problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_DATA_FITTING_TYPE = 10; /*<Galerkin projection problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_FINITE_ELASTICITY_DARCY_TYPE = 1; /*<Finite Elasticity Darcy problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_FINITE_ELASTICITY_STOKES_TYPE = 2; /*<Finite Elasticity Stokes problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_FINITE_ELASTICITY_NAVIER_STOKES_TYPE = 3; /*<Finite Elasticity NavierStokes problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_DIFFUSION_DIFFUSION_TYPE = 4; /*<Diffusion Diffusion problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_DIFFUSION_ADVECTION_DIFFUSION_TYPE = 5; /*<Diffusion Advection Diffusion problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_MULTI_COMPARTMENT_TRANSPORT_TYPE = 6; /*<Multi-compartment transport problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_FINITE_ELASTICITY_FLUID_PRESSURE_TYPE = 7; /*<Finite elasticity fluid pressure problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_BIOELECTRIC_FINITE_ELASTICITY_TYPE = 8; /*<Monodomain finite elasticity problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_MONODOMAIN_STRANG_SPLITTING_EQUATION_TYPE = 3; /*<Monodomain equation problem type \see OPENCMISS_ProblemTypes,OPENCMISS */
const int CMISS_PROBLEM_NO_SUBTYPE = 0; /*<No problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_STATIC_STOKES_SUBTYPE = 1; /*<Static Stokes problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_LAPLACE_STOKES_SUBTYPE = 2; /*<Laplace type Stokes problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_TRANSIENT_STOKES_SUBTYPE = 3; /*<Transient Stokes problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_ALE_STOKES_SUBTYPE = 5; /*<ALE Stokes problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_PGM_STOKES_SUBTYPE = 6; /*<PGM Stokes problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_OPTIMISED_STOKES_SUBTYPE = 4; /*<Optimised Stokes problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_STATIC_NAVIER_STOKES_SUBTYPE = 1; /*<Static Navier-Stokes problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_LAPLACE_NAVIER_STOKES_SUBTYPE = 2; /*<Laplace type Navier-Stokes problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_TRANSIENT_NAVIER_STOKES_SUBTYPE = 3; /*<Transient Navier-Stokes problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_TRANSIENT_RBS_NAVIER_STOKES_SUBTYPE = 9; /*<Transient stabilised Navier-Stokes problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_MULTISCALE_NAVIER_STOKES_SUBTYPE = 10; /*<Transient stabilised Navier-Stokes problem with multiscale boundary coupling subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_TRANSIENT1D_NAVIER_STOKES_SUBTYPE = 8; /*<TRANSIENT1D Navier-Stokes problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_COUPLED1D0D_NAVIER_STOKES_SUBTYPE = 11; /*<Coupled 1D-DAE Navier-Stokes problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_TRANSIENT1D_ADV_NAVIER_STOKES_SUBTYPE = 13; /*<TRANSIENT1D Navier-Stokes problem subtype with Advection \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_COUPLED1D0D_ADV_NAVIER_STOKES_SUBTYPE = 14; /*<Coupled 1D-DAE Navier-Stokes problem subtype with Advection \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_STREE1D0D_SUBTYPE = 14; /*<Coupled 1D-DAE Navier-Stokes problem subtype with Advection \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_STREE1D0D_ADV_SUBTYPE = 14; /*<Coupled 1D-DAE Navier-Stokes problem subtype with Advection \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_ALE_NAVIER_STOKES_SUBTYPE = 5; /*<ALE Navier-Stokes problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_PGM_NAVIER_STOKES_SUBTYPE = 6; /*<PGM Navier-Stokes problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_OPTIMISED_NAVIER_STOKES_SUBTYPE = 4; /*<Optimised Navier-Stokes problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_STANDARD_DARCY_SUBTYPE = 1; /*<Standard Darcy problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_QUASISTATIC_DARCY_SUBTYPE = 2; /*<Quasistatic Darcy problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_ALE_DARCY_SUBTYPE = 3; /*<ALE Darcy problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_TRANSIENT_DARCY_SUBTYPE = 4; /*<Transient Darcy problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_PGM_DARCY_SUBTYPE = 5; /*<PGM Darcy problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_PGM_TRANSIENT_DARCY_SUBTYPE = 6; /*<PGM Transient Darcy problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_STANDARD_LAPLACE_SUBTYPE = 1; /*<Standard Laplace problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_GENERALISED_LAPLACE_SUBTYPE = 2; /*<Generalised Laplace problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_STATIC_POISEUILLE_SUBTYPE = 1; /*<Static Poiseuille problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_DYNAMIC_POISEUILLE_SUBTYPE = 2; /*<Static Poiseuille problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_EXTRACELLULAR_BIDOMAIN_POISSON_SUBTYPE = 7; /*<Linear source Poisson problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_LINEAR_SOURCE_POISSON_SUBTYPE = 1; /*<Linear source Poisson problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_LINEAR_PRESSURE_POISSON_SUBTYPE = 3; /*<Vector source Poisson problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_NONLINEAR_PRESSURE_POISSON_SUBTYPE = 4; /*<Vector source Poisson problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_ALE_PRESSURE_POISSON_SUBTYPE = 5; /*<Vector source Poisson problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_FITTED_PRESSURE_POISSON_SUBTYPE = 6; /*<Vector source Poisson problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_NONLINEAR_SOURCE_POISSON_SUBTYPE = 2; /*<Nonlinear source Poisson problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_STANDARD_HELMHOLTZ_SUBTYPE = 2; /*<No source Helmholtz problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_GENERALISED_HELMHOLTZ_SUBTYPE = 3; /*<No source Helmholtz problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_NO_SOURCE_DIFFUSION_SUBTYPE = 1; /*<No source Diffusion problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_LINEAR_SOURCE_DIFFUSION_SUBTYPE = 2; /*<Linear source Diffusion problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_NONLINEAR_SOURCE_DIFFUSION_SUBTYPE = 3; /*<Nonlinear source Diffusion problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_NO_SOURCE_ALE_DIFFUSION_SUBTYPE = 4; /*<No source Diffusion problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_LINEAR_SOURCE_ALE_DIFFUSION_SUBTYPE = 5; /*<Linear source Diffusion problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_NONLINEAR_SOURCE_ALE_DIFFUSION_SUBTYPE = 6; /*<Nonlinear source Diffusion problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_NO_SOURCE_ADVECTION_DIFFUSION_SUBTYPE = 1; /*<No source advection-Diffusion problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_LINEAR_SOURCE_ADVECTION_DIFFUSION_SUBTYPE = 2; /*<Linear source advection-Diffusion problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_NONLINEAR_SOURCE_ADVECTION_DIFFUSION_SUBTYPE = 3; /*<Nonlinear source advection-Diffusion problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_NO_SOURCE_ALE_ADVECTION_DIFFUSION_SUBTYPE = 4; /*<No source advection-Diffusion problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_LINEAR_SOURCE_ALE_ADVECTION_DIFFUSION_SUBTYPE = 5; /*<Linear source advection-Diffusion problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_NONLINEAR_SOURCE_ALE_ADVECTION_DIFFUSION_SUBTYPE = 6; /*<Nonlinear source advection-Diffusion problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_NO_SOURCE_STATIC_ADVEC_DIFF_SUBTYPE = 7; /*<No source advection-Diffusion problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_LINEAR_SOURCE_STATIC_ADVEC_DIFF_SUBTYPE = 8; /*<Linear source advection-Diffusion problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_NONLINEAR_SOURCE_STATIC_ADVEC_DIFF_SUBTYPE = 9; /*<Nonlinear source advection-Diffusion problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_STATIC_BURGERS_SUBTYPE = 1; /*<static Burgers problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_DYNAMIC_BURGERS_SUBTYPE = 2; /*<dynamic Burgers problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_CELLML_REAC_INTEG_REAC_DIFF_STRANG_SPLIT_SUBTYPE = 1;
const int CMISS_PROBLEM_CELLML_REAC_EVAL_REAC_DIFF_NO_SPLIT_SUBTYPE = 2;
const int CMISS_PROBLEM_CONSTANT_REAC_DIFF_NO_SPLIT_SUBTYPE = 3;
const int CMISS_PROBLEM_STANDARD_DATA_FITTING_SUBTYPE = 1; /*<Standard Galerkin projection problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_VECTOR_DATA_FITTING_SUBTYPE = 4; /*<Standard Galerkin projection problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_DIV_FREE_VECTOR_DATA_FITTING_SUBTYPE = 5; /*<Standard Galerkin projection problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_DATA_POINT_VECTOR_STATIC_FITTING_SUBTYPE = 8; /*<Standard static Galerkin projection problem using data points subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_DATA_PT_VECTOR_QUASISTATIC_FITTING_SUBTYPE = 9; /*<Standard quasistatic Galerkin projection problem using data points subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_VECTOR_DATA_PRE_FITTING_SUBTYPE = 6; /*<Standard Galerkin projection problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_DIV_FREE_VECTOR_DATA_PRE_FITTING_SUBTYPE = 7; /*<Standard Galerkin projection problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_GENERALISED_DATA_FITTING_SUBTYPE = 2; /*<Generalised Galerkin projection problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_MAT_PROPERTIES_DATA_FITTING_SUBTYPE = 3; /*<Material Properties Galerkin projection problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_STANDARD_ELASTICITY_DARCY_SUBTYPE = 101; /*<Standard Elasticity Darcy problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_PGM_ELASTICITY_DARCY_SUBTYPE = 102; /*<PGM Elasticity Darcy problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_QUASISTATIC_ELASTICITY_TRANSIENT_DARCY_SUBTYPE = 103; /*<Quasistatic Elasticity Transient Darcy problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_QUASISTATIC_ELAST_TRANS_DARCY_MAT_SOLVE_SUBTYPE = 104; /*<Quasistatic Elasticity Transient Darcy Material Solve problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_COUPLED_SOURCE_DIFFUSION_DIFFUSION_SUBTYPE = 111; /*<Coupled source diffusion-diffusion problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_COUPLED_SOURCE_DIFFUSION_ADVEC_DIFFUSION_SUBTYPE = 121; /*<Coupled source diffusion & advection-diffusion problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_STANDARD_MULTI_COMPARTMENT_TRANSPORT_SUBTYPE = 131; /*<Standard multi-compartment transport problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_STANDARD_ELASTICITY_FLUID_PRESSURE_SUBTYPE = 133; /*<Standard elasticity fluid pressure problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_GUDUNOV_MONODOMAIN_SIMPLE_ELASTICITY_SUBTYPE = 141; /*<Transient monodomain simple elasticity problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_GUDUNOV_MONODOMAIN_1D3D_ELASTICITY_SUBTYPE = 142; /*<Transient monodomain simple elasticity problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_MONODOMAIN_ELASTICITY_W_TITIN_SUBTYPE = 143; /*<Transient monodomain simple elasticity problem subtype with titin \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_MONODOMAIN_ELASTICITY_VELOCITY_SUBTYPE = 144; /*<Transient monodomain simple elasticity problem subtype with force-velocity relation \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_FINITE_ELASTICITY_NAVIER_STOKES_ALE_SUBTYPE = 151; /*<Coupled Finite Elasticity Navier Stokes moving mesh subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_QUASISTATIC_FINITE_ELASTICITY_SUBTYPE = 1; /*<Quasistatic finite elasticity subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_FINITE_ELASTICITY_CELLML_SUBTYPE = 2; /*<Quasistatic finite elasticity subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_MONODOMAIN_GUDUNOV_SPLIT_SUBTYPE = 1; /*<Monodomain Gudunov split problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_MONODOMAIN_STRANG_SPLIT_SUBTYPE = 2; /*<Monodomain Gudunov split problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_BIDOMAIN_GUDUNOV_SPLIT_SUBTYPE = 1; /*<Bidomain Gudunov split problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_BIDOMAIN_STRANG_SPLIT_SUBTYPE = 2; /*<Bidomain Gudunov split problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_MONODOMAIN_BUENOOROVIO_SUBTYPE = 1; /*<Generalised Laplace problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_MONODOMAIN_TENTUSSCHER06_SUBTYPE = 2; /*<Generalised Laplace problem subtype \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_LE_CONTACT_TRANSFORM_REPROJECT_SUBTYPE = 1; /*<linear elasticity problem subject to contact constraint, transform field at load increments and reproject at Newton iterations \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_LE_CONTACT_TRANSFORM_SUBTYPE = 2; /*<linear elasticity problem subject to contact constraint, transform field at load increments \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_LE_CONTACT_REPROJECT_SUBTYPE = 3; /*<linear elasticity problem subject to contact constraint, reproject at Newton iterations \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_FE_CONTACT_TRANSFORM_REPROJECT_SUBTYPE = 4; /*<linear elasticity problem subject to contact constraint, transform field at load increments and reproject at Newton iterations \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_FE_CONTACT_TRANSFORM_SUBTYPE = 5; /*<finear elasticity problem subject to contact constraint, transform field at load increments \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_FE_CONTACT_REPROJECT_SUBTYPE = 6; /*<finear elasticity problem subject to contact constraint, reproject at Newton iterations \see OPENCMISS_ProblemSubtypes,OPENCMISS */
const int CMISS_PROBLEM_CONTROL_SIMPLE_TYPE = 1; /*<Simple, one iteration control loop. \see OPENCMISS_ProblemControlLoopTypes,OPENCMISS */
const int CMISS_PROBLEM_CONTROL_FIXED_LOOP_TYPE = 2; /*<Fixed iteration control loop. \see OPENCMISS_ProblemControlLoopTypes,OPENCMISS */
const int CMISS_PROBLEM_CONTROL_TIME_LOOP_TYPE = 3; /*<Time control loop. \see OPENCMISS_ProblemControlLoopTypes,OPENCMISS */
const int CMISS_PROBLEM_CONTROL_WHILE_LOOP_TYPE = 4; /*<While control loop. \see OPENCMISS_ProblemControlLoopTypes,OPENCMISS */
const int CMISS_PROBLEM_CONTROL_LOAD_INCREMENT_LOOP_TYPE = 5; /*<Load increment control loop. \see OPENCMISS_ProblemControlLoopTypes,OPENCMISS */
const int CMISS_SOLVER_LINEAR_TYPE = 1; /*<A linear solver. \see OPENCMISS_SolverTypes,OPENCMISS */
const int CMISS_SOLVER_NONLINEAR_TYPE = 2; /*<A nonlinear solver. \see OPENCMISS_SolverTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_TYPE = 3; /*<A dynamic solver. \see  OPENCMISS_SolverTypes,OPENCMISS */
const int CMISS_SOLVER_DAE_TYPE = 4; /*<A differential-algebraic equation solver. \see OPENCMISS_SolverTypes,OPENCMISS */
const int CMISS_SOLVER_EIGENPROBLEM_TYPE = 5; /*<A eigenproblem solver. \see OPENCMISS_SolverTypes,OPENCMISS */
const int CMISS_SOLVER_OPTIMISER_TYPE = 6; /*<An optimiser solver. \see OPENCMISS_SolverTypes,OPENCMISS */
const int CMISS_SOLVER_CMISS_LIBRARY = 1; /*<CMISS (internal) solver library. \see OPENCMISS_SolverLibraries,OPENCMISS */
const int CMISS_SOLVER_PETSC_LIBRARY = 2; /*<PETSc solver library. \see OPENCMISS_SolverLibraries,OPENCMISS */
const int CMISS_SOLVER_MUMPS_LIBRARY = 3; /*<MUMPS solver library. \see OPENCMISS_SolverLibraries,OPENCMISS */
const int CMISS_SOLVER_SUPERLU_LIBRARY = 4; /*<SuperLU solver library. \see OPENCMISS_SolverLibraries,OPENCMISS */
const int CMISS_SOLVER_SPOOLES_LIBRARY = 5; /*<SPOOLES solver library. \see OPENCMISS_SolverLibraries,OPENCMISS */
const int CMISS_SOLVER_UMFPACK_LIBRARY = 6; /*<UMFPACK solver library. \see OPENCMISS_SolverLibraries,OPENCMISS */
const int CMISS_SOLVER_LUSOL_LIBRARY = 7; /*<LUSOL solver library. \see OPENCMISS_SolverLibraries,OPENCMISS */
const int CMISS_SOLVER_ESSL_LIBRARY = 8; /*<ESSL solver library. \see OPENCMISS_SolverLibraries,OPENCMISS */
const int CMISS_SOLVER_LAPACK_LIBRARY = 9; /*<LAPACK solver library. \see OPENCMISS_SolverLibraries,OPENCMISS */
const int CMISS_SOLVER_TAO_LIBRARY = 10; /*<TAO solver library. \see OPENCMISS_SolverLibraries,OPENCMISS */
const int CMISS_SOLVER_HYPRE_LIBRARY = 11; /*<Hypre solver library. \see OPENCMISS_SolverLibraries,OPENCMISS */
const int CMISS_SOLVER_PASTIX_LIBRARY = 12; /*<PaStiX solver library. \see OPENCMISS_SolverLibraries,OPENCMISS */
const int CMISS_SOLVER_LINEAR_DIRECT_SOLVE_TYPE = 1; /*<Direct linear solver type. \see OPENCMISS_LinearSolverTypes,OPENCMISS */
const int CMISS_SOLVER_LINEAR_ITERATIVE_SOLVE_TYPE = 2; /*<Iterative linear solver type. \see OPENCMISS_LinearSolverTypes,OPENCMISS */
const int CMISS_SOLVER_DIRECT_LU = 1; /*<LU direct linear solver. \see OPENCMISS_DirectLinearSolverTypes,OPENCMISS */
const int CMISS_SOLVER_DIRECT_CHOLESKY = 2; /*<Cholesky direct linear solver. \see OPENCMISS_DirectLinearSolverTypes,OPENCMISS */
const int CMISS_SOLVER_DIRECT_SVD = 3; /*<SVD direct linear solver. \see OPENCMISS_DirectLinearSolverTypes,OPENCMISS */
const int CMISS_SOLVER_ITERATIVE_RICHARDSON = 1; /*<Richardson iterative solver type. \see  OPENCMISS_IterativeLinearSolverTypes,OPENCMISS */
const int CMISS_SOLVER_ITERATIVE_CHEBYSHEV = 2; /*<Chebychev iterative solver type. \see OPENCMISS_IterativeLinearSolverTypes,OPENCMISS */
const int CMISS_SOLVER_ITERATIVE_CONJUGATE_GRADIENT = 3; /*<Conjugate gradient iterative solver type. \see OPENCMISS_IterativeLinearSolverTypes,OPENCMISS */
const int CMISS_SOLVER_ITERATIVE_BICONJUGATE_GRADIENT = 4; /*<Bi-conjugate gradient iterative solver type. \see OPENCMISS_IterativeLinearSolverTypes,OPENCMISS */
const int CMISS_SOLVER_ITERATIVE_GMRES = 5; /*<Generalised minimum residual iterative solver type. \see OPENCMISS_IterativeLinearSolverTypes,OPENCMISS */
const int CMISS_SOLVER_ITERATIVE_BiCGSTAB = 6; /*<Stabalised bi-conjugate gradient iterative solver type. \see OPENCMISS_IterativeLinearSolverTypes,OPENCMISS */
const int CMISS_SOLVER_ITERATIVE_CONJGRAD_SQUARED = 7; /*<Conjugate gradient squared iterative solver type. \see OPENCMISS_IterativeLinearSolverTypes,OPENCMISS */
const int CMISS_SOLVER_ITERATIVE_NO_PRECONDITIONER = 0; /*<No preconditioner type. \see OPENCMISS_IterativePreconditionerTypes,OPENCMISS */
const int CMISS_SOLVER_ITERATIVE_JACOBI_PRECONDITIONER = 1; /*<Jacobi preconditioner type. \see OPENCMISS_IterativePreconditionerTypes,OPENCMISS */
const int CMISS_SOLVER_ITERATIVE_BLOCK_JACOBI_PRECONDITIONER = 2; /*<Iterative block Jacobi preconditioner type. \see OPENCMISS_IterativePreconditionerTypes,OPENCMISS */
const int CMISS_SOLVER_ITERATIVE_SOR_PRECONDITIONER = 3; /*<Successive over relaxation preconditioner type. \see OPENCMISS_IterativePreconditionerTypes,OPENCMISS */
const int CMISS_SOLVER_ITERATIVE_INCOMPLETE_CHOLESKY_PRECONDITIONER = 4; /*<Incomplete Cholesky preconditioner type. \see OPENCMISS_IterativePreconditionerTypes,OPENCMISS */
const int CMISS_SOLVER_ITERATIVE_INCOMPLETE_LU_PRECONDITIONER = 5; /*<Incomplete LU preconditioner type. \see OPENCMISS_IterativePreconditionerTypes,OPENCMISS */
const int CMISS_SOLVER_ITERATIVE_ADDITIVE_SCHWARZ_PRECONDITIONER = 6; /*<Additive Schwrz preconditioner type. \see OPENCMISS_IterativePreconditionerTypes,OPENCMISS */
const int CMISS_SOLVER_NONLINEAR_NEWTON = 1; /*<Newton nonlinear solver type. \see OPENCMISS_NonlinearSolverTypes,OPENCMISS */
const int CMISS_SOLVER_NONLINEAR_BFGS_INVERSE = 2; /*<BFGS inverse nonlinear solver type. \see OPENCMISS_NonlinearSolverTypes,OPENCMISS */
const int CMISS_SOLVER_NONLINEAR_SQP = 3; /*<Sequential Quadratic Program nonlinear solver type. \see OPENCMISS_NonlinearSolverTypes,OPENCMISS */
const int CMISS_SOLVER_NONLINEAR_QUASI_NEWTON = 4; /*<Quasi-Newton nonlinear solver type. \see OPENCMISS_NonlinearSolverTypes,OPENCMISS */
const int CMISS_SOLVER_QUASI_NEWTON_LINESEARCH = 1; /*<Quasi-Newton line search nonlinear solver type \see OPENCMISS_QuasiNewtonSolverTypes,OPENCMISS */
const int CMISS_SOLVER_QUASI_NEWTON_TRUSTREGION = 2; /*<Quasi-Newton trust region nonlinear solver type \see OPENCMISS_QuasiNewtonSolverTypes,OPENCMISS */
const int CMISS_SOLVER_QUASI_NEWTON_LBFGS = 1; /*<LBFGS Quasi-Newton type \see OPENCMISS_QuasiNewtonTypes,OPENCMISS */
const int CMISS_SOLVER_QUASI_NEWTON_GOODBROYDEN = 2; /*<"Good" Broyden Quasi-Newton type \see OPENCMISS_QuasiNewtonTypes,OPENCMISS */
const int CMISS_SOLVER_QUASI_NEWTON_BADBROYDEN = 3; /*<"Bad" Broyden Quasi-Newton type \see OPENCMISS_QuasiNewtonTypes,OPENCMISS */
const int CMISS_SOLVER_QUASI_NEWTON_LINESEARCH_BASIC = 1; /*<Simple damping line search. \see OPENCMISS_QuasiNewtonLineSearchTypes,OPENCMISS */
const int CMISS_SOLVER_QUASI_NEWTON_LINESEARCH_L2 = 2; /*<Secant line search over the L2 norm of the function \see OPENCMISS_QuasiNewtonLineSearchTypes,OPENCMISS */
const int CMISS_SOLVER_QUASI_NEWTON_LINESEARCH_CP = 3; /*<Critical point secant line search \see OPENCMISS_QuasiNewtonLineSearchTypes,OPENCMISS */
const int CMISS_SOLVER_QUASI_NEWTON_RESTART_NONE = 1; /*<Never restart \see OPENCMISS_QuasiNewtonRestartTypes,OPENCMISS */
const int CMISS_SOLVER_QUASI_NEWTON_RESTART_POWELL = 2; /*<Restart based upon descent criteria \see OPENCMISS_QuasiNewtonRestartTypes,OPENCMISS */
const int CMISS_SOLVER_QUASI_NEWTON_RESTART_PERIODIC = 3; /*<Restart after a fixed number of iterations \see OPENCMISS_QuasiNewtonRestartTypes,OPENCMISS */
const int CMISS_SOLVER_QUASI_NEWTON_SCALE_NONE = 1; /*<Don't scale the problem \see OPENCMISS_QuasiNewtonScaleTypes,OPENCMISS */
const int CMISS_SOLVER_QUASI_NEWTON_SCALE_SHANNO = 2; /*<Use Shanno scaling \see OPENCMISS_QuasiNewtonScaleTypes,OPENCMISS */
const int CMISS_SOLVER_QUASI_NEWTON_SCALE_LINESEARCH = 3; /*<Scale based upon line search lambda \see OPENCMISS_QuasiNewtonScaleTypes,OPENCMISS */
const int CMISS_SOLVER_QUASI_NEWTON_SCALE_JACOBIAN = 4; /*<Scale by inverting a previously computed Jacobian \see OPENCMISS_QuasiNewtonScaleTypes,OPENCMISS */
const int CMISS_SOLVER_NEWTON_LINESEARCH = 1; /*<Newton line search nonlinear solver type. \see OPENCMISS_NewtonSolverTypes,OPENCMISS */
const int CMISS_SOLVER_NEWTON_TRUSTREGION = 2; /*<Newton trust region nonlinear solver type. \see OPENCMISS_NewtonSolverTypes,OPENCMISS */
const int CMISS_SOLVER_NEWTON_LINESEARCH_LINEAR = 2; /*<Linear line search for Newton line search nonlinear solves \see OPENCMISS_NewtonLineSearchTypes,OPENCMISS */
const int CMISS_SOLVER_NEWTON_LINESEARCH_QUADRATIC = 3; /*<Quadratic search for Newton line search nonlinear solves \see OPENCMISS_NewtonLineSearchTypes,OPENCMISS */
const int CMISS_SOLVER_NEWTON_LINESEARCH_CUBIC = 4; /*<Cubic search for Newton line search nonlinear solves \see OPENCMISS_NewtonLineSearchTypes,OPENCMISS */
const int CMISS_SOLVER_NEWTON_JACOBIAN_NOT_CALCULATED = 1; /*<The Jacobian values will not be calculated for the nonlinear equations set. \see OPENCMISS_JacobianCalculationTypes,OPENCMISS */
const int CMISS_SOLVER_NEWTON_JACOBIAN_EQUATIONS_CALCULATED = 2; /*<The Jacobian values will be calculated analytically for the nonlinear equations set. \see OPENCMISS_JacobianCalculationTypes,OPENCMISS */
const int CMISS_SOLVER_NEWTON_JACOBIAN_FD_CALCULATED = 3; /*<The Jacobian values will be calcualted using finite differences for the nonlinear equations set. \see OPENCMISS_JacobianCalculationTypes,OPENCMISS */
const int CMISS_SOLVER_NEWTON_CONVERGENCE_PETSC_DEFAULT = 1; /*<Newton solver Petsc default convergence test type. \see OPENCMISS_NewtonConvergenceTypes,OPENCMISS */
const int CMISS_SOLVER_NEWTON_CONVERGENCE_ENERGY_NORM = 2; /*<Newton solver energy norm convergence test type. \see OPENCMISS_NewtonConvergenceTypes,OPENCMISS */
const int CMISS_SOLVER_NEWTON_CONVERGENCE_DIFFERENTIATED_RATIO = 3; /*<Newton solver Sum of differentiated ratios of unconstrained to constrained residuals convergence test type. \see OPENCMISS_NewtonConvergenceTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_FIRST_ORDER = 1; /*<Dynamic solver has first order terms. \see OPENCMISS_DynamicOrderTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_SECOND_ORDER = 2; /*<Dynamic solver has second order terms. \see OPENCMISS_DynamicOrderTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_LINEAR = 1; /*<Dynamic solver has linear terms. \see OPENCMISS_DynamicLinearityTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_NONLINEAR = 2; /*<Dynamic solver has nonlinear terms. \see OPENCMISS_DynamicLinearityTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_FIRST_DEGREE = 1; /*<Dynamic solver uses a first degree polynomial for time interpolation. \see OPENCMISS_DynamicDegreeTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_SECOND_DEGREE = 2; /*<Dynamic solver uses a second degree polynomial for time interpolation. \see OPENCMISS_DynamicDegreeTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_THIRD_DEGREE = 3; /*<Dynamic solver uses a third degree polynomial for time interpolation. \see OPENCMISS_DynamicDegreeTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_EULER_SCHEME = 1; /*<Euler (explicit) dynamic solver. \see OPENCMISS_DynamicSchemeTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_BACKWARD_EULER_SCHEME = 2; /*<Backward Euler (implicit) dynamic solver. \see OPENCMISS_DynamicSchemeTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_CRANK_NICOLSON_SCHEME = 3; /*<Crank-Nicolson dynamic solver. \see OPENCMISS_DynamicSchemeTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_GALERKIN_SCHEME = 4; /*<Galerkin dynamic solver. \see OPENCMISS_DynamicSchemeTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_ZLAMAL_SCHEME = 5; /*<Zlamal dynamic solver. \see OPENCMISS_DynamicSchemeTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_SECOND_DEGREE_GEAR_SCHEME = 6; /*<2nd degree Gear dynamic solver. \see OPENCMISS_DynamicSchemeTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_SECOND_DEGREE_LINIGER1_SCHEME = 7; /*<1st 2nd degree Liniger dynamic solver. \see OPENCMISS_DynamicSchemeTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_SECOND_DEGREE_LINIGER2_SCHEME = 8; /*<2nd 2nd degree Liniger dynamic solver. \see OPENCMISS_DynamicSchemeTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_NEWMARK1_SCHEME = 9; /*<1st Newmark dynamic solver. \see OPENCMISS_DynamicSchemeTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_NEWMARK2_SCHEME = 10; /*<2nd Newmark dynamic solver. \see OPENCMISS_DynamicSchemeTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_NEWMARK3_SCHEME = 11; /*<3rd Newmark dynamic solver. \see OPENCMISS_DynamicSchemeTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_THIRD_DEGREE_GEAR_SCHEME = 12; /*<3rd degree Gear dynamic solver. \see OPENCMISS_DynamicSchemeTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_THIRD_DEGREE_LINIGER1_SCHEME = 13; /*<1st 3rd degree Liniger dynamic solver. \see OPENCMISS_DynamicSchemeTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_THIRD_DEGREE_LINIGER2_SCHEME = 14; /*<2nd 3rd degree Liniger dynamic solver. \see OPENCMISS_DynamicSchemeTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_HOUBOLT_SCHEME = 15; /*<Houbolt dynamic solver. \see OPENCMISS_DynamicSchemeTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_WILSON_SCHEME = 16; /*<Wilson dynamic solver. \see OPENCMISS_DynamicSchemeTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_BOSSAK_NEWMARK1_SCHEME = 17; /*<1st Bossak-Newmark dynamic solver. \see OPENCMISS_DynamicSchemeTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_BOSSAK_NEWMARK2_SCHEME = 18; /*<2nd Bossak-Newmark dynamic solver. \see OPENCMISS_DynamicSchemeTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_HILBERT_HUGHES_TAYLOR1_SCHEME = 19; /*<1st Hilbert-Hughes-Taylor dynamic solver. \see OPENCMISS_DynamicSchemeTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_HILBERT_HUGHES_TAYLOR2_SCHEME = 20; /*<1st Hilbert-Hughes-Taylor dynamic solver. \see OPENCMISS_DynamicSchemeTypes,OPENCMISS */
const int CMISS_SOLVER_DYNAMIC_USER_DEFINED_SCHEME = 21; /*<User specified degree and theta dynamic solver. \see OPENCMISS_DynamicSchemeTypes,OPENCMISS */
const int CMISS_SOLVER_DAE_DIFFERENTIAL_ONLY = 0; /*<Differential equations only. \see OPENCMISS_DAETypes,OPENCMISS */
const int CMISS_SOLVER_DAE_INDEX_1 = 1; /*<Index 1 differential-algebraic equation. \see OPENCMISS_DAETypes,OPENCMISS */
const int CMISS_SOLVER_DAE_INDEX_2 = 2; /*<Index 2 differential-algebraic equation. \see OPENCMISS_DAETypes,OPENCMISS */
const int CMISS_SOLVER_DAE_INDEX_3 = 3; /*<Index 3 differential-algebraic equation. \see OPENCMISS_DAETypes,OPENCMISS */
const int CMISS_SOLVER_DAE_EULER = 1; /*<Euler differential-algebraic equation solver. \see */
const int CMISS_SOLVER_DAE_CRANK_NICOLSON = 2; /*<Crank-Nicolson differential-algebraic equation solver. \see */
const int CMISS_SOLVER_DAE_RUNGE_KUTTA = 3; /*<Runge-Kutta differential-algebraic equation solver. \see */
const int CMISS_SOLVER_DAE_ADAMS_MOULTON = 4; /*<Adams-Moulton differential-algebraic equation solver. \see */
const int CMISS_SOLVER_DAE_BDF = 5; /*<General BDF differential-algebraic equation solver. \see */
const int CMISS_SOLVER_DAE_RUSH_LARSON = 6; /*<Rush-Larson differential-algebraic equation solver. \see */
const int CMISS_SOLVER_DAE_EXTERNAL = 7; /*<External (e.g., CellML generated) differential-algebraic equation solver. \see */
const int CMISS_SOLVER_DAE_EULER_FORWARD = 1; /*<Forward Euler differential equation solver. \see OPENCMISS_EulerDAESolverTypes,OPENCMISS */
const int CMISS_SOLVER_DAE_EULER_BACKWARD = 2; /*<Backward Euler differential equation solver. \see OPENCMISS_EulerDAESolverTypes,OPENCMISS */
const int CMISS_SOLVER_DAE_EULER_IMPROVED = 3; /*<Improved Euler differential equation solver. \see OPENCMISS_EulerDAESolverTypes,OPENCMISS */
const int CMISS_SOLVER_SOLUTION_INITIALISE_ZERO = 0; /*<Initialise the solution by zeroing it before a solve. \see OPENCMISS_SolutionInitialiseTypes,OPENCMISS */
const int CMISS_SOLVER_SOLUTION_INITIALISE_CURRENT_FIELD = 1; /*<Initialise the solution by copying in the current dependent field values. \see OPENCMISS_SolutionInitialiseTypes,OPENCMISS */
const int CMISS_SOLVER_SOLUTION_INITIALISE_NO_CHANGE = 2; /*<Do not change the solution before a solve. \see OPENCMISS_SolutionInitialiseTypes,OPENCMISS */
const int CMISS_SOLVER_NO_OUTPUT = 0; /*<No output from the solver routines. \see OPENCMISS_SolverOutputTypes,OPENCMISS */
const int CMISS_SOLVER_PROGRESS_OUTPUT = 1; /*<Progress output from solver routines. \see OPENCMISS_SolverOutputTypes,OPENCMISS */
const int CMISS_SOLVER_TIMING_OUTPUT = 2; /*<Timing output from the solver routines plus below. \see OPENCMISS_SolverOutputTypes,OPENCMISS */
const int CMISS_SOLVER_SOLVER_OUTPUT = 3; /*<Solver specific output from the solver routines plus below. \see OPENCMISS_SolverOutputTypes,OPENCMISS */
const int CMISS_SOLVER_MATRIX_OUTPUT = 4; /*<Solver matrices output from the solver routines plus below. \see OPENCMISS_SolverOutputTypes,OPENCMISS */
const int CMISS_SOLVER_SPARSE_MATRICES = 1; /*<Use sparse solver matrices. \see OPENCMISS_SolverEquationsSparsityTypes,OPENCMISS */
const int CMISS_SOLVER_FULL_MATRICES = 2; /*<Use fully populated solver matrices. \see OPENCMISS_SolverEquationsSparsityTypes,OPENCMISS */
struct CMISSFieldMLIOType_;
/*>Provides input and output of fields through the FieldML API */
typedef struct CMISSFieldMLIOType_ *CMISSFieldMLIOType;


/*>Finalises CMISS. */
CMISSError CMISSFinalise();

%apply (int *DummyOutputScalar){(int *worldCoordinateSystemUserNumber)};
%apply (int *DummyOutputScalar){(int *worldRegionUserNumber)};
/*>Initialises CMISS returning a user number to the world coordinate system and region. */
CMISSError CMISSInitialiseNum(int *worldCoordinateSystemUserNumber /*<On return, the world coordinate system user number. */,
    int *worldRegionUserNumber /*<On return, the world region user number. */);
%clear (int *worldCoordinateSystemUserNumber);
%clear (int *worldRegionUserNumber);

/*>Initialises CMISS returning a pointer to the world coordinate system and region. */
CMISSError CMISSInitialise(CMISSCoordinateSystemType worldCoordinateSystem /*<On return, the world coordinate system. */,
    CMISSRegionType worldRegion /*<On return, the world region. */);

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSBasisType *CMISSBasis};
/*>Finalises a CMISSBasisType object. */
CMISSError CMISSBasis_Finalise(CMISSBasisType *CMISSBasis /*<The CMISSBasisType object to finalise. */);
%clear CMISSBasisType *CMISSBasis;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSBasisType *CMISSBasis};
/*>Initialises a CMISSBasisType object. */
CMISSError CMISSBasis_Initialise(CMISSBasisType *CMISSBasis /*<The CMISSBasisType object to initialise. */);
%clear CMISSBasisType *CMISSBasis;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSBoundaryConditionsType *CMISSBoundaryConditions};
/*>Finalises a CMISSBoundaryConditionsType object. */
CMISSError CMISSBoundaryConditions_Finalise(CMISSBoundaryConditionsType *CMISSBoundaryConditions /*<The CMISSBoundaryConditionsType object to finalise. */);
%clear CMISSBoundaryConditionsType *CMISSBoundaryConditions;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSBoundaryConditionsType *CMISSBoundaryConditions};
/*>Initialises a CMISSBoundaryConditionsType object. */
CMISSError CMISSBoundaryConditions_Initialise(CMISSBoundaryConditionsType *CMISSBoundaryConditions /*<The CMISSBoundaryConditionsType object to initialise. */);
%clear CMISSBoundaryConditionsType *CMISSBoundaryConditions;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSCellMLType *CMISSCellML};
/*>Finalises a CMISSCellMLType object. */
CMISSError CMISSCellML_Finalise(CMISSCellMLType *CMISSCellML /*<The CMISSCellMLType object to finalise. */);
%clear CMISSCellMLType *CMISSCellML;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSCellMLType *CMISSCellML};
/*>Initialises a CMISSCellMLType object. */
CMISSError CMISSCellML_Initialise(CMISSCellMLType *CMISSCellML /*<The CMISSCellMLType object to initialise. */);
%clear CMISSCellMLType *CMISSCellML;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSCellMLEquationsType *CMISSCellMLEquations};
/*>Finalises a CMISSCellMLEquationsType object. */
CMISSError CMISSCellMLEquations_Finalise(CMISSCellMLEquationsType *CMISSCellMLEquations /*<The CMISSCellMLEquationsType object to finalise. */);
%clear CMISSCellMLEquationsType *CMISSCellMLEquations;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSComputationalWorkGroupType *CMISSComputationalWorkGroup};
/*>Initialises a CMISSComputationalWorkGroupType object. */
CMISSError CMISSComputationalWorkGroup_Initialise(CMISSComputationalWorkGroupType *CMISSComputationalWorkGroup /*<The CMISSComputationalWorkGroupType object to initialise. */);
%clear CMISSComputationalWorkGroupType *CMISSComputationalWorkGroup;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSCellMLEquationsType *CMISSCellMLEquations};
/*>Initialises a CMISSCellMLEquationsType object. */
CMISSError CMISSCellMLEquations_Initialise(CMISSCellMLEquationsType *CMISSCellMLEquations /*<The CMISSCellMLEquationsType object to initialise. */);
%clear CMISSCellMLEquationsType *CMISSCellMLEquations;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSControlLoopType *CMISSControlLoop};
/*>Finalises a CMISSControlLoopType object. */
CMISSError CMISSControlLoop_Finalise(CMISSControlLoopType *CMISSControlLoop /*<The CMISSControlLoopType object to finalise. */);
%clear CMISSControlLoopType *CMISSControlLoop;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSControlLoopType *CMISSControlLoop};
/*>Initialises a CMISSControlLoopType object. */
CMISSError CMISSControlLoop_Initialise(CMISSControlLoopType *CMISSControlLoop /*<The CMISSControlLoopType object to initialise. */);
%clear CMISSControlLoopType *CMISSControlLoop;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSCoordinateSystemType *CMISSCoordinateSystem};
/*>Finalises a CMISSCoordinateSystemType object. */
CMISSError CMISSCoordinateSystem_Finalise(CMISSCoordinateSystemType *CMISSCoordinateSystem /*<The CMISSCoordinateSystemType object to finalise. */);
%clear CMISSCoordinateSystemType *CMISSCoordinateSystem;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSCoordinateSystemType *CMISSCoordinateSystem};
/*>Initialises a CMISSCoordinateSystemType object. */
CMISSError CMISSCoordinateSystem_Initialise(CMISSCoordinateSystemType *CMISSCoordinateSystem /*<The CMISSCoordinateSystemType object to initialise. */);
%clear CMISSCoordinateSystemType *CMISSCoordinateSystem;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSDataPointsType *CMISSDataPoints};
/*>Finalises a CMISSDataPointsType object. */
CMISSError CMISSDataPoints_Finalise(CMISSDataPointsType *CMISSDataPoints /*<The CMISSDataPointsType object to finalise. */);
%clear CMISSDataPointsType *CMISSDataPoints;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSDataPointsType *CMISSDataPoints};
/*>Initialises a CMISSDataPointsType object. */
CMISSError CMISSDataPoints_Initialise(CMISSDataPointsType *CMISSDataPoints /*<The CMISSDataPointsType object to initialise. */);
%clear CMISSDataPointsType *CMISSDataPoints;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSDataProjectionType *CMISSDataProjection};
/*>Finalises a CMISSDataProjectionType object. */
CMISSError CMISSDataProjection_Finalise(CMISSDataProjectionType *CMISSDataProjection /*<The CMISSDataProjectionType object to finalise. */);
%clear CMISSDataProjectionType *CMISSDataProjection;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSDataProjectionType *CMISSDataProjection};
/*>Initialises a CMISSDataProjectionType object. */
CMISSError CMISSDataProjection_Initialise(CMISSDataProjectionType *CMISSDataProjection /*<The CMISSDataProjectionType object to initialise. */);
%clear CMISSDataProjectionType *CMISSDataProjection;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSDecompositionType *CMISSDecomposition};
/*>Finalises a CMISSDecompositionType object. */
CMISSError CMISSDecomposition_Finalise(CMISSDecompositionType *CMISSDecomposition /*<The CMISSDecompositionType object to finalise. */);
%clear CMISSDecompositionType *CMISSDecomposition;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSDecompositionType *CMISSDecomposition};
/*>Initialises a CMISSDecompositionType object. */
CMISSError CMISSDecomposition_Initialise(CMISSDecompositionType *CMISSDecomposition /*<The CMISSDecompositionType object to initialise. */);
%clear CMISSDecompositionType *CMISSDecomposition;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSEquationsType *CMISSEquations};
/*>Finalises a CMISSEquationsType object. */
CMISSError CMISSEquations_Finalise(CMISSEquationsType *CMISSEquations /*<The CMISSEquationsType object to finalise. */);
%clear CMISSEquationsType *CMISSEquations;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSEquationsType *CMISSEquations};
/*>Initialises a CMISSEquationsType object. */
CMISSError CMISSEquations_Initialise(CMISSEquationsType *CMISSEquations /*<The CMISSEquationsType object to initialise. */);
%clear CMISSEquationsType *CMISSEquations;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSEquationsSetType *CMISSEquationsSet};
/*>Finalises a CMISSEquationsSetType object. */
CMISSError CMISSEquationsSet_Finalise(CMISSEquationsSetType *CMISSEquationsSet /*<The CMISSEquationsSetType object to finalise. */);
%clear CMISSEquationsSetType *CMISSEquationsSet;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSEquationsSetType *CMISSEquationsSet};
/*>Initialises a CMISSEquationsSetType object. */
CMISSError CMISSEquationsSet_Initialise(CMISSEquationsSetType *CMISSEquationsSet /*<The CMISSEquationsSetType object to initialise. */);
%clear CMISSEquationsSetType *CMISSEquationsSet;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSFieldType *CMISSField};
/*>Finalises a CMISSFieldType object. */
CMISSError CMISSField_Finalise(CMISSFieldType *CMISSField /*<The CMISSFieldType object to finalise. */);
%clear CMISSFieldType *CMISSField;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSFieldType *CMISSField};
/*>Initialises a CMISSFieldType object. */
CMISSError CMISSField_Initialise(CMISSFieldType *CMISSField /*<The CMISSFieldType object to initialise. */);
%clear CMISSFieldType *CMISSField;

/*>Creates a CMISSFieldsType object for an inteface by an object reference. */
CMISSError CMISSFields_CreateInterface(const CMISSInterfaceType interface /*<The interface to get the fields from */,
    CMISSFieldsType fields /*<On return, the fields attached to the specified interface. Must not be associated on entry. */);

/*>Creates a CMISSFieldsType object for a region by an object reference. */
CMISSError CMISSFields_CreateRegion(const CMISSRegionType region /*<The region to get the fields from */,
    CMISSFieldsType fields /*<On return, the fields attached to the specified region. Must not be associated on entry. */);

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSFieldsType *CMISSFields};
/*>Finalises a CMISSFieldsType object. */
CMISSError CMISSFields_Finalise(CMISSFieldsType *CMISSFields /*<The CMISSFieldsType object to finalise. */);
%clear CMISSFieldsType *CMISSFields;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSFieldsType *CMISSFields};
/*>Initialises a CMISSFieldsType object. */
CMISSError CMISSFields_Initialise(CMISSFieldsType *CMISSFields /*<The CMISSFieldsType object to initialise. */);
%clear CMISSFieldsType *CMISSFields;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSGeneratedMeshType *CMISSGeneratedMesh};
/*>Finalises a CMISSGeneratedMeshType object. */
CMISSError CMISSGeneratedMesh_Finalise(CMISSGeneratedMeshType *CMISSGeneratedMesh /*<The CMISSGeneratedMeshType object to finalise. */);
%clear CMISSGeneratedMeshType *CMISSGeneratedMesh;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSGeneratedMeshType *CMISSGeneratedMesh};
/*>Initialises a CMISSGeneratedMeshType object. */
CMISSError CMISSGeneratedMesh_Initialise(CMISSGeneratedMeshType *CMISSGeneratedMesh /*<The CMISSGeneratedMeshType object to initialise. */);
%clear CMISSGeneratedMeshType *CMISSGeneratedMesh;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSInterfaceType *CMISSInterface};
/*>Finalises a CMISSInterfaceType object. */
CMISSError CMISSInterface_Finalise(CMISSInterfaceType *CMISSInterface /*<The CMISSInterfaceType object to finalise. */);
%clear CMISSInterfaceType *CMISSInterface;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSInterfaceType *CMISSInterface};
/*>Initialises a CMISSInterfaceType object. */
CMISSError CMISSInterface_Initialise(CMISSInterfaceType *CMISSInterface /*<The CMISSInterfaceType object to initialise. */);
%clear CMISSInterfaceType *CMISSInterface;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSInterfaceConditionType *CMISSInterfaceCondition};
/*>Finalises a CMISSInterfaceConditionType object. */
CMISSError CMISSInterfaceCondition_Finalise(CMISSInterfaceConditionType *CMISSInterfaceCondition /*<The CMISSInterfaceConditionType object to finalise. */);
%clear CMISSInterfaceConditionType *CMISSInterfaceCondition;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSInterfaceConditionType *CMISSInterfaceCondition};
/*>Initialises a CMISSInterfaceConditionType object. */
CMISSError CMISSInterfaceCondition_Initialise(CMISSInterfaceConditionType *CMISSInterfaceCondition /*<The CMISSInterfaceConditionType object to initialise. */);
%clear CMISSInterfaceConditionType *CMISSInterfaceCondition;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSInterfaceEquationsType *CMISSInterfaceEquations};
/*>Finalises a CMISSInterfaceEquationsType object. */
CMISSError CMISSInterfaceEquations_Finalise(CMISSInterfaceEquationsType *CMISSInterfaceEquations /*<The CMISSInterfaceEquationsType object to finalise. */);
%clear CMISSInterfaceEquationsType *CMISSInterfaceEquations;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSInterfaceEquationsType *CMISSInterfaceEquations};
/*>Initialises a CMISSInterfaceEquationsType object. */
CMISSError CMISSInterfaceEquations_Initialise(CMISSInterfaceEquationsType *CMISSInterfaceEquations /*<The CMISSInterfaceEquationsType object to initialise. */);
%clear CMISSInterfaceEquationsType *CMISSInterfaceEquations;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSInterfacePointsConnectivityType *CMISSInterfacePointsConnectivity};
/*>Finalise a CMISSInterfaceMeshConnectivityType object. */
CMISSError CMISSInterfacePointsConnectivity_Finalise(CMISSInterfacePointsConnectivityType *CMISSInterfacePointsConnectivity /*<The CMISSInterfacePointsConnectivityType object to initialise. */);
%clear CMISSInterfacePointsConnectivityType *CMISSInterfacePointsConnectivity;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSInterfacePointsConnectivityType *CMISSInterfacePointsConnectivity};
/*>Initialises a CMISSInterfaceMeshConnectivityType object. */
CMISSError CMISSInterfacePointsConnectivity_Initialise(CMISSInterfacePointsConnectivityType *CMISSInterfacePointsConnectivity /*<The CMISSInterfacePointsConnectivityType object to initialise. */);
%clear CMISSInterfacePointsConnectivityType *CMISSInterfacePointsConnectivity;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSInterfaceMeshConnectivityType *CMISSInterfaceMeshConnectivity};
/*>Finalises a CMISSInterfaceMeshConnectivityType object. */
CMISSError CMISSInterfaceMeshConnectivity_Finalise(CMISSInterfaceMeshConnectivityType *CMISSInterfaceMeshConnectivity /*<The CMISSInterfaceMeshConnectivityType object to finalise. */);
%clear CMISSInterfaceMeshConnectivityType *CMISSInterfaceMeshConnectivity;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSInterfaceMeshConnectivityType *CMISSInterfaceMeshConnectivity};
/*>Initialises a CMISSInterfaceMeshConnectivityType object. */
CMISSError CMISSInterfaceMeshConnectivity_Initialise(CMISSInterfaceMeshConnectivityType *CMISSInterfaceMeshConnectivity /*<The CMISSInterfaceMeshConnectivityType object to initialise. */);
%clear CMISSInterfaceMeshConnectivityType *CMISSInterfaceMeshConnectivity;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSHistoryType *CMISSHistory};
/*>Finalises a CMISSHistoryType object. */
CMISSError CMISSHistory_Finalise(CMISSHistoryType *CMISSHistory /*<The CMISSHistoryType object to finalise. */);
%clear CMISSHistoryType *CMISSHistory;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSHistoryType *CMISSHistory};
/*>Initialises a CMISSHistoryType object. */
CMISSError CMISSHistory_Initialise(CMISSHistoryType *CMISSHistory /*<The CMISSHistoryType object to initialise. */);
%clear CMISSHistoryType *CMISSHistory;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSDistributedMatrixType *CMISSDistributedMatrix};
/*>Initialises a CMISSDistributedMatrixType object. */
CMISSError CMISSDistributedMatrix_Initialise(CMISSDistributedMatrixType *CMISSDistributedMatrix /*<The CMISSDistributedMatrixType object to initialise. */);
%clear CMISSDistributedMatrixType *CMISSDistributedMatrix;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSDistributedVectorType *CMISSDistributedVector};
/*>Initialises a CMISSDistributedVectorType object. */
CMISSError CMISSDistributedVector_Initialise(CMISSDistributedVectorType *CMISSDistributedVector /*<The CMISSDistributedVectorType object to initialise. */);
%clear CMISSDistributedVectorType *CMISSDistributedVector;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSMeshType *CMISSMesh};
/*>Finalises a CMISSMeshType object. */
CMISSError CMISSMesh_Finalise(CMISSMeshType *CMISSMesh /*<The CMISSMeshType object to finalise. */);
%clear CMISSMeshType *CMISSMesh;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSMeshType *CMISSMesh};
/*>Initialises a CMISSMeshType object. */
CMISSError CMISSMesh_Initialise(CMISSMeshType *CMISSMesh /*<The CMISSMeshType object to initialise. */);
%clear CMISSMeshType *CMISSMesh;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSMeshElementsType *CMISSMeshElements};
/*>Finalises a CMISSMeshElementsType object. */
CMISSError CMISSMeshElements_Finalise(CMISSMeshElementsType *CMISSMeshElements /*<The CMISSMeshElementsType object to finalise. */);
%clear CMISSMeshElementsType *CMISSMeshElements;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSMeshElementsType *CMISSMeshElements};
/*>Initialises a CMISSMeshElementsType object. */
CMISSError CMISSMeshElements_Initialise(CMISSMeshElementsType *CMISSMeshElements /*<The CMISSMeshElementsType object to initialise. */);
%clear CMISSMeshElementsType *CMISSMeshElements;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSMeshNodesType *CMISSMeshNodes};
/*>Finalises a CMISSMeshNodesType object. */
CMISSError CMISSMeshNodes_Finalise(CMISSMeshNodesType *CMISSMeshNodes /*<The CMISSMeshNodesType object to finalise. */);
%clear CMISSMeshNodesType *CMISSMeshNodes;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSMeshNodesType *CMISSMeshNodes};
/*>Initialises a CMISSMeshNodesType object. */
CMISSError CMISSMeshNodes_Initialise(CMISSMeshNodesType *CMISSMeshNodes /*<The CMISSMeshNodesType object to initialise. */);
%clear CMISSMeshNodesType *CMISSMeshNodes;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSNodesType *CMISSNodes};
/*>Finalises a CMISSNodesType object. */
CMISSError CMISSNodes_Finalise(CMISSNodesType *CMISSNodes /*<The CMISSNodesType object to finalise. */);
%clear CMISSNodesType *CMISSNodes;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSNodesType *CMISSNodes};
/*>Initialises a CMISSNodesType object. */
CMISSError CMISSNodes_Initialise(CMISSNodesType *CMISSNodes /*<The CMISSNodesType object to initialise. */);
%clear CMISSNodesType *CMISSNodes;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSProblemType *CMISSProblem};
/*>Finalises a CMISSProblemType object. */
CMISSError CMISSProblem_Finalise(CMISSProblemType *CMISSProblem /*<The CMISSProblemType object to finalise. */);
%clear CMISSProblemType *CMISSProblem;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSProblemType *CMISSProblem};
/*>Initialises a CMISSProblemType object. */
CMISSError CMISSProblem_Initialise(CMISSProblemType *CMISSProblem /*<The CMISSProblemType object to initialise. */);
%clear CMISSProblemType *CMISSProblem;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSQuadratureType *CMISSQuadrature};
/*>Finalises a CMISSQuadratureType object. */
CMISSError CMISSQuadrature_Finalise(CMISSQuadratureType *CMISSQuadrature /*<The CMISSQuadratureType object to finalise. */);
%clear CMISSQuadratureType *CMISSQuadrature;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSQuadratureType *CMISSQuadrature};
/*>Initialises a CMISSQuadratureType object. */
CMISSError CMISSQuadrature_Initialise(CMISSQuadratureType *CMISSQuadrature /*<The CMISSQuadratureType object to initialise. */);
%clear CMISSQuadratureType *CMISSQuadrature;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSRegionType *CMISSRegion};
/*>Finalises a CMISSRegionType object. */
CMISSError CMISSRegion_Finalise(CMISSRegionType *CMISSRegion /*<The CMISSRegionType object to finalise. */);
%clear CMISSRegionType *CMISSRegion;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSRegionType *CMISSRegion};
/*>Initialises a CMISSRegionType object. */
CMISSError CMISSRegion_Initialise(CMISSRegionType *CMISSRegion /*<The CMISSRegionType object to initialise. */);
%clear CMISSRegionType *CMISSRegion;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSSolverType *CMISSSolver};
/*>Finalises a CMISSSolverType object. */
CMISSError CMISSSolver_Finalise(CMISSSolverType *CMISSSolver /*<The CMISSSolverType object to finalise. */);
%clear CMISSSolverType *CMISSSolver;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSSolverType *CMISSSolver};
/*>Initialises a CMISSSolverType object. */
CMISSError CMISSSolver_Initialise(CMISSSolverType *CMISSSolver /*<The CMISSSolverType object to initialise. */);
%clear CMISSSolverType *CMISSSolver;

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSSolverEquationsType *CMISSSolverEquations};
/*>Finalises a CMISSSolverEquationsType object. */
CMISSError CMISSSolverEquations_Finalise(CMISSSolverEquationsType *CMISSSolverEquations /*<The CMISSSolverEquationsType object to finalise. */);
%clear CMISSSolverEquationsType *CMISSSolverEquations;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSSolverEquationsType *CMISSSolverEquations};
/*>Initialises a CMISSSolverEquationsType object. */
CMISSError CMISSSolverEquations_Initialise(CMISSSolverEquationsType *CMISSSolverEquations /*<The CMISSSolverEquationsType object to initialise. */);
%clear CMISSSolverEquationsType *CMISSSolverEquations;

%apply (const int Size, const char *DummyInputString){(const int fileNameSize, const char *fileName)};
/*>Output the analytic error analysis for a field specified by a user number compared to the analytic values parameter set. */
CMISSError CMISSAnalyticAnalysisOutputNum(const int regionUserNumber /*<The user number of the region containing the field for analytic error analysis. */,
    const int fieldUserNumber /*<The user number of the field to calculate the analytic error analysis for. */,
    const int fileNameSize /*<Length of fileName string */,
    const char *fileName /*<If not empty, the filename to output the analytic analysis to. If empty, the analysis will be output to the standard output. */);
%clear (const int fileNameSize, const char *fileName);

%apply (const int Size, const char *DummyInputString){(const int fileNameSize, const char *fileName)};
/*>Output the analytic error analysis for a field identified by an object compared to the analytic values parameter set. */
CMISSError CMISSAnalyticAnalysisOutput(const CMISSFieldType field /*<The dependent field to calculate the analytic error analysis for. */,
    const int fileNameSize /*<Length of fileName string */,
    const char *fileName /*<If not empty, the filename to output the analytic analysis to. If empty, the analysis will be output to the standard output. */);
%clear (const int fileNameSize, const char *fileName);

%apply (double *DummyOutputScalar){(double *value)};
/*>Get absolute error value for the node in a field specified by a user number compared to the analytic value. */
CMISSError CMISSAnalyticAnalysisAbsoluteErrorGetNodeNum(const int regionUserNumber /*<The user number of the region containing the field for analytic error analysis. */,
    const int fieldUserNumber /*<The user number of the field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int versionNumber /*<derivative version number */,
    const int derivativeNumber /*<derivative number */,
    const int nodeNumber /*<node number */,
    const int componentNumber /*<component number */,
    double *value /*<On return, the absolute error */);
%clear (double *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Get absolute error value for the node in a field identified by an object compared to the analytic value. */
CMISSError CMISSAnalyticAnalysisAbsoluteErrorGetNode(const CMISSFieldType field /*<The dependent field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int versionNumber /*<derivative version number */,
    const int derivativeNumber /*<derivative number */,
    const int nodeNumber /*<node number */,
    const int componentNumber /*<component number */,
    double *value /*<On return, the absolute error */);
%clear (double *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Get percentage error value for the node in a field specified by a user number compared to the analytic value. */
CMISSError CMISSAnalyticAnalysisPercentageErrorGetNodeNum(const int regionUserNumber /*<The user number of the region containing the field for analytic error analysis. */,
    const int fieldUserNumber /*<The user number of the field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int versionNumber /*<derivative version number */,
    const int derivativeNumber /*<derivative number */,
    const int nodeNumber /*<node number */,
    const int componentNumber /*<component number */,
    double *value /*<On return, the percentage error */);
%clear (double *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Get percentage error value for the node in a field identified by an object compared to the analytic value. */
CMISSError CMISSAnalyticAnalysisPercentageErrorGetNode(const CMISSFieldType field /*<The dependent field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int versionNumber /*<derivative version number */,
    const int derivativeNumber /*<derivative number */,
    const int nodeNumber /*<node number */,
    const int componentNumber /*<component number */,
    double *value /*<On return, the percentage error */);
%clear (double *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Get relative error value for the node in a field specified by a user number compared to the analytic value. */
CMISSError CMISSAnalyticAnalysisRelativeErrorGetNodeNum(const int regionUserNumber /*<The user number of the region containing the field for analytic error analysis. */,
    const int fieldUserNumber /*<The user number of the field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int versionNumber /*<derivative version number */,
    const int derivativeNumber /*<derivative number */,
    const int nodeNumber /*<node number */,
    const int componentNumber /*<component number */,
    double *value /*<On return, the relative error */);
%clear (double *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Get relative error value for the node in a field identified by an object compared to the analytic value. */
CMISSError CMISSAnalyticAnalysisRelativeErrorGetNode(const CMISSFieldType field /*<The dependent field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int versionNumber /*<derivative version number */,
    const int derivativeNumber /*<derivative number */,
    const int nodeNumber /*<node number */,
    const int componentNumber /*<component number */,
    double *value /*<On return, the relative error */);
%clear (double *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Get absolute error value for the element in a field specified by a user number compared to the analytic value. */
CMISSError CMISSAnalyticAnalysisAbsoluteErrorGetElementNum(const int regionUserNumber /*<The user number of the region containing the field for analytic error analysis. */,
    const int fieldUserNumber /*<The user number of the field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int elementNumber /*<element number */,
    const int componentNumber /*<component number */,
    double *value /*<On return, the absolute error */);
%clear (double *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Get absolute error value for the element in a field identified by an object compared to the analytic value. */
CMISSError CMISSAnalyticAnalysisAbsoluteErrorGetElement(const CMISSFieldType field /*<The dependent field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int elementNumber /*<element number */,
    const int componentNumber /*<component number */,
    double *value /*<On return, the absolute error */);
%clear (double *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Get percentage error value for the element in a field specified by a user number compared to the analytic value. */
CMISSError CMISSAnalyticAnalysisPercentageErrorGetElementNum(const int regionUserNumber /*<The user number of the region containing the field for analytic error analysis. */,
    const int fieldUserNumber /*<The user number of the field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int elementNumber /*<element number */,
    const int componentNumber /*<component number */,
    double *value /*<On return, the percentage error */);
%clear (double *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Get percentage error value for the element in a field identified by an object compared to the analytic value. */
CMISSError CMISSAnalyticAnalysisPercentageErrorGetElement(const CMISSFieldType field /*<The dependent field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int elementNumber /*<element number */,
    const int componentNumber /*<component number */,
    double *value /*<On return, the percentage error */);
%clear (double *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Get relative error value for the element in a field specified by a user number compared to the analytic value. */
CMISSError CMISSAnalyticAnalysisRelativeErrorGetElementNum(const int regionUserNumber /*<The user number of the region containing the field for analytic error analysis. */,
    const int fieldUserNumber /*<The user number of the field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int elementNumber /*<element number */,
    const int componentNumber /*<component number */,
    double *value /*<On return, the relative error */);
%clear (double *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Get relative error value for the element in a field identified by an object compared to the analytic value. */
CMISSError CMISSAnalyticAnalysisRelativeErrorGetElement(const CMISSFieldType field /*<The dependent field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int elementNumber /*<element number */,
    const int componentNumber /*<component number */,
    double *value /*<On return, the relative error */);
%clear (double *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Get absolute error value for the constant in a field specified by a user number compared to the analytic value. */
CMISSError CMISSAnalyticAnalysisAbsoluteErrorGetConstantNum(const int regionUserNumber /*<The user number of the region containing the field for analytic error analysis. */,
    const int fieldUserNumber /*<The user number of the field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int componentNumber /*<component number */,
    double *value /*<On return, the absolute error */);
%clear (double *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Get absolute error value for the constant in a field identified by an object compared to the analytic value. */
CMISSError CMISSAnalyticAnalysisAbsoluteErrorGetConstant(const CMISSFieldType field /*<The dependent field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int componentNumber /*<component number */,
    double *value /*<On return, the absolute error */);
%clear (double *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Get percentage error value for the constant in a field specified by a user number compared to the analytic value. */
CMISSError CMISSAnalyticAnalysisPercentageErrorGetConstantNum(const int regionUserNumber /*<The user number of the region containing the field for analytic error analysis. */,
    const int fieldUserNumber /*<The user number of the field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int componentNumber /*<component number */,
    double *value /*<On return, the percentage error */);
%clear (double *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Get percentage error value for the constant in a field identified by an object compared to the analytic value. */
CMISSError CMISSAnalyticAnalysisPercentageErrorGetConstant(const CMISSFieldType field /*<The dependent field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int componentNumber /*<component number */,
    double *value /*<On return, the percentage error */);
%clear (double *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Get relative error value for the constant in a field specified by a user number compared to the analytic value. */
CMISSError CMISSAnalyticAnalysisRelativeErrorGetConstantNum(const int regionUserNumber /*<The user number of the region containing the field for analytic error analysis. */,
    const int fieldUserNumber /*<The user number of the field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int componentNumber /*<component number */,
    double *value /*<On return, the relative error */);
%clear (double *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Get relative error value for the constant in a field identified by an object compared to the analytic value. */
CMISSError CMISSAnalyticAnalysisRelativeErrorGetConstant(const CMISSFieldType field /*<The dependent field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int componentNumber /*<component number */,
    double *value /*<On return, the relative error */);
%clear (double *value);

%apply (double ARGOUT_ARRAY1[ANY]){(double localValue[8])};
%apply (double ARGOUT_ARRAY1[ANY]){(double localGhostValue[8])};
%apply (double ARGOUT_ARRAY1[ANY]){(double globalValue[8])};
/*>Get rms error value for nodes in a field compared to the analytic value. */
CMISSError CMISSAnalyticAnalysisRmsErrorGetNodeNum(const int regionUserNumber /*<The user number of the region containing the field for analytic error analysis. */,
    const int fieldUserNumber /*<The user number of the field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int componentNumber /*<component number */,
    const int errorType /*<error type */,
    double localValue[8] /*<On return, the local error */,
    double localGhostValue[8] /*<On return, the local ghost error */,
    double globalValue[8] /*<On return, the global error */);
%clear (double localValue[8]);
%clear (double localGhostValue[8]);
%clear (double globalValue[8]);

%apply (double ARGOUT_ARRAY1[ANY]){(double localValue[8])};
%apply (double ARGOUT_ARRAY1[ANY]){(double localGhostValue[8])};
%apply (double ARGOUT_ARRAY1[ANY]){(double globalValue[8])};
/*>Get rms error value for nodes in a field identified by an object compared to the analytic value. */
CMISSError CMISSAnalyticAnalysisRmsErrorGetNode(const CMISSFieldType field /*<The dependent field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int componentNumber /*<component number */,
    const int errorType /*<error type */,
    double localValue[8] /*<On return, the local error */,
    double localGhostValue[8] /*<On return, the local ghost error */,
    double globalValue[8] /*<On return, the global error */);
%clear (double localValue[8]);
%clear (double localGhostValue[8]);
%clear (double globalValue[8]);

%apply (double *DummyOutputScalar){(double *localValue)};
%apply (double *DummyOutputScalar){(double *localGhostValue)};
%apply (double *DummyOutputScalar){(double *globalValue)};
/*>Get rms error value for elements in a field compared to the analytic value. */
CMISSError CMISSAnalyticAnalysisRmsErrorGetElementNum(const int regionUserNumber /*<The user number of the region containing the field for analytic error analysis. */,
    const int fieldUserNumber /*<The user number of the field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int componentNumber /*<component number */,
    const int errorType /*<error type */,
    double *localValue /*<On return, the local error */,
    double *localGhostValue /*<On return, the local ghost error */,
    double *globalValue /*<On return, the global error */);
%clear (double *localValue);
%clear (double *localGhostValue);
%clear (double *globalValue);

%apply (double *DummyOutputScalar){(double *localValue)};
%apply (double *DummyOutputScalar){(double *localGhostValue)};
%apply (double *DummyOutputScalar){(double *globalValue)};
/*>Get relative error value for the constant in a field identified by an object compared to the analytic value. */
CMISSError CMISSAnalyticAnalysisRmsErrorGetElement(const CMISSFieldType field /*<The dependent field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int componentNumber /*<component number */,
    const int errorType /*<error type */,
    double *localValue /*<On return, the local error */,
    double *localGhostValue /*<On return, the local ghost error */,
    double *globalValue /*<On return, the global error */);
%clear (double *localValue);
%clear (double *localGhostValue);
%clear (double *globalValue);

%apply (double ARGOUT_ARRAY1[ANY]){(double integralValue[2])};
%apply (double ARGOUT_ARRAY1[ANY]){(double ghostIntegralValue[2])};
/*>Get integral value for the numerical values. */
CMISSError CMISSAnalyticAnalysisIntegralNumericalValueGetNum(const int regionUserNumber /*<The user number of the region containing the field for analytic error analysis. */,
    const int fieldUserNumber /*<The user number of the field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int componentNumber /*<component number */,
    double integralValue[2] /*<On return, the integral value */,
    double ghostIntegralValue[2] /*<On return, ghost integral value */);
%clear (double integralValue[2]);
%clear (double ghostIntegralValue[2]);

%apply (double ARGOUT_ARRAY1[ANY]){(double integralValue[2])};
%apply (double ARGOUT_ARRAY1[ANY]){(double ghostIntegralValue[2])};
/*>Get integral value for the numerical values. */
CMISSError CMISSAnalyticAnalysisIntegralNumericalValueGet(const CMISSFieldType field /*<The dependent field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int componentNumber /*<component number */,
    double integralValue[2] /*<On return, the integral value */,
    double ghostIntegralValue[2] /*<On return, ghost integral value */);
%clear (double integralValue[2]);
%clear (double ghostIntegralValue[2]);

%apply (double ARGOUT_ARRAY1[ANY]){(double integralValue[2])};
%apply (double ARGOUT_ARRAY1[ANY]){(double ghostIntegralValue[2])};
/*>Get integral value for the analytic values. */
CMISSError CMISSAnalyticAnalysisIntegralAnalyticValueGetNum(const int regionUserNumber /*<The user number of the region containing the field for analytic error analysis. */,
    const int fieldUserNumber /*<The user number of the field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int componentNumber /*<component number */,
    double integralValue[2] /*<On return, the integral value */,
    double ghostIntegralValue[2] /*<On return, ghost integral value */);
%clear (double integralValue[2]);
%clear (double ghostIntegralValue[2]);

%apply (double ARGOUT_ARRAY1[ANY]){(double integralValue[2])};
%apply (double ARGOUT_ARRAY1[ANY]){(double ghostIntegralValue[2])};
/*>Get integral value for the analytic values. */
CMISSError CMISSAnalyticAnalysisIntegralAnalyticValueGet(const CMISSFieldType field /*<The dependent field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int componentNumber /*<component number */,
    double integralValue[2] /*<On return, the integral value */,
    double ghostIntegralValue[2] /*<On return, ghost integral value */);
%clear (double integralValue[2]);
%clear (double ghostIntegralValue[2]);

%apply (double ARGOUT_ARRAY1[ANY]){(double integralValue[2])};
%apply (double ARGOUT_ARRAY1[ANY]){(double ghostIntegralValue[2])};
/*>Get integral value for the percentage errors. */
CMISSError CMISSAnalyticAnalysisIntegralPercentageErrorGetNum(const int regionUserNumber /*<The user number of the region containing the field for analytic error analysis. */,
    const int fieldUserNumber /*<The user number of the field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int componentNumber /*<component number */,
    double integralValue[2] /*<On return, the integral value */,
    double ghostIntegralValue[2] /*<On return, ghost integral value */);
%clear (double integralValue[2]);
%clear (double ghostIntegralValue[2]);

%apply (double ARGOUT_ARRAY1[ANY]){(double integralValue[2])};
%apply (double ARGOUT_ARRAY1[ANY]){(double ghostIntegralValue[2])};
/*>Get integral value for the percentage errors. */
CMISSError CMISSAnalyticAnalysisIntegralPercentageErrorGet(const CMISSFieldType field /*<The dependent field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int componentNumber /*<component number */,
    double integralValue[2] /*<On return, the integral value */,
    double ghostIntegralValue[2] /*<On return, ghost integral value */);
%clear (double integralValue[2]);
%clear (double ghostIntegralValue[2]);

%apply (double ARGOUT_ARRAY1[ANY]){(double integralValue[2])};
%apply (double ARGOUT_ARRAY1[ANY]){(double ghostIntegralValue[2])};
/*>Get integral value for the absolute errors. */
CMISSError CMISSAnalyticAnalysisIntegralAbsoluteErrorGetNum(const int regionUserNumber /*<The user number of the region containing the field for analytic error analysis. */,
    const int fieldUserNumber /*<The user number of the field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int componentNumber /*<component number */,
    double integralValue[2] /*<On return, the integral value */,
    double ghostIntegralValue[2] /*<On return, ghost integral value */);
%clear (double integralValue[2]);
%clear (double ghostIntegralValue[2]);

%apply (double ARGOUT_ARRAY1[ANY]){(double integralValue[2])};
%apply (double ARGOUT_ARRAY1[ANY]){(double ghostIntegralValue[2])};
/*>Get integral value for the absolute errors. */
CMISSError CMISSAnalyticAnalysisIntegralAbsoluteErrorGet(const CMISSFieldType field /*<The dependent field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int componentNumber /*<component number */,
    double integralValue[2] /*<On return, the integral value */,
    double ghostIntegralValue[2] /*<On return, ghost integral value */);
%clear (double integralValue[2]);
%clear (double ghostIntegralValue[2]);

%apply (double ARGOUT_ARRAY1[ANY]){(double integralValue[2])};
%apply (double ARGOUT_ARRAY1[ANY]){(double ghostIntegralValue[2])};
/*>Get integral value for the relative error. */
CMISSError CMISSAnalyticAnalysisIntegralRelativeErrorGetNum(const int regionUserNumber /*<The user number of the region containing the field for analytic error analysis. */,
    const int fieldUserNumber /*<The user number of the field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int componentNumber /*<component number */,
    double integralValue[2] /*<On return, the integral value */,
    double ghostIntegralValue[2] /*<On return, ghost integral value */);
%clear (double integralValue[2]);
%clear (double ghostIntegralValue[2]);

%apply (double ARGOUT_ARRAY1[ANY]){(double integralValue[2])};
%apply (double ARGOUT_ARRAY1[ANY]){(double ghostIntegralValue[2])};
/*>Get integral value for the relative error. */
CMISSError CMISSAnalyticAnalysisIntegralRelativeErrorGet(const CMISSFieldType field /*<The dependent field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int componentNumber /*<component number */,
    double integralValue[2] /*<On return, the integral value */,
    double ghostIntegralValue[2] /*<On return, ghost integral value */);
%clear (double integralValue[2]);
%clear (double ghostIntegralValue[2]);

%apply (double ARGOUT_ARRAY1[ANY]){(double integralValue[2])};
%apply (double ARGOUT_ARRAY1[ANY]){(double ghostIntegralValue[2])};
/*>Get integral value for the nid numerical. */
CMISSError CMISSAnalyticAnalysisIntegralNidNumericalValueGetNum(const int regionUserNumber /*<The user number of the region containing the field for analytic error analysis. */,
    const int fieldUserNumber /*<The user number of the field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int componentNumber /*<component number */,
    double integralValue[2] /*<On return, the integral value */,
    double ghostIntegralValue[2] /*<On return, ghost integral value */);
%clear (double integralValue[2]);
%clear (double ghostIntegralValue[2]);

%apply (double ARGOUT_ARRAY1[ANY]){(double integralValue[2])};
%apply (double ARGOUT_ARRAY1[ANY]){(double ghostIntegralValue[2])};
/*>Get integral value for the nid numerical. */
CMISSError CMISSAnalyticAnalysisIntegralNidNumericalValueGet(const CMISSFieldType field /*<The dependent field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int componentNumber /*<component number */,
    double integralValue[2] /*<On return, the integral value */,
    double ghostIntegralValue[2] /*<On return, ghost integral value */);
%clear (double integralValue[2]);
%clear (double ghostIntegralValue[2]);

%apply (double ARGOUT_ARRAY1[ANY]){(double integralValue[2])};
%apply (double ARGOUT_ARRAY1[ANY]){(double ghostIntegralValue[2])};
/*>Get integral value for the nid error. */
CMISSError CMISSAnalyticAnalysisIntegralNidErrorGetNum(const int regionUserNumber /*<The user number of the region containing the field for analytic error analysis. */,
    const int fieldUserNumber /*<The user number of the field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int componentNumber /*<component number */,
    double integralValue[2] /*<On return, the integral value */,
    double ghostIntegralValue[2] /*<On return, ghost integral value */);
%clear (double integralValue[2]);
%clear (double ghostIntegralValue[2]);

%apply (double ARGOUT_ARRAY1[ANY]){(double integralValue[2])};
%apply (double ARGOUT_ARRAY1[ANY]){(double ghostIntegralValue[2])};
/*>Get integral value for the nid error. */
CMISSError CMISSAnalyticAnalysisIntegralNidErrorGet(const CMISSFieldType field /*<The dependent field to calculate the analytic error analysis for. */,
    const int variableType /*<variable type */,
    const int componentNumber /*<component number */,
    double integralValue[2] /*<On return, the integral value */,
    double ghostIntegralValue[2] /*<On return, ghost integral value */);
%clear (double integralValue[2]);
%clear (double ghostIntegralValue[2]);

/*>Sets diagnostics off. \see OPENCMISS::CMISSDiagnosticsSetOn */
CMISSError CMISSDiagnosticsSetOff();

%apply (const int DIM1, int *IN_ARRAY1){(const int levelListSize, const int *levelList)};
%apply (const int Size, const char *DummyInputString){(const int diagFilenameSize, const char *diagFilename)};
%apply (const int NumStrings, const int StringLength, const char *DummyStringList){(const int routineListNumStrings, const int routineListStringLength, const char *routineList)};
/*>Sets diagnostics on \see OPENCMISS::CMISSDiagnosticsSetOff */
CMISSError CMISSDiagnosticsSetOn(const int diagType /*<The type of diagnostics to set on \see OPENCMISS_DiagnosticTypes. */,
    const int levelListSize /*<Length of levelList */,
    const int *levelList /*<The list of diagnostic levels to set on. */,
    const int diagFilenameSize /*<Length of diagFilename string */,
    const char *diagFilename /*<If present the name of the file to output diagnostic information to. If omitted the diagnostic output is sent to the screen. */,
    const int routineListNumStrings /*<Number of strings in routineList */,
    const int routineListStringLength /*<Length of strings in routineList */,
    const char *routineList /*<The list of routines to set diagnostics on in. */);
%clear (const int levelListSize, const int *levelList);
%clear (const int diagFilenameSize, const char *diagFilename);
%clear (const int routineListNumStrings, const int routineListStringLength, const char *routineList);

/*>Sets output off \see OPENCMISS::CMISSOutputSetOff */
CMISSError CMISSOutputSetOff();

%apply (const int Size, const char *DummyInputString){(const int echoFilenameSize, const char *echoFilename)};
/*>Sets output on \see OPENCMISS::CMISSOutputSetOff */
CMISSError CMISSOutputSetOn(const int echoFilenameSize /*<Length of echoFilename string */,
    const char *echoFilename /*<The filename of the file to echo output to */);
%clear (const int echoFilenameSize, const char *echoFilename);

/*>Sets timing off \see OPENCMISS::CMISSTimingSetOn */
CMISSError CMISSTimingSetOff();

%apply (const CMISSBool DummyInputBool){(const CMISSBool *timingSummaryFlag)};
%apply (const int Size, const char *DummyInputString){(const int timingFilenameSize, const char *timingFilename)};
%apply (const int NumStrings, const int StringLength, const char *DummyStringList){(const int routineListNumStrings, const int routineListStringLength, const char *routineList)};
/*>Sets timing on \see OPENCMISS::CMISSTimingSetOff */
CMISSError CMISSTimingSetOn(const int timingType /*<The type of timing to set on \see OPENCMISS_TimingTypes. */,
    const CMISSBool timingSummaryFlag /*<.TRUE. if the timing information will be output with subsequent OPENCMISS::CMISSTimingSummaryOutput calls, .FALSE. if the timing information will be output every time the routine exits. */,
    const int timingFilenameSize /*<Length of timingFilename string */,
    const char *timingFilename /*<If present the name of the file to output timing information to. If omitted the timing output is sent to the screen. */,
    const int routineListNumStrings /*<Number of strings in routineList */,
    const int routineListStringLength /*<Length of strings in routineList */,
    const char *routineList /*<The list of routines to set timing on in. */);
%clear (const CMISSBool *timingSummaryFlag);
%clear (const int timingFilenameSize, const char *timingFilename);
%clear (const int routineListNumStrings, const int routineListStringLength, const char *routineList);

/*>Outputs the timing summary. */
CMISSError CMISSTimingSummaryOutput();

%apply (const int DIM1, int *ARGOUT_ARRAY1){(const int collapsedXiSize, int *collapsedXi)};
/*>Returns the collapsed Xi flags of a basis identified by a user number. */
CMISSError CMISSBasis_CollapsedXiGetNum(const int userNumber /*<The user number of the basis to get the collapsed Xi flags for. */,
    const int collapsedXiSize /*<Length of collapsedXi */,
    int *collapsedXi /*<collapsedXi(ni). On return, the collapsed Xi parameter for the ni'th Xi direction. \see OPENCMISS_BasisXiCollapse */);
%clear (const int collapsedXiSize, int *collapsedXi);

%apply (const int DIM1, int *ARGOUT_ARRAY1){(const int collapsedXiSize, int *collapsedXi)};
/*>Returns the collapsed Xi flags of a basis identified by an object. */
CMISSError CMISSBasis_CollapsedXiGet(const CMISSBasisType basis /*<The basis to get the collapsed Xi flags for. */,
    const int collapsedXiSize /*<Length of collapsedXi */,
    int *collapsedXi /*<collapsedXi(ni). On return, the collapsed Xi parameter for the ni'th Xi direction. \see OPENCMISS_BasisXiCollapse */);
%clear (const int collapsedXiSize, int *collapsedXi);

%apply (const int DIM1, int *IN_ARRAY1){(const int collapsedXiSize, const int *collapsedXi)};
/*>Sets/changes the collapsed Xi flags of a basis identified by a user number. */
CMISSError CMISSBasis_CollapsedXiSetNum(const int userNumber /*<The user number of the basis to set the collapsed Xi flags for. */,
    const int collapsedXiSize /*<Length of collapsedXi */,
    const int *collapsedXi /*<collapsedXi(ni). The collapsed Xi parameter for the ni'th Xi direction to set. \see OPENCMISS_BasisXiCollapse */);
%clear (const int collapsedXiSize, const int *collapsedXi);

%apply (const int DIM1, int *IN_ARRAY1){(const int collapsedXiSize, const int *collapsedXi)};
/*>Sets/changes the collapsed Xi flags of a basis identified by an object. */
CMISSError CMISSBasis_CollapsedXiSet(CMISSBasisType basis /*<The basis to set the collapsed Xi flags for. */,
    const int collapsedXiSize /*<Length of collapsedXi */,
    const int *collapsedXi /*<collapsedXi(ni). The collapsed Xi parameter for the ni'th Xi direction to set. \see OPENCMISS_BasisXiCollapse */);
%clear (const int collapsedXiSize, const int *collapsedXi);

/*>Finishes the creation of a new basis identified by a user number. */
CMISSError CMISSBasis_CreateFinishNum(const int userNumber /*<The user number of the basis to finish the creation of. */);

/*>Finishes the creation of a new basis identified by an object. */
CMISSError CMISSBasis_CreateFinish(CMISSBasisType basis /*<The basis to finish the creation of */);

/*>Starts the creation of a new basis for a basis identified by a user number. */
CMISSError CMISSBasis_CreateStartNum(const int userNumber /*<The user number of the basis to start the creation of. */);

/*>Starts the creation of a new basis for a basis identified by an object. */
CMISSError CMISSBasis_CreateStart(const int userNumber /*<The user number of the basis to start the creation of. */,
    CMISSBasisType basis /*<On exit, the newly created basis. */);

/*>Destroys a basis identified by its basis user number. */
CMISSError CMISSBasis_DestroyNum(const int userNumber /*<The user number of the basis to destroy. */);

/*>Destroys a basis identified by an object. */
CMISSError CMISSBasis_Destroy(CMISSBasisType basis /*<The basis to destroy. */);

%apply (const int DIM1, int *ARGOUT_ARRAY1){(const int interpolationXiSize, int *interpolationXi)};
/*>Get the interpolation type in each xi directions for a basis identified by a user number. */
CMISSError CMISSBasis_InterpolationXiGetNum(const int userNumber /*<The user number of the basis to get the interpolation xi for. */,
    const int interpolationXiSize /*<Length of interpolationXi */,
    int *interpolationXi /*<On return, the interpolation xi parameters for each Xi direction \see OPENCMISS_BasisInterpolationSpecifications. */);
%clear (const int interpolationXiSize, int *interpolationXi);

%apply (const int DIM1, int *ARGOUT_ARRAY1){(const int interpolationXiSize, int *interpolationXi)};
/*>Get the interpolation type in each xi directions for a basis indentified by an object. */
CMISSError CMISSBasis_InterpolationXiGet(const CMISSBasisType basis /*<The basis to get the interpolation xi for. */,
    const int interpolationXiSize /*<Length of interpolationXi */,
    int *interpolationXi /*<On return, the interpolation xi parameters for each Xi direction \see OPENCMISS_BasisInterpolationSpecifications. */);
%clear (const int interpolationXiSize, int *interpolationXi);

%apply (const int DIM1, int *IN_ARRAY1){(const int interpolationXiSize, const int *interpolationXi)};
/*>Sets/changes the interpolation type in each xi directions for a basis identified by a user number. */
CMISSError CMISSBasis_InterpolationXiSetNum(const int userNumber /*<The user number of the basis to get the interpolation xi for. */,
    const int interpolationXiSize /*<Length of interpolationXi */,
    const int *interpolationXi /*<The interpolation xi parameters for each Xi direction \see OPENCMISS_BasisInterpolationSpecifications. */);
%clear (const int interpolationXiSize, const int *interpolationXi);

%apply (const int DIM1, int *IN_ARRAY1){(const int interpolationXiSize, const int *interpolationXi)};
/*>Sets/changes the interpolation type in each xi directions for a basis indentified by an object. */
CMISSError CMISSBasis_InterpolationXiSet(const CMISSBasisType basis /*<The basis to get the interpolation xi for. */,
    const int interpolationXiSize /*<Length of interpolationXi */,
    const int *interpolationXi /*<The interpolation xi parameters for each Xi direction \see OPENCMISS_BasisInterpolationSpecifications. */);
%clear (const int interpolationXiSize, const int *interpolationXi);

%apply (int *DummyOutputScalar){(int *numberOfLocalNodes)};
/*>Returns the number of local nodes in a basis identified by a user number. */
CMISSError CMISSBasis_NumberOfLocalNodesGetNum(const int userNumber /*<The user number of the basis to get the interpolation xi for. */,
    int *numberOfLocalNodes /*<On return, the number of local nodes in the specified basis. */);
%clear (int *numberOfLocalNodes);

%apply (int *DummyOutputScalar){(int *numberOfLocalNodes)};
/*>Returns the number of local nodes in a basis identified by an object. */
CMISSError CMISSBasis_NumberOfLocalNodesGet(const CMISSBasisType basis /*<The basis to get the number of local nodes for. */,
    int *numberOfLocalNodes /*<On return, the number of local nodes in the specified basis. */);
%clear (int *numberOfLocalNodes);

%apply (int *DummyOutputScalar){(int *numberOfXi)};
/*>Returns the number of Xi directions in a basis identified by a user number. */
CMISSError CMISSBasis_NumberOfXiGetNum(const int userNumber /*<The user number of the basis to get the number xi for. */,
    int *numberOfXi /*<On return, the number of xi directions in the specified basis. */);
%clear (int *numberOfXi);

%apply (int *DummyOutputScalar){(int *numberOfXi)};
/*>Returns the number of Xi directions in a basis identified by an object. */
CMISSError CMISSBasis_NumberOfXiGet(const CMISSBasisType basis /*<The basis to get the number of xi directions for. */,
    int *numberOfXi /*<On return, the number of xi directions in the specified basis. */);
%clear (int *numberOfXi);

/*>Sets/changes the number of Xi directions in a basis identified by a user number. */
CMISSError CMISSBasis_NumberOfXiSetNum(const int userNumber /*<The user number of the basis to set the number xi for. */,
    const int numberOfXi /*<The number of xi directions in the specified basis to set. */);

/*>Sets/changes the number of Xi directions in a basis identified by an object. */
CMISSError CMISSBasis_NumberOfXiSet(CMISSBasisType basis /*<The basis to set the number of xi directions for. */,
    const int numberOfXi /*<The number of xi directions in the specified basis to set. */);

%apply (const int DIM1, int *ARGOUT_ARRAY1){(const int numberOfGaussXiSize, int *numberOfGaussXi)};
/*>Returns the number of Gauss points in each Xi directions for a basis quadrature identified by a user number. */
CMISSError CMISSBasis_QuadratureNumberOfGaussXiGetNum(const int userNumber /*<The user number of the basis to get the number of Gauss Xi for. */,
    const int numberOfGaussXiSize /*<Length of numberOfGaussXi */,
    int *numberOfGaussXi /*<On return, the number of Gauss points in each Xi directions in the specified basis. */);
%clear (const int numberOfGaussXiSize, int *numberOfGaussXi);

%apply (const int DIM1, int *ARGOUT_ARRAY1){(const int numberOfGaussXiSize, int *numberOfGaussXi)};
/*>Returns the number Gauss points in each Xi directions for a basis quadrature identified by an object. */
CMISSError CMISSBasis_QuadratureNumberOfGaussXiGet(const CMISSBasisType basis /*<The basis to get the number of Gauss Xi for. */,
    const int numberOfGaussXiSize /*<Length of numberOfGaussXi */,
    int *numberOfGaussXi /*<On return, the number of Gauss points in each Xi directions in the specified basis. */);
%clear (const int numberOfGaussXiSize, int *numberOfGaussXi);

%apply (const int DIM1, int *IN_ARRAY1){(const int numberOfGaussXiSize, const int *numberOfGaussXi)};
/*>Sets/changes the number of Gauss points in each Xi directions for a basis quadrature identified by a user number. */
CMISSError CMISSBasis_QuadratureNumberOfGaussXiSetNum(const int userNumber /*<The user number of the basis to set the number of Gauss Xi for. */,
    const int numberOfGaussXiSize /*<Length of numberOfGaussXi */,
    const int *numberOfGaussXi /*<The number of Gauss points in each Xi directions in the specified basis to set. */);
%clear (const int numberOfGaussXiSize, const int *numberOfGaussXi);

%apply (const int DIM1, int *IN_ARRAY1){(const int numberOfGaussXiSize, const int *numberOfGaussXi)};
/*>Sets the number Gauss points in each Xi directions for a basis quadrature identified by an object. */
CMISSError CMISSBasis_QuadratureNumberOfGaussXiSet(CMISSBasisType basis /*<The basis to get the number of Gauss Xi for. */,
    const int numberOfGaussXiSize /*<Length of numberOfGaussXi */,
    const int *numberOfGaussXi /*<The number of Gauss points in each Xi directions in the specified basis to set. */);
%clear (const int numberOfGaussXiSize, const int *numberOfGaussXi);

%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int GaussXiSize, double *GaussXi)};
/*>Returns the xi position of a Gauss point on a basis quadrature identified by a user number. */
CMISSError CMISSBasis_QuadratureSingleGaussXiGetNum(const int userNumber /*<The user number of the basis to get the Gauss Xi positions for. */,
    const int quadratureScheme /*<The quadrature scheme to return the Gauss positions for. */,
    const int GaussPoint /*<The Gauss point to return the element xi positions for. */,
    const int GaussXiSize /*<Length of GaussXi */,
    double *GaussXi /*<On return, GaussXi(xi_direction) the xi position of the specified Gauss point for the specified quadrature scheme. */);
%clear (const int GaussXiSize, double *GaussXi);

%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int GaussXiSize, double *GaussXi)};
/*>Returns the xi position of a Gauss point on a basis quadrature identified by an object. */
CMISSError CMISSBasis_QuadratureSingleGaussXiGet(const CMISSBasisType basis /*<The basis to get the Gauss Xi positions for. */,
    const int quadratureScheme /*<The quadrature scheme to return the Gauss xi positions for. */,
    const int GaussPoint /*<The Gauss point to return the element xi positions for. */,
    const int GaussXiSize /*<Length of GaussXi */,
    double *GaussXi /*<On return, GaussXi(xi_direction) the xi position of the specified Gauss point for the specified quadrature scheme. */);
%clear (const int GaussXiSize, double *GaussXi);

%apply (const int DIM1, int *IN_ARRAY1){(const int GaussPointsSize, const int *GaussPoints)};
%apply (const int DIM1, const int DIM2, double *ARGOUT_FARRAY2){(const int GaussXiSize1, const int GaussXiSize2, double *GaussXi)};
/*>Returns the xi positions of Gauss points on a basis quadrature identified by a user number. */
CMISSError CMISSBasis_QuadratureMultipleGaussXiGetNum(const int userNumber /*<The user number of the basis to get the Gauss Xi positions for. */,
    const int quadratureScheme /*<The quadrature scheme to return the Gauss positions for. */,
    const int GaussPointsSize /*<Length of GaussPoints */,
    const int *GaussPoints /*<The Gauss points to return the element xi positions for. */,
    const int GaussXiSize1 /*<Size of dimension 1 of GaussXi */,
    const int GaussXiSize2 /*<Size of dimension 2 of GaussXi */,
    double *GaussXi /*<On return, GaussXi(Gauss_point,xi_direction) the Gauss xi positions for the specified quadrature scheme. */);
%clear (const int GaussPointsSize, const int *GaussPoints);
%clear (const int GaussXiSize1, const int GaussXiSize2, double *GaussXi);

%apply (const int DIM1, int *IN_ARRAY1){(const int GaussPointsSize, const int *GaussPoints)};
%apply (const int DIM1, const int DIM2, double *ARGOUT_FARRAY2){(const int GaussXiSize1, const int GaussXiSize2, double *GaussXi)};
/*>Returns the xi positions of Gauss points on a basis quadrature identified by an object. */
CMISSError CMISSBasis_QuadratureMultipleGaussXiGet(const CMISSBasisType basis /*<The basis to get the Gauss Xi positions for. */,
    const int quadratureScheme /*<The quadrature scheme to return the Gauss xi positions for. */,
    const int GaussPointsSize /*<Length of GaussPoints */,
    const int *GaussPoints /*<The Gauss points to return the element xi positions for. */,
    const int GaussXiSize1 /*<Size of dimension 1 of GaussXi */,
    const int GaussXiSize2 /*<Size of dimension 2 of GaussXi */,
    double *GaussXi /*<On return, GaussXi(Gauss_point,xi_direction) the Gauss xi positions for the specified quadrature scheme. */);
%clear (const int GaussPointsSize, const int *GaussPoints);
%clear (const int GaussXiSize1, const int GaussXiSize2, double *GaussXi);

%apply (int *DummyOutputScalar){(int *quadratureOrder)};
/*>Returns the order of quadrature a basis quadrature identified by a user number. */
CMISSError CMISSBasis_QuadratureOrderGetNum(const int userNumber /*<The user number of the basis to get the quadrature order for. */,
    int *quadratureOrder /*<On return, the order of quadrature in the specified basis. */);
%clear (int *quadratureOrder);

%apply (int *DummyOutputScalar){(int *quadratureOrder)};
/*>Returns the the order of quadrature for a basis quadrature identified by an object. */
CMISSError CMISSBasis_QuadratureOrderGet(const CMISSBasisType basis /*<The basis to get the quadrature order for. */,
    int *quadratureOrder /*<On return, the order of quadrature in the specified basis. */);
%clear (int *quadratureOrder);

/*>Sets/changes the order of quadrature a basis quadrature identified by a user number. */
CMISSError CMISSBasis_QuadratureOrderSetNum(const int userNumber /*<The user number of the basis to set the quadrature order for. */,
    const int quadratureOrder /*<The order of quadrature in the specified basis to set. */);

/*>Sets/changes the the order of quadrature for a basis quadrature identified by an object. */
CMISSError CMISSBasis_QuadratureOrderSet(CMISSBasisType basis /*<The basis to set the quadrature order for. */,
    const int quadratureOrder /*<The order of quadrature in the specified basis to set. */);

%apply (int *DummyOutputScalar){(int *quadratureType)};
/*>Returns the type of quadrature a basis quadrature identified by a user number. */
CMISSError CMISSBasis_QuadratureTypeGetNum(const int userNumber /*<The user number of the basis to get the quadrature type for. */,
    int *quadratureType /*<On return, the type of quadrature in the specified basis. \see OPENCMISS_QuadratureTypes */);
%clear (int *quadratureType);

%apply (int *DummyOutputScalar){(int *quadratureType)};
/*>Returns the the type of quadrature for a basis quadrature identified by an object. */
CMISSError CMISSBasis_QuadratureTypeGet(const CMISSBasisType basis /*<The basis to get the quadrature order for. */,
    int *quadratureType /*<On return, the type of quadrature in the specified basis. \see OPENCMISS_QuadratureTypes */);
%clear (int *quadratureType);

/*>Sets/changes the type of quadrature a basis quadrature identified by a user number. */
CMISSError CMISSBasis_QuadratureTypeSetNum(const int userNumber /*<The user number of the basis to get the quadrature type for. */,
    const int quadratureType /*<The type of quadrature in the specified basis to set. \see OPENCMISS_QuadratureTypes */);

/*>Sets/changes the the type of quadrature for a basis quadrature identified by an object. */
CMISSError CMISSBasis_QuadratureTypeSet(CMISSBasisType basis /*<The basis to get the quadrature type for. */,
    const int quadratureType /*<The type of quadrature in the specified basis to set. \see OPENCMISS_QuadratureTypes */);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *faceGaussEvaluate)};
/*>Sets/changes the local face Gauss scheme calculation, on a basis identified by a user number. */
CMISSError CMISSBasis_QuadratureLocalFaceGaussEvaluateSetNum(const int userNumber /*<The user number of the basis to get the quadrature type for. */,
    const CMISSBool faceGaussEvaluate /*<The value to set face Gauss evaluation flag to. */);
%clear (const CMISSBool *faceGaussEvaluate);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *faceGaussEvaluate)};
/*>Sets/changes the local face Gauss scheme calculation, on a basis identified by an object. */
CMISSError CMISSBasis_QuadratureLocalFaceGaussEvaluateSet(CMISSBasisType basis /*<The basis to get the quadrature type for. */,
    const CMISSBool faceGaussEvaluate /*<The type of quadrature in the specified basis to set. */);
%clear (const CMISSBool *faceGaussEvaluate);

%apply (int *DummyOutputScalar){(int *basisType)};
/*>Returns the type of a basis identified by a user number. */
CMISSError CMISSBasis_TypeGetNum(const int userNumber /*<The user number of the basis to get the type for. */,
    int *basisType /*<On return, the type of the specified basis. \see OPENCMISS_BasisTypes */);
%clear (int *basisType);

%apply (int *DummyOutputScalar){(int *basisType)};
/*>Returns the type of a basis identified by an object. */
CMISSError CMISSBasis_TypeGet(const CMISSBasisType basis /*<The basis to get the type for. */,
    int *basisType /*<On return, the type of the specified basis. \see OPENCMISS_BasisTypes */);
%clear (int *basisType);

/*>Sets/changes the type of a basis identified by a user number. */
CMISSError CMISSBasis_TypeSetNum(const int userNumber /*<The user number of the basis to set the type for. */,
    const int basisType /*<The type of the specified basis to set. \see OPENCMISS_BasisTypes */);

/*>Sets/changes the type of a basis identified by an object. */
CMISSError CMISSBasis_TypeSet(CMISSBasisType basis /*<The basis to set the type for. */,
    const int basisType /*<The type of the specified basis to set. \see OPENCMISS_BasisTypes */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Destroys the boundary conditions for solver equations identified by a control loop identifier. */
CMISSError CMISSBoundaryConditions_DestroyNum(const int problemUserNumber /*<The user number of the problem containing the solver equations to destroy the boundary conditions for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the solver equations boundary conditions for. */,
    const int solverIndex /*<The solver index to get the solver equations for. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Destroys boundary conditions identified by an object. */
CMISSError CMISSBoundaryConditions_Destroy(CMISSBoundaryConditionsType boundaryConditions /*<The boundary conditions to destroy. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Adds to the value of the specified constant and sets this as a boundary condition on the specified constant for boundary conditions identified by a user number. */
CMISSError CMISSBoundaryConditions_AddConstantNum(const int regionUserNumber /*<The user number of the region containing the dependent field to add the boundary conditions for. */,
    const int problemUserNumber /*<The user number of the problem containing the solver equations to add the boundary conditions for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the solver equations boundary conditions for. */,
    const int solverIndex /*<The solver index to get the solver equations for. */,
    const int fieldUserNumber /*<The user number of the dependent field for the boundary condition. */,
    const int variableType /*<The variable type of the dependent field to add the boundary condition at. \see OPENCMISS_FieldVariableTypes */,
    const int componentNumber /*<The component number of the dependent field to add the boundary condition at. */,
    const int condition /*<The boundary condition type to set \see OPENCMISS_BoundaryConditionsTypes,OPENCMISS */,
    const double value /*<The value of the boundary condition to add. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Adds to the value of the specified constant and sets this as a boundary condition on the specified constant for boundary conditions identified by an object. */
CMISSError CMISSBoundaryConditions_AddConstant(const CMISSBoundaryConditionsType boundaryConditions /*<The boundary conditions to add the constant to. */,
    const CMISSFieldType field /*<The dependent field to set the boundary condition on. */,
    const int variableType /*<The variable type of the dependent field to set the boundary condition at. \see OPENCMISS_FieldVariableTypes */,
    const int componentNumber /*<The component number of the dependent field to set the boundary condition at. */,
    const int condition /*<The boundary condition type to set \see OPENCMISS_BoundaryConditionsTypes,OPENCMISS */,
    const double value /*<The value of the boundary condition to add. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets the value of the specified constant as a boundary condition on the specified constant for boundary conditions identified by a user number. */
CMISSError CMISSBoundaryConditions_SetConstantNum(const int regionUserNumber /*<The user number of the region containing the equations set to set the boundary conditions for. */,
    const int problemUserNumber /*<The user number of the problem containing the solver equations to destroy the boundary conditions for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the solver equations boundary conditions for. */,
    const int solverIndex /*<The solver index to get the solver equations for. */,
    const int variableType /*<The variable type of the dependent field to set the boundary condition at. \see OPENCMISS_FieldVariableTypes */,
    const int fieldUserNumber /*<The user number of the dependent field for the boundary condition. */,
    const int componentNumber /*<The component number of the dependent field to set the boundary condition at. */,
    const int condition /*<The boundary condition type to set \see OPENCMISS_BoundaryConditionsTypes,OPENCMISS */,
    const double value /*<The value of the boundary condition to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets the value of the specified constant and sets this as a boundary condition on the specified constant for boundary conditions identified by an object. */
CMISSError CMISSBoundaryConditions_SetConstant(const CMISSBoundaryConditionsType boundaryConditions /*<The boundary conditions to set the constant to. */,
    const CMISSFieldType field /*<The dependent field to set the boundary condition on. */,
    const int variableType /*<The variable type of the dependent field to set the boundary condition at. \see OPENCMISS_FieldVariableTypes */,
    const int componentNumber /*<The component number of the dependent field to set the boundary condition at. */,
    const int condition /*<The boundary condition type to set \see OPENCMISS_BoundaryConditionsTypes,OPENCMISS */,
    const double value /*<The value of the boundary condition to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Adds the value to the specified element and sets this as a boundary condition on the specified element for boundary conditions identified by a user number. */
CMISSError CMISSBoundaryConditions_AddElementNum(const int regionUserNumber /*<The user number of the region containing the equations set to add the boundary conditions for. */,
    const int problemUserNumber /*<The user number of the problem containing the solver equations to destroy the boundary conditions for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the solver equations boundary conditions for. */,
    const int solverIndex /*<The solver index to get the solver equations for. */,
    const int fieldUserNumber /*<The user number of the dependent field for the boundary condition. */,
    const int variableType /*<The variable type of the dependent field to add the boundary condition at. \see OPENCMISS_FieldVariableTypes */,
    const int elementUserNumber /*<The user number of the element to add the boundary conditions for. */,
    const int componentNumber /*<The component number of the dependent field to add the boundary condition at. */,
    const int condition /*<The boundary condition type to set \see OPENCMISS_BoundaryConditionsTypes,OPENCMISS */,
    const double value /*<The value of the boundary condition to add. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Adds to the value of the specified element and sets this as a boundary condition on the specified element for boundary conditions identified by an object. */
CMISSError CMISSBoundaryConditions_AddElement(const CMISSBoundaryConditionsType boundaryConditions /*<The boundary conditions to add the element to. */,
    const CMISSFieldType field /*<The dependent field to set the boundary condition on. */,
    const int variableType /*<The variable type of the dependent field to add the boundary condition at. \see OPENCMISS_FieldVariableTypes */,
    const int elementUserNumber /*<The user number of the element to add the boundary conditions for. */,
    const int componentNumber /*<The component number of the dependent field to set the boundary condition at. */,
    const int condition /*<The boundary condition type to set \see OPENCMISS_BoundaryConditionsTypes,OPENCMISS */,
    const double value /*<The value of the boundary condition to add. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets the value of the specified element as a boundary condition on the specified element for boundary conditions identified by a user number. */
CMISSError CMISSBoundaryConditions_SetElementNum(const int regionUserNumber /*<The user number of the region containing the equations set to set the boundary conditions for. */,
    const int problemUserNumber /*<The user number of the problem containing the solver equations to destroy the boundary conditions for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the solver equations boundary conditions for. */,
    const int solverIndex /*<The solver index to get the solver equations for. */,
    const int fieldUserNumber /*<The user number of the dependent field for the boundary condition. */,
    const int variableType /*<The variable type of the dependent field to set the boundary condition at. \see OPENCMISS_FieldVariableTypes */,
    const int elementUserNumber /*<The user number of the element to set the boundary conditions for. */,
    const int componentNumber /*<The component number of the dependent field to set the boundary condition at. */,
    const int condition /*<The boundary condition type to set \see OPENCMISS_BoundaryConditionsTypes,OPENCMISS */,
    const double value /*<The value of the boundary condition to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets the value of the specified element and sets this as a boundary condition on the specified elements for boundary conditions identified by an object. */
CMISSError CMISSBoundaryConditions_SetElement(const CMISSBoundaryConditionsType boundaryConditions /*<The boundary conditions to set the element to. */,
    const CMISSFieldType field /*<The dependent field to set the boundary condition on. */,
    const int variableType /*<The variable type of the dependent field to set the boundary condition at. \see OPENCMISS_FieldVariableTypes */,
    const int elementUserNumber /*<The user number of the element to set the boundary conditions for. */,
    const int componentNumber /*<The component number of the dependent field to set the boundary condition at. */,
    const int condition /*<The boundary condition type to set \see OPENCMISS_BoundaryConditionsTypes,OPENCMISS */,
    const double value /*<The value of the boundary condition to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Adds the value to the specified node and sets this as a boundary condition on the specified node for boundary conditions identified by a user number. */
CMISSError CMISSBoundaryConditions_AddNodeNum(const int regionUserNumber /*<The user number of the region containing the equations set to add the boundary conditions for. */,
    const int problemUserNumber /*<The user number of the problem containing the solver equations to destroy the boundary conditions for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the solver equations boundary conditions for. */,
    const int solverIndex /*<The solver index to get the solver equations for. */,
    const int fieldUserNumber /*<The user number of the dependent field for the boundary condition. */,
    const int variableType /*<The variable type of the dependent field to add the boundary condition at. \see OPENCMISS_FieldVariableTypes */,
    const int versionNumber /*<The user number of the node derivative version to add the boundary conditions for. */,
    const int derivativeNumber /*<The user number of the node derivative to add the boundary conditions for. */,
    const int nodeUserNumber /*<The user number of the node to add the boundary conditions for. */,
    const int componentNumber /*<The component number of the dependent field to add the boundary condition at. */,
    const int condition /*<The boundary condition type to set \see OPENCMISS_BoundaryConditionsTypes,OPENCMISS */,
    const double value /*<The value of the boundary condition to add. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Adds to the value of the specified node and sets this as a boundary condition on the specified node for boundary conditions identified by an object. */
CMISSError CMISSBoundaryConditions_AddNode(const CMISSBoundaryConditionsType boundaryConditions /*<The boundary conditions to add the node to. */,
    const CMISSFieldType field /*<The dependent field to set the boundary condition on. */,
    const int variableType /*<The variable type of the dependent field to add the boundary condition at. \see OPENCMISS_FieldVariableTypes */,
    const int versionNumber /*<The user number of the node derivative version to add the boundary conditions for. */,
    const int derivativeNumber /*<The user number of the node derivative to add the boundary conditions for. */,
    const int nodeUserNumber /*<The user number of the node to add the boundary conditions for. */,
    const int componentNumber /*<The component number of the dependent field to set the boundary condition at. */,
    const int condition /*<The boundary condition type to set \see OPENCMISS_BoundaryConditionsTypes,OPENCMISS */,
    const double value /*<The value of the boundary condition to add. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets the value of the specified node as a boundary condition on the specified node for boundary conditions identified by a user number. */
CMISSError CMISSBoundaryConditions_SetNodeNum(const int regionUserNumber /*<The user number of the region containing the equations set to set the boundary conditions for. */,
    const int problemUserNumber /*<The user number of the problem containing the solver equations to destroy the boundary conditions for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the solver equations boundary conditions for. */,
    const int solverIndex /*<The solver index to get the solver equations for. */,
    const int fieldUserNumber /*<The user number of the dependent field for the boundary condition. */,
    const int variableType /*<The variable type of the dependent field to set the boundary condition at. \see OPENCMISS_FieldVariableTypes */,
    const int versionNumber /*<The user number of the node derivative version to set the boundary conditions for. */,
    const int derivativeNumber /*<The user number of the node derivative to set the boundary conditions for. */,
    const int nodeUserNumber /*<The user number of the node to set the boundary conditions for. */,
    const int componentNumber /*<The component number of the dependent field to set the boundary condition at. */,
    const int condition /*<The boundary condition type to set \see OPENCMISS_BoundaryConditionsTypes,OPENCMISS */,
    const double value /*<The value of the boundary condition to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets the value of the specified node and sets this as a boundary condition on the specified node for boundary conditions identified by an object. */
CMISSError CMISSBoundaryConditions_SetNode(const CMISSBoundaryConditionsType boundaryConditions /*<The boundary conditions to set the node to. */,
    const CMISSFieldType field /*<The dependent field to set the boundary condition on. */,
    const int variableType /*<The variable type of the dependent field to set the boundary condition at. \see OPENCMISS_FieldVariableTypes */,
    const int versionNumber /*<The user number of the node derivative version to set the boundary conditions for. */,
    const int derivativeNumber /*<The user number of the node derivative to set the boundary conditions for. */,
    const int nodeUserNumber /*<The user number of the node to set the boundary conditions for. */,
    const int componentNumber /*<The component number of the dependent field to set the boundary condition at. */,
    const int condition /*<The boundary condition type to set \see OPENCMISS_BoundaryConditionsTypes,OPENCMISS */,
    const double value /*<The value of the boundary condition to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets the Neumann integration matrix sparsity for boundary conditions identified by a control loop identifier. */
CMISSError CMISSBoundaryConditions_NeumannSparsityTypeSetNum(const int problemUserNumber /*<The user number of the problem containing the solver equations to destroy the boundary conditions for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the solver equations boundary conditions for. */,
    const int solverIndex /*<The solver index to get the solver equations for. */,
    const int sparsityType /*<The sparsity type for the Neumann integration matrices. \see OPENCMISS_BoundaryConditionSparsityTypes,OPENCMISS */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets the Neumann integration matrix sparsity type for the boundary conditions */
CMISSError CMISSBoundaryConditions_NeumannSparsityTypeSet(CMISSBoundaryConditionsType boundaryConditions /*<The boundary conditions */,
    const int sparsityType /*<The sparsity type for the Neumann integration matrices. \see OPENCMISS_BoundaryConditionSparsityTypes,OPENCMISS */);

%apply (const int DIM1, int *IN_ARRAY1){(const int nodesSize, const int *nodes)};
/*>Constrain multiple nodal equations dependent field DOFs to be a single solver DOF in the solver equations */
CMISSError CMISSBoundaryConditions_ConstrainNodeDofsEqualNum(const int regionUserNumber /*<The user number of the region containing the field DOFs to constrain. */,
    const int problemUserNumber /*<The user number of the problem containing the solver equations. */,
    const int controlLoopIdentifier /*<The control loop identifier to get the solver equations. */,
    const int solverIndex /*<The solver index of the solver equations. */,
    const int fieldUserNumber /*<The user number of the dependent field containing the DOFs to contrain. */,
    const int fieldVariableType /*<The variable type of the dependent field containing the DOFs to constrain. \see OPENCMISS_FieldVariableTypes */,
    const int versionNumber /*<The derivative version number. */,
    const int derivativeNumber /*<The derivative number. */,
    const int component /*<The field component number of the DOFs to be constrained. */,
    const int nodesSize /*<Length of nodes */,
    const int *nodes /*<The user numbers of the nodes to be constrained to be equal. */);
%clear (const int nodesSize, const int *nodes);

%apply (const int DIM1, int *IN_ARRAY1){(const int nodesSize, const int *nodes)};
/*>Constrain multiple nodal equations dependent field DOFs to be a single solver DOF in the solver equations */
CMISSError CMISSBoundaryConditions_ConstrainNodeDofsEqual(const CMISSBoundaryConditionsType boundaryConditions /*<The boundary conditions to constrain the DOFs in. */,
    const CMISSFieldType field /*<The equations dependent field containing the field DOFs to be constrained. */,
    const int fieldVariableType /*<The field variable type of the DOFs to be constrained. \see OPENCMISS_FieldVariableTypes */,
    const int versionNumber /*<The derivative version number. */,
    const int derivativeNumber /*<The derivative number. */,
    const int component /*<The field component number of the DOFs to be constrained. */,
    const int nodesSize /*<Length of nodes */,
    const int *nodes /*<The user numbers of the nodes to be constrained to be equal. */);
%clear (const int nodesSize, const int *nodes);

%apply (int *DummyOutputScalar){(int *errorHandlingMode)};
/*>Returns the error handling mode for OpenCMISS */
CMISSError CMISSErrorHandlingModeGet(int *errorHandlingMode /*<On return, the error handling mode. \see OPENCMISS_CMISSErrorHandlingModes,OPENCMISS */);
%clear (int *errorHandlingMode);

/*>Sets the error handling mode for OpenCMISS */
CMISSError CMISSErrorHandlingModeSet(const int errorHandlingMode /*<The error handling mode to set. \see OPENCMISS_CMISSErrorHandlingModes,OPENCMISS */);

%apply (const int Size, char *DummyOutputString){(const int errorMessageSize, char *errorMessage)};
/*>Extracts the most recent error string for OpenCMISS */
CMISSError CMISSExtractErrorMessage(const int errorMessageSize /*<Length of errorMessage string */,
    char *errorMessage /*<On return, the extracted error message. */);
%clear (const int errorMessageSize, char *errorMessage);

%apply (const int DIM1, int *ARGOUT_ARRAY1){(const int randomSeedsSize, int *randomSeeds)};
/*>Returns the random seeds for OpenCMISS */
CMISSError CMISSRandomSeedsGet(const int randomSeedsSize /*<Length of randomSeeds */,
    int *randomSeeds /*<On return, the random seeds. */);
%clear (const int randomSeedsSize, int *randomSeeds);

%apply (int *DummyOutputScalar){(int *randomSeedsSize)};
/*>Returns the size of the random seeds array for OpenCMISS */
CMISSError CMISSRandomSeedsSizeGet(int *randomSeedsSize /*<On return, the size of the random seeds array. */);
%clear (int *randomSeedsSize);

%apply (const int DIM1, int *IN_ARRAY1){(const int randomSeedsSize, const int *randomSeeds)};
/*>Sets the random seeds for OpenCMISS */
CMISSError CMISSRandomSeedsSet(const int randomSeedsSize /*<Length of randomSeeds */,
    const int *randomSeeds /*<The random seeds to set. */);
%clear (const int randomSeedsSize, const int *randomSeeds);

%apply (const int Size, const char *DummyInputString){(const int variableIDSize, const char *variableID)};
/*>Sets a CellML model variable to be known by user number. */
CMISSError CMISSCellML_VariableSetAsKnownNum(const int regionUserNumber /*<The user number of the region containing the CellML enviroment. */,
    const int CellMLUserNumber /*<The user number of the CellML enviroment. */,
    const int CellMLModelUserNumber /*<The user number of the CellML model in which to find the given variable. */,
    const int variableIDSize /*<Length of variableID string */,
    const char *variableID /*<The CellML variable to set as known (in the format 'component_name/variable_name'). */);
%clear (const int variableIDSize, const char *variableID);

%apply (const int Size, const char *DummyInputString){(const int variableIDSize, const char *variableID)};
/*>Sets a CellML model variable to be known by object. */
CMISSError CMISSCellML_VariableSetAsKnown(const CMISSCellMLType CellML /*<The CellML enviroment. */,
    const int CellMLModelUserNumber /*<The user number of the CellML model in which to find the given variable. */,
    const int variableIDSize /*<Length of variableID string */,
    const char *variableID /*<The CellML variable to set as known (in the format 'component_name/variable_name'). */);
%clear (const int variableIDSize, const char *variableID);

%apply (const int Size, const char *DummyInputString){(const int variableIDSize, const char *variableID)};
/*>Sets a CellML model variable to be wanted by user number. */
CMISSError CMISSCellML_VariableSetAsWantedNum(const int regionUserNumber /*<The user number of the region containing the CellML enviroment. */,
    const int CellMLUserNumber /*<The user number of the CellML enviroment. */,
    const int CellMLModelUserNumber /*<The user number of the CellML model in which to find the given variable. */,
    const int variableIDSize /*<Length of variableID string */,
    const char *variableID /*<The CellML variable to set as wanted (in the format 'component_name/variable_name'). */);
%clear (const int variableIDSize, const char *variableID);

%apply (const int Size, const char *DummyInputString){(const int variableIDSize, const char *variableID)};
/*>Sets a CellML model variable to be wanted by object. */
CMISSError CMISSCellML_VariableSetAsWanted(const CMISSCellMLType CellML /*<The CellML enviroment. */,
    const int CellMLModelUserNumber /*<The user number of the CellML model in which to find the given variable. */,
    const int variableIDSize /*<Length of variableID string */,
    const char *variableID /*<The CellML variable to set as wanted (in the format 'component_name/variable_name'). */);
%clear (const int variableIDSize, const char *variableID);

%apply (const int Size, const char *DummyInputString){(const int variableIDSize, const char *variableID)};
/*>Defines a CellML model variable to field variable component map by user number */
CMISSError CMISSCellML_CreateCellMLToFieldMapNum(const int regionUserNumber /*<The user number of the region containing the CellML enviroment. */,
    const int CellMLUserNumber /*<The user number of the CellML enviroment. */,
    const int CellMLModelUserNumber /*<The user number of the CellML model to map fom. */,
    const int variableIDSize /*<Length of variableID string */,
    const char *variableID /*<The of the CellML variable in the given model to map from. */,
    const int CellMLParameterSet /*<The CellML variable parameter set to map from. */,
    const int fieldUserNumber /*<The user number of the field to map to */,
    const int variableType /*<The field variable type to map to. */,
    const int componentNumber /*<The field variable component number to map to. */,
    const int fieldParameterSet /*<The field variable parameter set to map to. */);
%clear (const int variableIDSize, const char *variableID);

%apply (const int Size, const char *DummyInputString){(const int variableIDSize, const char *variableID)};
/*>Defines a CellML model variable to field variable component map by object. */
CMISSError CMISSCellML_CreateCellMLToFieldMap(const CMISSCellMLType CellML /*<The CellML enviroment. */,
    const int CellMLModelUserNumber /*<The user number of the CellML model to map from. */,
    const int variableIDSize /*<Length of variableID string */,
    const char *variableID /*<The of the CellML variable in the given model to map from. */,
    const int CellMLParameterSet /*<The CellML variable parameter set to map from. */,
    const CMISSFieldType field /*<The field to map to. */,
    const int variableType /*<The field variable type to map to. */,
    const int componentNumber /*<The field variable component number to. */,
    const int fieldParameterSet /*<The field variable parameter set to map to. */);
%clear (const int variableIDSize, const char *variableID);

%apply (const int Size, const char *DummyInputString){(const int variableIDSize, const char *variableID)};
/*>Defines a field variable component to CellML model variable map by user number. */
CMISSError CMISSCellML_CreateFieldToCellMLMapNum(const int regionUserNumber /*<The user number of the region containing the CellML enviroment. */,
    const int CellMLUserNumber /*<The user number of the CellML enviroment. */,
    const int fieldUserNumber /*<The user number of the field to map from. */,
    const int variableType /*<The field variable type to map from. */,
    const int componentNumber /*<The field variable component number to map from. */,
    const int fieldParameterSet /*<The field variable parameter set to map from. */,
    const int CellMLModelUserNumber /*<The user number of the CellML model to map to. */,
    const int variableIDSize /*<Length of variableID string */,
    const char *variableID /*<The of the CellML variable in the given model to map to. */,
    const int CellMLParameterSet /*<The CellML variable parameter set to map to. */);
%clear (const int variableIDSize, const char *variableID);

%apply (const int Size, const char *DummyInputString){(const int variableIDSize, const char *variableID)};
/*>Defines a field variable component to CellML model variable map by object. */
CMISSError CMISSCellML_CreateFieldToCellMLMap(const CMISSCellMLType CellML /*<The CellML enviroment. */,
    const CMISSFieldType field /*<The field to map from. */,
    const int variableType /*<The field variable to map from. */,
    const int componentNumber /*<The component number to map from the given field variable. */,
    const int fieldParameterSet /*<The field variable parameter set to map from. */,
    const int CellMLModelUserNumber /*<The user number of the CellML model to map to. */,
    const int variableIDSize /*<Length of variableID string */,
    const char *variableID /*<The of the CellML variable in the given model to map to. */,
    const int CellMLParameterSet /*<The CellML variable parameter set to map to. */);
%clear (const int variableIDSize, const char *variableID);

/*>Finishes the creation of a CellML environment identified by a user number. */
CMISSError CMISSCellML_CreateFinishNum(const int regionUserNumber /*<The user number of the region containing the CellML environment. */,
    const int CellMLUserNumber /*<The user number of the CellML enviroment to finish creating. */);

/*>Finish the creation of a CellML environment identified by an object. */
CMISSError CMISSCellML_CreateFinish(CMISSCellMLType CellML /*<The CellML environment to finish the creation of. */);

/*>Starts the creation of a CellML environment identified by a user number. */
CMISSError CMISSCellML_CreateStartNum(const int CellMLUserNumber /*<The user number of the CellML enviroment to start creating. */,
    const int regionUserNumber /*<The user number of the Region containing the field to start the CellML enviroment creation on. */);

/*>Start the creation of a CellML environment identified by an object. */
CMISSError CMISSCellML_CreateStart(const int CellMLUserNumber /*<The user number of the CellML enviroment to start creating. */,
    const CMISSRegionType region /*<The region containing the field to start the CellML enviroment creation on. */,
    CMISSCellMLType CellML /*<On return, the created CellML environment. */);

/*>Destroys a CellML environment identified by a user number. */
CMISSError CMISSCellML_DestroyNum(const int regionUserNumber /*<The user number of the region containing the CellML enviroment to destroy. */,
    const int CellMLUserNumber /*<The user number of the CellML enviroment to destroy. */);

/*>Destroy a CellML environment identified by an object. */
CMISSError CMISSCellML_Destroy(CMISSCellMLType CellML /*<The CellML environment to destroy. */);

/*>Finishes the creation of field maps for a CellML environment identified by a user number. */
CMISSError CMISSCellML_FieldMapsCreateFinishNum(const int regionUserNumber /*<The user number of the region containing the CellML environment. */,
    const int CellMLUserNumber /*<The user number of the CellML enviroment to finish creating. */);

/*>Finish the creation of field maps for a CellML environment identified by an object. */
CMISSError CMISSCellML_FieldMapsCreateFinish(CMISSCellMLType CellML /*<The CellML environment to finish the creation of maps for. */);

/*>Starts the creation of field maps for a CellML environment identified by a user number. */
CMISSError CMISSCellML_FieldMapsCreateStartNum(const int regionUserNumber /*<The user number of the Region containing the CellML enviroment. */,
    const int CellMLUserNumber /*<The user number of the CellML enviroment to start creating the maps for. */);

/*>Start the creation of field maps for a CellML environment identified by an object. */
CMISSError CMISSCellML_FieldMapsCreateStart(CMISSCellMLType CellML /*<The CellML environment object to start the creation of maps for. */);

%apply (const int Size, const char *DummyInputString){(const int URISize, const char *URI)};
%apply (int *DummyOutputScalar){(int *modelIndex)};
/*>Imports a specified CellML model as specified by a character URI into a CellML environment identified by a user number. */
CMISSError CMISSCellML_ModelImportNum(const int regionUserNumber /*<The user number of the region containing the CellML enviroment to import the model into. */,
    const int CellMLUserNumber /*<The user number of the CellML enviroment to import the model into. */,
    const int URISize /*<Length of URI string */,
    const char *URI /*<The URI of the CellML model to import. */,
    int *modelIndex /*<On return, the index of the imported model. */);
%clear (const int URISize, const char *URI);
%clear (int *modelIndex);

%apply (const int Size, const char *DummyInputString){(const int URISize, const char *URI)};
%apply (int *DummyOutputScalar){(int *modelIndex)};
/*>Imports a specified CellML model as specified by a character URI into a CellML environment identified by an object. */
CMISSError CMISSCellML_ModelImport(CMISSCellMLType CellML /*<The CellML environment to import the model into. */,
    const int URISize /*<Length of URI string */,
    const char *URI /*<The URI of the CellML model to import. */,
    int *modelIndex /*<On return, the index of the imported model. */);
%clear (const int URISize, const char *URI);
%clear (int *modelIndex);

/*>Finishes the creation of CellML models field for a CellML environment identified by a user number. */
CMISSError CMISSCellML_ModelsFieldCreateFinishNum(const int regionUserNumber /*<The user number of the region containing the CellML enviroment to finish creating. */,
    const int CellMLUserNumber /*<The user number of the CellML enviroment to finish creating the models field for. */);

/*>Finish the creation of CellML models field for a CellML environment identified by an object. */
CMISSError CMISSCellML_ModelsFieldCreateFinish(CMISSCellMLType CellML /*<The CellML environment to finish the creation of the models field for. */);

/*>Starts the creation of CellML models field for a CellML environment identified by a user number. */
CMISSError CMISSCellML_ModelsFieldCreateStartNum(const int regionUserNumber /*<The user number of the region containing the CellML enviroment. */,
    const int CellMLUserNumber /*<The user number of the CellML environment to start creating the models field for. */,
    const int CellMLModelsFieldUserNumber /*<The user number of the CellML models field to start creating. */);

/*>Start the creation of CellML models field for a CellML environment identified by an object. */
CMISSError CMISSCellML_ModelsFieldCreateStart(CMISSCellMLType CellML /*<The CellML environment to start the creation of models field for. */,
    const int CellMLModelsFieldUserNumber /*<The user number of the CellML models field to start creating. */,
    CMISSFieldType field /*<On return, the created CellML models field. */);

%apply (int *DummyOutputScalar){(int *CellMLModelsFieldUserNumber)};
/*>Returns the CellML models field for a CellML environment identified by a user number. */
CMISSError CMISSCellML_ModelsFieldGetNum(const int regionUserNumber /*<The user number of the region containing the CellML enviroment to get the CellML models field for. */,
    const int CellMLUserNumber /*<The user number of the CellML enviroment to get the CellML models field for. */,
    int *CellMLModelsFieldUserNumber /*<On return, the user number of the CellML models field. */);
%clear (int *CellMLModelsFieldUserNumber);

/*>Returns the CellML models field for a CellML environment identified by an object. */
CMISSError CMISSCellML_ModelsFieldGet(CMISSCellMLType CellML /*<The CellML environment to get the models field for. */,
    CMISSFieldType field /*<On return, the CellML models field. Must not be associated on entry. */);

/*>Finishes the creation of CellML state field for a CellML environment identified by a user number. */
CMISSError CMISSCellML_StateFieldCreateFinishNum(const int regionUserNumber /*<The user number of the region containing the CellML environment. */,
    const int CellMLUserNumber /*<The user number of the CellML enviroment to finish creating the state field for. */);

/*>Finish the creation of CellML state field for a CellML environment identified by an object. */
CMISSError CMISSCellML_StateFieldCreateFinish(CMISSCellMLType CellML /*<The CellML environment to finish the creation of the state field for. */);

/*>Starts the creation of CellML state field for a CellML environment identified by a user number. */
CMISSError CMISSCellML_StateFieldCreateStartNum(const int regionUserNumber /*<The user number of the region containing the CellML environment. */,
    const int CellMLUserNumber /*<The user number of the CellML environment to start creating the state field for. */,
    const int CellMLStateFieldUserNumber /*<The user number of the CellML state field to start creating. */);

/*>Start the creation of CellML state field for a CellML environment identified by an object. */
CMISSError CMISSCellML_StateFieldCreateStart(CMISSCellMLType CellML /*<The CellML environment to start the creation of state field for. */,
    const int CellMLStateFieldUserNumber /*<The user number of the CellML state field to start creating. */,
    CMISSFieldType field /*<On return, the created CellML state field. */);

%apply (int *DummyOutputScalar){(int *CellMLStateFieldUserNumber)};
/*>Returns the CellML state field for a CellML environment identified by a user number. */
CMISSError CMISSCellML_StateFieldGetNum(const int regionUserNumber /*<The user number of the region containing the CellML environment. */,
    const int CellMLUserNumber /*<The user number of the CellML enviroment to get the CellML state field for. */,
    int *CellMLStateFieldUserNumber /*<On return, the user number of the CellML state field. */);
%clear (int *CellMLStateFieldUserNumber);

/*>Returns the CellML state field for a CellML environment identified by an object. */
CMISSError CMISSCellML_StateFieldGet(CMISSCellMLType CellML /*<The CellML environment to get the state field for. */,
    CMISSFieldType field /*<On return, the CellML state field. */);

%apply (const int Size, const char *DummyInputString){(const int variableIDSize, const char *variableID)};
%apply (int *DummyOutputScalar){(int *fieldComponent)};
/*>Returns the field component number that corresponds to a character string VariableID for a CellML environment identified by a user number. */
CMISSError CMISSCellML_FieldComponentGetNum(const int regionUserNumber /*<The user number of the region containing the CellML environment. */,
    const int CellMLUserNumber /*<The user number of the CellML enviroment to get the field component for. */,
    const int CellMLModelUserNumber /*<The user number of the CellML model to map fom. */,
    const int CellMLFieldType /*<The type of CellML field to get the component for. \see OPENCMISS_CellMLFieldTypes,OPENCMISS */,
    const int variableIDSize /*<Length of variableID string */,
    const char *variableID /*<The variable ID to get the corresponding field component for. */,
    int *fieldComponent /*<On return, the field component corresponding to the ID. */);
%clear (const int variableIDSize, const char *variableID);
%clear (int *fieldComponent);

%apply (const int Size, const char *DummyInputString){(const int variableIDSize, const char *variableID)};
%apply (int *DummyOutputScalar){(int *fieldComponent)};
/*>Returns the field component number that corresponds to a character string variable ID for a CellML environment identified by an object. */
CMISSError CMISSCellML_FieldComponentGet(CMISSCellMLType CellML /*<The CellML environment to get the field component for. */,
    const int CellMLModelUserNumber /*<The user number of the CellML model to map from. */,
    const int CellMLFieldType /*<The type of CellML field to get the component for. \see OPENCMISS_CellMLFieldTypes,OPENCMISS */,
    const int variableIDSize /*<Length of variableID string */,
    const char *variableID /*<The ID to get the corresponding field component for. */,
    int *fieldComponent /*<On return, the field component corresponding to the ID. */);
%clear (const int variableIDSize, const char *variableID);
%clear (int *fieldComponent);

/*>Finishes the creation of CellML intermediate field for a CellML environment identified by a user number. */
CMISSError CMISSCellML_IntermediateFieldCreateFinishNum(const int regionUserNumber /*<The user number of the region containing the CellML environment. */,
    const int CellMLUserNumber /*<The user number of the CellML enviroment to finish creating the intermediate field for. */);

/*>Finish the creation of CellML intermediate field for a CellML environment identified by an object. */
CMISSError CMISSCellML_IntermediateFieldCreateFinish(CMISSCellMLType CellML /*<The CellML environment to finish the creation of the intermediate field for. */);

/*>Starts the creation of CellML intermediate field for a CellML environment identified by a user number. */
CMISSError CMISSCellML_IntermediateFieldCreateStartNum(const int regionUserNumber /*<The user number of the region containing the CellML environment. */,
    const int CellMLUserNumber /*<The user number of the CellML environment to start creating the intermediate field for. */,
    const int CellMLIntermediateFieldUserNumber /*<The user number of the CellML intermediate field to start creating. */);

/*>Start the creation of CellML intermediate field for a CellML environment identified by an object. */
CMISSError CMISSCellML_IntermediateFieldCreateStart(CMISSCellMLType CellML /*<The CellML environment to start the creation of intermediate field for. */,
    const int CellMLIntermediateFieldUserNumber /*<The user number of the CellML intermediate field to start creating. */,
    CMISSFieldType field /*<On return, the created CellML intermediate field. */);

%apply (int *DummyOutputScalar){(int *CellMLIntermediateFieldUserNumber)};
/*>Returns the CellML intermediate field for a CellML environment identified by a user number. */
CMISSError CMISSCellML_IntermediateFieldGetNum(const int regionUserNumber /*<The user number of the region containing the CellML environment. */,
    const int CellMLUserNumber /*<The user number of the CellML enviroment to get the CellML intermediate field for. */,
    int *CellMLIntermediateFieldUserNumber /*<On return, the user number of the CellML intermediate field. */);
%clear (int *CellMLIntermediateFieldUserNumber);

/*>Returns the CellML intermediate field for a CellML environment identified by an object. */
CMISSError CMISSCellML_IntermediateFieldGet(CMISSCellMLType CellML /*<The CellML environment to get the intermediate field for. */,
    CMISSFieldType field /*<On return, the CellML intermediate field. */);

/*>Finishes the creation of CellML parameters field for a CellML environment identified by a user number. */
CMISSError CMISSCellML_ParametersFieldCreateFinishNum(const int regionUserNumber /*<The user number of the region containing the CellML environment. */,
    const int CellMLUserNumber /*<The user number of the CellML enviroment to finish creating the parameters field for. */);

/*>Finish the creation of CellML parameters field for a CellML environment identified by an object. */
CMISSError CMISSCellML_ParametersFieldCreateFinish(CMISSCellMLType CellML /*<The CellML environment to finish the creation of the parameters field for. */);

/*>Starts the creation of CellML parameters field for a CellML environment identified by a user number. */
CMISSError CMISSCellML_ParametersFieldCreateStartNum(const int regionUserNumber /*<The user number of the region containing the CellML environment. */,
    const int CellMLUserNumber /*<The user number of the CellML environment to start creating the parameters field for. */,
    const int CellMLParametersFieldUserNumber /*<The user number of the CellML parameters field to start creating. */);

/*>Start the creation of CellML parameters field for a CellML environment identified by an object. */
CMISSError CMISSCellML_ParametersFieldCreateStart(CMISSCellMLType CellML /*<The CellML environment to start the creation of parameters field for. */,
    const int CellMLParametersFieldUserNumber /*<The user number of the CellML parameters field to start creating. */,
    CMISSFieldType field /*<On return, the created CellML parameters field. */);

%apply (int *DummyOutputScalar){(int *CellMLParametersFieldUserNumber)};
/*>Returns the CellML parameters field for a CellML environment identified by a user number. */
CMISSError CMISSCellML_ParametersFieldGetNum(const int regionUserNumber /*<The user number of the region containing the CellML environment. */,
    const int CellMLUserNumber /*<The user number of the CellML enviroment to get the CellML parameters field for. */,
    int *CellMLParametersFieldUserNumber /*<On return, the user number of the CellML parameters field. */);
%clear (int *CellMLParametersFieldUserNumber);

/*>Returns the CellML parameters field for a CellML environment identified by an object. */
CMISSError CMISSCellML_ParametersFieldGet(CMISSCellMLType CellML /*<The CellML environment to get the parameters field for. */,
    CMISSFieldType field /*<On return, the CellML parameters field. */);

/*>Validiate and instantiate a CellML environment identified by a user number. */
CMISSError CMISSCellML_GenerateNum(const int regionUserNumber /*<The user number of the region containing the CellML environment. */,
    const int CellMLUserNumber /*<The user number of the CellML enviroment to generate. */);

/*>Validiate and instantiate a CellML environment identified by an object. */
CMISSError CMISSCellML_Generate(CMISSCellMLType CellML /*<The CellML environment to generate. */);

%apply (int *DummyOutputScalar){(int *nodeNumber)};
/*>Returns the computational node number of the running process. */
CMISSError CMISSComputationalNodeNumberGet(int *nodeNumber /*<On return, the computational node number. */);
%clear (int *nodeNumber);

%apply (int *DummyOutputScalar){(int *numberOfNodes)};
/*>Returns the number of computational nodes for the running process. */
CMISSError CMISSComputationalNumberOfNodesGet(int *numberOfNodes /*<On return, the number of computational nodes. */);
%clear (int *numberOfNodes);

/*>CREATE THE HIGHEST LEVEL WORK GROUP (DEFAULT: GROUP_WORLD) */
CMISSError CMISSComputationalWorkGroup_CreateStart(CMISSComputationalWorkGroupType worldWorkGroup /*< */,
    const int numberComputationalNodes /*< */);

/*>GENERATE THE HIERARCHY COMPUTATIONAL ENVIRONMENT BASED ON WORK GROUP TREE */
CMISSError CMISSComputationalWorkGroup_CreateFinish(CMISSComputationalWorkGroupType worldWorkGroup /*< */);

/*>ADD WORK SUB-GROUP TO THE PARENT GROUP BASED ON THE COMPUTATIONAL REQUIREMENTS (CALLED BY THE USER) */
CMISSError CMISSComputationalWorkGroup_SubgroupAdd(CMISSComputationalWorkGroupType parentWorkGroup /*< */,
    const int numberComputationalNodes /*< */,
    CMISSComputationalWorkGroupType addedWorkGroup /*< */);

/*>Set the working group tree in order to performe mesh decomposition */
CMISSError CMISSDecomposition_WorldWorkGroupSet(CMISSDecompositionType decomposition /*< */,
    const CMISSComputationalWorkGroupType worldWorkGroup /*< */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (double *DummyOutputScalar){(double *currentTime)};
%apply (double *DummyOutputScalar){(double *timeIncrement)};
/*>Gets the current time parameters for a time control loop identified by user numbers. */
CMISSError CMISSControlLoop_CurrentTimesGetNum(const int problemUserNumber /*<The user number of the problem to get the control loop for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the control loop for. */,
    double *currentTime /*<On return, the current time of the time control loop. */,
    double *timeIncrement /*<On return, the current time increment of the time control loop. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (double *currentTime);
%clear (double *timeIncrement);

%apply (double *DummyOutputScalar){(double *currentTime)};
%apply (double *DummyOutputScalar){(double *timeIncrement)};
/*>Gets the current time parameters for a time control loop identified by an object. */
CMISSError CMISSControlLoop_CurrentTimesGet(const CMISSControlLoopType controlLoop /*<The control loop to get the current times for. */,
    double *currentTime /*<On return, the current time of the time control loop. */,
    double *timeIncrement /*<On return, the current time increment of the time control loop. */);
%clear (double *currentTime);
%clear (double *timeIncrement);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Destroys a control loop identified by user numbers. */
CMISSError CMISSControlLoop_DestroyNum(const int problemUserNumber /*<The user number of the problem to destroy the control loop for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<The control loop identifiers. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Destroys a control loop identified by an object. */
CMISSError CMISSControlLoop_Destroy(CMISSControlLoopType controlLoop /*<The control loop to destroy. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopRootIdentifiersSize, const int *controlLoopRootIdentifiers)};
%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Returns the specified control loop as indexed by the control loop identifier from the control loop root identified by user numbers. */
CMISSError CMISSControlLoop_ControlLoopGetNum(const int problemUserNumber /*<The user number of the problem to get the control loop for. */,
    const int controlLoopRootIdentifiersSize /*<Length of controlLoopRootIdentifiers */,
    const int *controlLoopRootIdentifiers /*<The root control loop identifiers. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<The control loop identifiers. */,
    CMISSControlLoopType controlLoop /*<On return, the specified control loop. */);
%clear (const int controlLoopRootIdentifiersSize, const int *controlLoopRootIdentifiers);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Returns the specified control loop as indexed by the control loop identifiers from the control loop root. */
CMISSError CMISSControlLoop_ControlLoopGet(const CMISSControlLoopType controlLoopRoot /*<The root control loop. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    int *controlLoopIdentifiers /*<The control loop identifiers. */,
    CMISSControlLoopType *controlLoop /*<On return, the specified control loop. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the iteration parameters for a fixed control loop identified by user numbers. */
CMISSError CMISSControlLoop_IterationsSetNum(const int problemUserNumber /*<The user number of the problem to set the iteration parameters for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<The control loop identifiers. */,
    const int startIteration /*<The start iteration of the fixed control loop to set. */,
    const int stopIteration /*<The stop iteration of the fixed control loop to set. */,
    const int iterationIncrement /*<The iteration increment of the fixed control loop to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the iteration parameters for a fixed control loop identified by an object. */
CMISSError CMISSControlLoop_IterationsSet(CMISSControlLoopType controlLoop /*<The control loop to set the iteration parameters for. */,
    const int startIteration /*<The start iteration of the fixed control loop to set. */,
    const int stopIteration /*<The stop iteration of the fixed control loop to set. */,
    const int iterationIncrement /*<The iteration increment of the fixed control loop to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (const int Size, char *DummyOutputString){(const int labelSize, char *label)};
/*>Returns the character string label for a control loop identified by an user number. */
CMISSError CMISSControlLoop_LabelGetNum(const int problemUserNumber /*<The user number of the problem to set the label for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<The control loop identifiers. */,
    const int labelSize /*<Length of label string */,
    char *label /*<On return, the control loop label. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (const int labelSize, char *label);

%apply (const int Size, char *DummyOutputString){(const int labelSize, char *label)};
/*>Returns the character string label for a control loop identified by an object. */
CMISSError CMISSControlLoop_LabelGet(const CMISSControlLoopType controlLoop /*<The control loop to get the label for. */,
    const int labelSize /*<Length of label string */,
    char *label /*<On return, the region label. */);
%clear (const int labelSize, char *label);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (const int Size, const char *DummyInputString){(const int labelSize, const char *label)};
/*>Sets/changes the character string label for a control loop identified by an user number. */
CMISSError CMISSControlLoop_LabelSetNum(const int problemUserNumber /*<The user number of the problem to set the label for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<The control loop identifiers. */,
    const int labelSize /*<Length of label string */,
    const char *label /*<The region label to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (const int labelSize, const char *label);

%apply (const int Size, const char *DummyInputString){(const int labelSize, const char *label)};
/*>Sets/changes the character string label for a control loop identified by an object. */
CMISSError CMISSControlLoop_LabelSet(const CMISSControlLoopType controlLoop /*<The control loop to set the label for. */,
    const int labelSize /*<Length of label string */,
    const char *label /*<The control loop label to set. */);
%clear (const int labelSize, const char *label);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the maximum iterations for a while control loop identified by user numbers. */
CMISSError CMISSControlLoop_MaximumIterationsSetNum(const int problemUserNumber /*<The user number of the problem to set the maximum iterations for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<The control loop identifiers. */,
    const int maximumIterations /*<The maximum iterations of the while control loop to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the maximum iterations for a while control loop identified by an object. */
CMISSError CMISSControlLoop_MaximumIterationsSet(CMISSControlLoopType controlLoop /*<The control loop to set the maximum iterations for. */,
    const int maximumIterations /*<The maximum iterations of the while control loop to set. */);

/*>Sets/changes the output parameters for a load control loop identified by an object. */
CMISSError CMISSControlLoop_LoadOutputSet(CMISSControlLoopType controlLoop /*<The control loop to set the output parameters for. */,
    const int outputFrequency /*<The output frequency modulo to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the maximum iterations for a while control loop identified by user numbers. */
CMISSError CMISSControlLoop_AbsoluteToleranceSetNum(const int problemUserNumber /*<The user number of the problem to set the maximum iterations for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<The control loop identifiers. */,
    const double absoluteTolerance /*<The absolute tolerance value for a control loop. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the maximum iterations for a while control loop identified by an object. */
CMISSError CMISSControlLoop_AbsoluteToleranceSet(CMISSControlLoopType controlLoop /*<The control loop to set the maximum iterations for. */,
    const double absoluteTolerance /*<The absolute tolerance value for a control loop. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (int *DummyOutputScalar){(int *numberOfSubLoops)};
/*>Returns the number of sub-control loops for a control loop identified by user numbers. */
CMISSError CMISSControlLoop_NumberOfSubLoopsGetNum(const int problemUserNumber /*<The user number of the problem to get the number of sub loops for for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<The control loop identifiers. */,
    int *numberOfSubLoops /*<On return, the number of sub loops for the specified control loop. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (int *numberOfSubLoops);

%apply (int *DummyOutputScalar){(int *numberOfSubLoops)};
/*>Returns the number of sub-control loops for a control loop identified by an object. */
CMISSError CMISSControlLoop_NumberOfSubLoopsGet(const CMISSControlLoopType controlLoop /*<The control loop to get the number of sub loops for. */,
    int *numberOfSubLoops /*<On return, the number of sub loops for the specified control loop. */);
%clear (int *numberOfSubLoops);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the number of sub-control loops for a control loop identified by user numbers. \todo is this really public??? */
CMISSError CMISSControlLoop_NumberOfSubLoopsSetNum(const int problemUserNumber /*<The user number of the problem to set the number of sub loops for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<The control loop identifiers. */,
    const int numberOfSubLoops /*<The number of sub loops for the specified control loop to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the number of sub-control loops for a control loop identified by an object. \todo is this really public??? */
CMISSError CMISSControlLoop_NumberOfSubLoopsSet(CMISSControlLoopType controlLoop /*<The control loop to set the number of sub loops for. */,
    const int numberOfSubLoops /*<The number of sub loops for the specified control loop. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (int *DummyOutputScalar){(int *outputType)};
/*>Returns the output type for a control loop identified by user numbers. */
CMISSError CMISSControlLoop_OutputTypeGetNum(const int problemUserNumber /*<The user number of the problem to get the output type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<The control loop identifiers to get the output type for. */,
    int *outputType /*<On return, the output type of the control loop \see OPENCMISS_ControlLoopOutputTypes */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (int *outputType);

%apply (int *DummyOutputScalar){(int *outputType)};
/*>Returns the output type for a control loop identified by an object. */
CMISSError CMISSControlLoop_OutputTypeGet(const CMISSControlLoopType controlLoop /*<The control loop to get the output type for. */,
    int *outputType /*<On return, the output type of the control loop \see OPENCMISS_ControlLoopOutputTypes */);
%clear (int *outputType);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets the output type for a control loop identified by user numbers. */
CMISSError CMISSControlLoop_OutputTypeSetNum(const int problemUserNumber /*<The user number of the problem to set the output type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<The control loop identifiers to set the output type for. */,
    const int outputType /*<The output type to set \see OPENCMISS_ControlLoopOutputTypes */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets the output type for a control loop identified by an object. */
CMISSError CMISSControlLoop_OutputTypeSet(const CMISSControlLoopType controlLoop /*<The control loop to set the output type for. */,
    const int outputType /*<The output type to set \see OPENCMISS_ControlLoopOutputTypes */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the output parameters for a time control loop identified by user numbers. */
CMISSError CMISSControlLoop_TimeOutputSetNum(const int problemUserNumber /*<The user number of the problem to get the output parameters for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<The control loop identifier. */,
    const int outputFrequency /*<The output frequency modulo to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the output parameters for a time control loop identified by an object. */
CMISSError CMISSControlLoop_TimeOutputSet(CMISSControlLoopType controlLoop /*<The control loop to set the output parameters for. */,
    const int outputFrequency /*<The output frequency modulo to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the input parameters for a time control loop identified by user numbers. */
CMISSError CMISSControlLoop_TimeInputSetNum(const int problemUserNumber /*<The user number of the problem to get the output parameters for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<The control loop identifier. */,
    const int inputOption /*<The output frequency modulo to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the input parameters for a time control loop identified by an object. */
CMISSError CMISSControlLoop_TimeInputSet(CMISSControlLoopType controlLoop /*<The control loop to set the output parameters for. */,
    const int inputOption /*<The output frequency modulo to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (double *DummyOutputScalar){(double *startTime)};
%apply (double *DummyOutputScalar){(double *stopTime)};
%apply (double *DummyOutputScalar){(double *timeIncrement)};
%apply (double *DummyOutputScalar){(double *currentTime)};
%apply (int *DummyOutputScalar){(int *currentLoopIteration)};
%apply (int *DummyOutputScalar){(int *outputIterationNumber)};
/*>Returns the time parameters for a time control loop identified by user numbers. */
CMISSError CMISSControlLoop_TimesGetNum(const int problemUserNumber /*<The user number of the problem to get the time parameters for for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<The control loop identifier. */,
    double *startTime /*<On return, the start time for the time control loop. */,
    double *stopTime /*<On return, the stop time for the time control loop. */,
    double *timeIncrement /*<On return, the time increment for the time control loop. */,
    double *currentTime /*<On return, the current time for the time control loop. */,
    int *currentLoopIteration /*<On return, the iteration number for the current loop. */,
    int *outputIterationNumber /*<On return, the iteration number for the time control loop. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (double *startTime);
%clear (double *stopTime);
%clear (double *timeIncrement);
%clear (double *currentTime);
%clear (int *currentLoopIteration);
%clear (int *outputIterationNumber);

%apply (double *DummyOutputScalar){(double *startTime)};
%apply (double *DummyOutputScalar){(double *stopTime)};
%apply (double *DummyOutputScalar){(double *timeIncrement)};
%apply (double *DummyOutputScalar){(double *currentTime)};
%apply (int *DummyOutputScalar){(int *currentLoopIteration)};
%apply (int *DummyOutputScalar){(int *outputIterationNumber)};
/*>Returns the time parameters for a time control loop identified by an object. */
CMISSError CMISSControlLoop_TimesGet(const CMISSControlLoopType controlLoop /*<The control loop to get the times for. */,
    double *startTime /*<On return, the start time for the time control loop. */,
    double *stopTime /*<On return, the stop time for the time control loop. */,
    double *timeIncrement /*<On return, the time increment for the time control loop. */,
    double *currentTime /*<On return, the current time for the time control loop. */,
    int *currentLoopIteration /*<On return, the iteration number for the current loop. */,
    int *outputIterationNumber /*<On return, the iteration number for the time control loop. */);
%clear (double *startTime);
%clear (double *stopTime);
%clear (double *timeIncrement);
%clear (double *currentTime);
%clear (int *currentLoopIteration);
%clear (int *outputIterationNumber);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the time parameters for a time control loop identified by user numbers. */
CMISSError CMISSControlLoop_TimesSetNum(const int problemUserNumber /*<The user number of the problem to get the time parameters for for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<The control loop identifier. */,
    const double startTime /*<The start time for the time control loop to set. */,
    const double stopTime /*<The stop time for the time control loop to set. */,
    const double timeIncrement /*<The time increment for the time control loop to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the time parameters for a time control loop identified by an object. */
CMISSError CMISSControlLoop_TimesSet(CMISSControlLoopType controlLoop /*<The control loop to set the times for. */,
    const double startTime /*<The start time for the time control loop to set. */,
    const double stopTime /*<The stop time for the time control loop to set. */,
    const double timeIncrement /*<The time increment for the time control loop to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the loop type for a control loop identified by user numbers. \todo is this really public??? */
CMISSError CMISSControlLoop_TypeSetNum(const int problemUserNumber /*<The user number of the problem to set the loop type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<The control loop identifiers. */,
    const int loopType /*<The type of control loop to set. \see OPENCMISS_ProblemControlLoopTypes */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the loop type for a control loop identified by an object. \todo is this really public??? */
CMISSError CMISSControlLoop_TypeSet(CMISSControlLoopType controlLoop /*<The control loop to set the loop type for. */,
    const int loopType /*<The type of control loop to set. \see OPENCMISS_ProblemControlLoopTypes */);

/*>Finishes the creation of a coordinate system identified by a user number. */
CMISSError CMISSCoordinateSystem_CreateFinishNum(const int coordinateSystemUserNumber /*<The user number of the coordinate system to finish creating. */);

/*>Finishes the creation of a coordinate system identified by an object. */
CMISSError CMISSCoordinateSystem_CreateFinish(CMISSCoordinateSystemType coordinateSystem /*<The coordinate system to finish creating. */);

/*>Starts the creation of a coordinate system identified by a user number. */
CMISSError CMISSCoordinateSystem_CreateStartNum(const int coordinateSystemUserNumber /*<The user number of the coordinate system to start creating. */);

/*>Starts the creation of a coordinate system identified by an object. */
CMISSError CMISSCoordinateSystem_CreateStart(const int coordinateSystemUserNumber /*<The user number of the coordinate system to start creating. */,
    CMISSCoordinateSystemType coordinateSystem /*<On return, the coordinate system that has been created. */);

/*>Destroys a coordinate system identified by a user number. */
CMISSError CMISSCoordinateSystem_DestroyNum(const int coordinateSystemUserNumber /*<The user number of the coordinate system to destroy. */);

/*>Destroys a coordinate system identified by an object. */
CMISSError CMISSCoordinateSystem_Destroy(CMISSCoordinateSystemType coordinateSystem /*<The coordinate system to destroy. */);

%apply (int *DummyOutputScalar){(int *coordinateSystemDimension)};
/*>Returns the dimension of a coordinate system identified by a user number. */
CMISSError CMISSCoordinateSystem_DimensionGetNum(const int coordinateSystemUserNumber /*<The user number of the coordinate system to get the dimension for. */,
    int *coordinateSystemDimension /*<On return, the dimension of the coordinate system */);
%clear (int *coordinateSystemDimension);

%apply (int *DummyOutputScalar){(int *coordinateSystemDimension)};
/*>Returns the dimension of a coordinate system identified by an object. */
CMISSError CMISSCoordinateSystem_DimensionGet(const CMISSCoordinateSystemType coordinateSystem /*<The coordinate system to get the dimension for. */,
    int *coordinateSystemDimension /*<On return, the dimension of the coordinate system. */);
%clear (int *coordinateSystemDimension);

/*>Sets/changes the dimension of a coordinate system identified by a user number. */
CMISSError CMISSCoordinateSystem_DimensionSetNum(const int coordinateSystemUserNumber /*<The user number of the coordinate system to set the dimension for. */,
    const int coordinateSystemDimension /*<The dimension of the coordinate system to set. */);

/*>Sets/changes the dimension of a coordinate system identified by an object. */
CMISSError CMISSCoordinateSystem_DimensionSet(CMISSCoordinateSystemType coordinateSystem /*<The coordinate system to set the dimension for. */,
    const int coordinateSystemDimension /*<The dimension of the coordinate system to set. */);

%apply (double *DummyOutputScalar){(double *focus)};
/*>Returns the focus of a coordinate system identified by a user number. */
CMISSError CMISSCoordinateSystem_FocusGetNum(const int coordinateSystemUserNumber /*<The user number of the coordinate system to get the focus for. */,
    double *focus /*<On return, the focus of the coordinate system */);
%clear (double *focus);

%apply (double *DummyOutputScalar){(double *focus)};
/*>Returns the focus of a coordinate system identified by an object. */
CMISSError CMISSCoordinateSystem_FocusGet(const CMISSCoordinateSystemType coordinateSystem /*<The coordinate system to get the focus for. */,
    double *focus /*<On return, the focus of the coordinate system. */);
%clear (double *focus);

/*>Sets/changes the focus of a coordinate system identified by a user number. */
CMISSError CMISSCoordinateSystem_FocusSetNum(const int coordinateSystemUserNumber /*<The user number of the coordinate system to set the focus for. */,
    const double focus /*<The focus of the coordinate system to set. */);

/*>Sets/changes the focus of a coordinate system identified by an object. */
CMISSError CMISSCoordinateSystem_FocusSet(CMISSCoordinateSystemType coordinateSystem /*<The coordinate system to set the focus for. */,
    const double focus /*<The focus of the coordinate system to set. */);

%apply (int *DummyOutputScalar){(int *radialInterpolationType)};
/*>Returns the radial interpolation type of a coordinate system identified by a user number. */
CMISSError CMISSCoordinateSystem_RadialInterpolationGetNum(const int coordinateSystemUserNumber /*<The user number of the coordinate system to get the radial interpolation for. */,
    int *radialInterpolationType /*<On return, the radial interpolation type of the coordinate system \see OPENCMISS_CoordinateRadialInterpolations */);
%clear (int *radialInterpolationType);

%apply (int *DummyOutputScalar){(int *radialInterpolationType)};
/*>Returns the radial interpolation type of a coordinate system identified by an object. */
CMISSError CMISSCoordinateSystem_RadialInterpolationGet(CMISSCoordinateSystemType coordinateSystem /*<The coordinate system to get the radial interpolation type for. */,
    int *radialInterpolationType /*<On return, the radial interpolation type of the coordinate system. \see OPENCMISS_CoordinateRadialInterpolations */);
%clear (int *radialInterpolationType);

/*>Sets/changes the radial interpolation type of a coordinate system identified by a user number. */
CMISSError CMISSCoordinateSystem_RadialInterpolationSetNum(const int coordinateSystemUserNumber /*<The user number of the coordinate system to set the radial interpolation for. */,
    const int radialInterpolationType /*<The radial interpolation type of the coordinate system to set.\see OPENCMISS_CoordinateRadialInterpolations */);

/*>Sets/changes the radial interpolation type of a coordinate system identified by an object. */
CMISSError CMISSCoordinateSystem_RadialInterpolationSet(CMISSCoordinateSystemType coordinateSystem /*<The coordinate system to set the radial interpolation type for. */,
    const int radialInterpolationType /*<The radial interpolation type of the coordinate system to set. \see OPENCMISS_CoordinateRadialInterpolations */);

%apply (int *DummyOutputScalar){(int *coordinateSystemType)};
/*>Returns the type of a coordinate system identified by a user number. */
CMISSError CMISSCoordinateSystem_TypeGetNum(const int coordinateSystemUserNumber /*<The user number of the coordinate system to get the type for. */,
    int *coordinateSystemType /*<On return, the type of the coordinate system. \see OPENCMISS_CoordinateSystemTypes */);
%clear (int *coordinateSystemType);

%apply (int *DummyOutputScalar){(int *coordinateSystemType)};
/*>Returns the type of a coordinate system identified by an object. */
CMISSError CMISSCoordinateSystem_TypeGet(const CMISSCoordinateSystemType coordinateSystem /*<The coordinate system to get the type for. */,
    int *coordinateSystemType /*<On return, the type of the coordinate system. \see OPENCMISS_CoordinateSystemTypes */);
%clear (int *coordinateSystemType);

/*>Sets/changes the type of a coordinate system identified by a user number. */
CMISSError CMISSCoordinateSystem_TypeSetNum(const int coordinateSystemUserNumber /*<The user number of the coordinate system to set the type for. */,
    const int coordinateSystemType /*<The type of the coordinate system to set. \see OPENCMISS_CoordinateSystemTypes */);

/*>Sets/changes the type of a coordinate system identified by an object. */
CMISSError CMISSCoordinateSystem_TypeSet(CMISSCoordinateSystemType coordinateSystem /*<The coordinate system to set the type for. */,
    const int coordinateSystemType /*<The type of the coordinate system to set. \see OPENCMISS_CoordinateSystemTypes */);

%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int originSize, double *origin)};
/*>Returns the origin of a coordinate system identified by a user number. */
CMISSError CMISSCoordinateSystem_OriginGetNum(const int coordinateSystemUserNumber /*<The user number of the coordinate system to get the origin for. */,
    const int originSize /*<Length of origin */,
    double *origin /*<On return, the orign of the coordinate system. */);
%clear (const int originSize, double *origin);

%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int originSize, double *origin)};
/*>Returns the origin of a coordinate system identified by an object. */
CMISSError CMISSCoordinateSystem_OriginGet(const CMISSCoordinateSystemType coordinateSystem /*<The coordinate system to get the origin for. */,
    const int originSize /*<Length of origin */,
    double *origin /*<On return, the origin of the coordinate system. */);
%clear (const int originSize, double *origin);

%apply (const int DIM1, double *IN_ARRAY1){(const int originSize, const double *origin)};
/*>Sets/changes the origin of a coordinate system identified by a user number. */
CMISSError CMISSCoordinateSystem_OriginSetNum(const int coordinateSystemUserNumber /*<The user number of the coordinate system to set the origin for. */,
    const int originSize /*<Length of origin */,
    const double *origin /*<The orign of the coordinate system to set. */);
%clear (const int originSize, const double *origin);

%apply (const int DIM1, double *IN_ARRAY1){(const int originSize, const double *origin)};
/*>Sets/changes the origin of a coordinate system identified by an object. */
CMISSError CMISSCoordinateSystem_OriginSet(const CMISSCoordinateSystemType coordinateSystem /*<The coordinate system to set the origin for. */,
    const int originSize /*<Length of origin */,
    const double *origin /*<The origin of the coordinate system to set. */);
%clear (const int originSize, const double *origin);

%apply (const int DIM1, const int DIM2, double *ARGOUT_FARRAY2){(const int orientationSize1, const int orientationSize2, double *orientation)};
/*>Returns the orientation of a coordinate system identified by a user number. */
CMISSError CMISSCoordinateSystem_OrientationGetNum(const int coordinateSystemUserNumber /*<The user number of the coordinate system to get the orientation for. */,
    const int orientationSize1 /*<Size of dimension 1 of orientation */,
    const int orientationSize2 /*<Size of dimension 2 of orientation */,
    double *orientation /*<On return, the orientation of the coordinate system. */);
%clear (const int orientationSize1, const int orientationSize2, double *orientation);

%apply (const int DIM1, const int DIM2, double *ARGOUT_FARRAY2){(const int orientationSize1, const int orientationSize2, double *orientation)};
/*>Returns the orientation of a coordinate system identified by an object. */
CMISSError CMISSCoordinateSystem_OrientationGet(const CMISSCoordinateSystemType coordinateSystem /*<The coordinate system to get the orientation for. */,
    const int orientationSize1 /*<Size of dimension 1 of orientation */,
    const int orientationSize2 /*<Size of dimension 2 of orientation */,
    double *orientation /*<On return, the orientation of the coordinate system. */);
%clear (const int orientationSize1, const int orientationSize2, double *orientation);

%apply (const int DIM1, const int DIM2, double *IN_FARRAY2){(const int orientationSize1, const int orientationSize2, const double *orientation)};
/*>Sets/changes the orientation of a coordinate system identified by a user number. */
CMISSError CMISSCoordinateSystem_OrientationSetNum(const int coordinateSystemUserNumber /*<The user number of the coordinate system to set the orientation for. */,
    const int orientationSize1 /*<Size of dimension 1 of orientation */,
    const int orientationSize2 /*<Size of dimension 2 of orientation */,
    const double *orientation /*<The orientation of the coordinate system to set. */);
%clear (const int orientationSize1, const int orientationSize2, const double *orientation);

%apply (const int DIM1, const int DIM2, double *IN_FARRAY2){(const int orientationSize1, const int orientationSize2, const double *orientation)};
/*>Sets/changes the orientation of a coordinate system identified by an object. */
CMISSError CMISSCoordinateSystem_OrientationSet(CMISSCoordinateSystemType coordinateSystem /*<The coordinate system to set the orientation for. */,
    const int orientationSize1 /*<Size of dimension 1 of orientation */,
    const int orientationSize2 /*<Size of dimension 2 of orientation */,
    const double *orientation /*<The orientation of the coordinate system to set. */);
%clear (const int orientationSize1, const int orientationSize2, const double *orientation);

/*>Finishes the process of creating data points in a region for data points identified by user number. */
CMISSError CMISSDataPoints_CreateFinishNum(const int regionUserNumber /*<The user number of the region containing the data points to finish the creation of. */);

/*>Finishes the creation of a data points in a region for data points identified by an object. */
CMISSError CMISSDataPoints_CreateFinish(const CMISSDataPointsType dataPoints /*<The data points to finish creating. */);

/*>Starts the process of creating data points in a region for data points identified by user number. */
CMISSError CMISSDataPoints_CreateStartNum(const int regionUserNumber /*<The user number of the region containing the data points to start the creation of. */,
    const int numberOfDataPoints /*<The number of data points to create. */);

/*>Starts the creation of a data points in a region for data points identified by an object. */
CMISSError CMISSDataPoints_CreateStart(const CMISSRegionType region /*<The region to start the creation of data points on. */,
    const int numberOfDataPoints /*<The number of data points to create. */,
    CMISSDataPointsType dataPoints /*<On return, the created data points. */);

/*>Starts the creation of a data points in a region for data points identified by an object. */
CMISSError CMISSDataPoints_CreateStartInterface(const CMISSInterfaceType interface /*<The interface to start the creation of data points on. */,
    const int numberOfDataPoints /*<The number of data points to create. */,
    const CMISSDataPointsType dataPoints /*<On return, the created data points. */);

/*>Destroys the data points in a region for data points identified by user number. */
CMISSError CMISSDataPoints_DestroyNum(const int regionUserNumber /*<The user number of the region containing the data points to destroy. */);

/*>Destroys the data points in a region for data points identified by an object. */
CMISSError CMISSDataPoints_Destroy(const CMISSDataPointsType dataPoints /*<The data points to destroy. */);

%apply (int *DummyOutputScalar){(int *numberOfDataPoints)};
/*>Returns the number of data points */
CMISSError CMISSDataPoints_NumberOfDataPointsGetNum(const int regionUserNumber /*<The user number of the region containing the data points to get data point count for. */,
    int *numberOfDataPoints /*<On return, the number of data points */);
%clear (int *numberOfDataPoints);

%apply (int *DummyOutputScalar){(int *numberOfDataPoints)};
/*>Returns the number of data points */
CMISSError CMISSDataPoints_NumberOfDataPointsGet(const CMISSDataPointsType dataPoints /*<The data points get data point count for. */,
    int *numberOfDataPoints /*<The number of data points */);
%clear (int *numberOfDataPoints);

%apply (const int Size, char *DummyOutputString){(const int labelSize, char *label)};
/*>Returns the character label for a data point in a set of data points identified by user number. */
CMISSError CMISSDataPoints_LabelGetNum(const int regionUserNumber /*<The user number of the region containing the data points to get the label for. */,
    const int dataPointGlobalNumber /*<The global number of the data points to get the label for. */,
    const int labelSize /*<Length of label string */,
    char *label /*<On return, the label for the data point. */);
%clear (const int labelSize, char *label);

%apply (const int Size, char *DummyOutputString){(const int labelSize, char *label)};
/*>Returns the character label for a data point in a set of data points identified by an object. */
CMISSError CMISSDataPoints_LabelGet(const CMISSDataPointsType dataPoints /*<The data points to get the label for. */,
    const int dataPointGlobalNumber /*<The global number of the data points to get the label for. */,
    const int labelSize /*<Length of label string */,
    char *label /*<On return, the label for the data point. */);
%clear (const int labelSize, char *label);

%apply (const int Size, const char *DummyInputString){(const int labelSize, const char *label)};
/*>Sets/changes the character label for a data point in a set of data points identified by user number. */
CMISSError CMISSDataPoints_LabelSetNum(const int regionUserNumber /*<The user number of the region containing the data points to set the label for. */,
    const int dataPointGlobalNumber /*<The global number of the data points to set the label for. */,
    const int labelSize /*<Length of label string */,
    const char *label /*<The label for the data point to set. */);
%clear (const int labelSize, const char *label);

%apply (const int Size, const char *DummyInputString){(const int labelSize, const char *label)};
/*>Sets/changes the character label for a data point in a set of data points identified by an object. */
CMISSError CMISSDataPoints_LabelSet(const CMISSDataPointsType dataPoints /*<The data points to set the label for. */,
    const int dataPointGlobalNumber /*<The global number of the data points to set the label for. */,
    const int labelSize /*<Length of label string */,
    const char *label /*<The label for the data point to set. */);
%clear (const int labelSize, const char *label);

%apply (int *DummyOutputScalar){(int *dataPointUserNumber)};
/*>Returns the user number for a data point in a set of data points identified by user number. */
CMISSError CMISSDataPoints_UserNumberGetNum(const int regionUserNumber /*<The user number of the region containing the data points to get the data point user number for. */,
    const int dataPointGlobalNumber /*<The global number of the data points to get the data point user number for. */,
    int *dataPointUserNumber /*<On return, the user number for the data point. */);
%clear (int *dataPointUserNumber);

%apply (int *DummyOutputScalar){(int *dataPointUserNumber)};
/*>Returns the user number for a data point in a set of data points identified by an object. */
CMISSError CMISSDataPoints_UserNumberGet(const CMISSDataPointsType dataPoints /*<The data points to get the data point user number for. */,
    const int dataPointGlobalNumber /*<The global number of the data points to get the data point user number for. */,
    int *dataPointUserNumber /*<On return, the user number for the data point. */);
%clear (int *dataPointUserNumber);

/*>Sets/changes the user number for a data point in a set of data points identified by user number. */
CMISSError CMISSDataPoints_UserNumberSetNum(const int regionUserNumber /*<The user number of the region containing the data points to set the data point user number for. */,
    const int dataPointGlobalNumber /*<The global number of the data points to set the data point user number for. */,
    const int dataPointUserNumber /*<The user number for the data point to set. */);

/*>Sets/changes the user number for a data point in a set of data points identified by an object. */
CMISSError CMISSDataPoints_UserNumberSet(const CMISSDataPointsType dataPoints /*<The data points to set the data point user number for. */,
    const int dataPointGlobalNumber /*<The global number of the data points to set the data point user number for. */,
    const int dataPointUserNumber /*<The user number for the data point to set. */);

%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int dataPointValuesSize, double *dataPointValues)};
/*>Returns the values for a data point in a set of data points identified by user number. */
CMISSError CMISSDataPoints_ValuesGetNum(const int regionUserNumber /*<The user number of the region containing the data points to get the data point user number for. */,
    const int dataPointGlobalNumber /*<The global number of the data points to get the data point values for. */,
    const int dataPointValuesSize /*<Length of dataPointValues */,
    double *dataPointValues /*<On return, the values for the data point. */);
%clear (const int dataPointValuesSize, double *dataPointValues);

%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int dataPointValuesSize, double *dataPointValues)};
/*>Returns the values for a data point in a set of data points identified by an object. */
CMISSError CMISSDataPoints_ValuesGet(const CMISSDataPointsType dataPoints /*<The data points to get the data point user number for. */,
    const int dataPointGlobalNumber /*<The global number of the data points to get the data point user number for. */,
    const int dataPointValuesSize /*<Length of dataPointValues */,
    double *dataPointValues /*<On return, the values for the data point. */);
%clear (const int dataPointValuesSize, double *dataPointValues);

%apply (const int DIM1, double *IN_ARRAY1){(const int dataPointValuesSize, const double *dataPointValues)};
/*>Sets/changes the values for a data point in a set of data points identified by user number. */
CMISSError CMISSDataPoints_ValuesSetNum(const int regionUserNumber /*<The user number of the region containing the data points to set the data point user number for. */,
    const int dataPointGlobalNumber /*<The global number of the data points to set the data point user number for. */,
    const int dataPointValuesSize /*<Length of dataPointValues */,
    const double *dataPointValues /*<The values for the data point to set. */);
%clear (const int dataPointValuesSize, const double *dataPointValues);

%apply (const int DIM1, double *IN_ARRAY1){(const int dataPointValuesSize, const double *dataPointValues)};
/*>Sets/changes the values for a data point in a set of data points identified by an object. */
CMISSError CMISSDataPoints_ValuesSet(const CMISSDataPointsType dataPoints /*<The data points to set the data point user number for. */,
    const int dataPointGlobalNumber /*<The global number of the data points to set the data point user number for. */,
    const int dataPointValuesSize /*<Length of dataPointValues */,
    const double *dataPointValues /*<The values for the data point to set. */);
%clear (const int dataPointValuesSize, const double *dataPointValues);

%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int dataPointWeightsSize, double *dataPointWeights)};
/*>Returns the weights for a data point in a set of data points identified by user number. */
CMISSError CMISSDataPoints_WeightsGetNum(const int regionUserNumber /*<The user number of the region containing the data points to get the data point user number for. */,
    const int dataPointGlobalNumber /*<The global number of the data points to get the data point user number for. */,
    const int dataPointWeightsSize /*<Length of dataPointWeights */,
    double *dataPointWeights /*<On return, the weights for the data point. */);
%clear (const int dataPointWeightsSize, double *dataPointWeights);

%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int dataPointWeightsSize, double *dataPointWeights)};
/*>Returns the weights for a data point in a set of data points identified by an object. */
CMISSError CMISSDataPoints_WeightsGet(const CMISSDataPointsType dataPoints /*<The data points to get the data point user number for. */,
    const int dataPointGlobalNumber /*<The global number of the data points to get the data point user number for. */,
    const int dataPointWeightsSize /*<Length of dataPointWeights */,
    double *dataPointWeights /*<On return, the weights for the data point. */);
%clear (const int dataPointWeightsSize, double *dataPointWeights);

%apply (const int DIM1, double *IN_ARRAY1){(const int dataPointWeightsSize, const double *dataPointWeights)};
/*>Sets/changes the weights for a data point in a set of data points identified by user number. */
CMISSError CMISSDataPoints_WeightsSetNum(const int regionUserNumber /*<The user number of the region containing the data points to set the data point user number for. */,
    const int dataPointGlobalNumber /*<The global number of the data points to set the data point user number for. */,
    const int dataPointWeightsSize /*<Length of dataPointWeights */,
    const double *dataPointWeights /*<The weights for the data point to set. */);
%clear (const int dataPointWeightsSize, const double *dataPointWeights);

%apply (const int DIM1, double *IN_ARRAY1){(const int dataPointWeightsSize, const double *dataPointWeights)};
/*>Sets/changes the weights for a data point in a set of data points identified by an object. */
CMISSError CMISSDataPoints_WeightsSet(const CMISSDataPointsType dataPoints /*<The data points to set the data point user number for. */,
    const int dataPointGlobalNumber /*<The global number of the data points to set the data point user number for. */,
    const int dataPointWeightsSize /*<Length of dataPointWeights */,
    const double *dataPointWeights /*<The weights for the data point to set. */);
%clear (const int dataPointWeightsSize, const double *dataPointWeights);

%apply (double *DummyOutputScalar){(double *absoluteTolerance)};
/*>Returns the absolute tolerance of data projection identified by a region user number. */
CMISSError CMISSDataProjection_AbsoluteToleranceGetNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection to get starting xi for. */,
    const int regionUserNumber /*<The region user number of the data projection to get tolerance for. */,
    double *absoluteTolerance /*<On exit, the absolute tolerance of the specified data projection */);
%clear (double *absoluteTolerance);

%apply (double *DummyOutputScalar){(double *absoluteTolerance)};
/*>Returns the absolute tolerance of data projection identified an object. */
CMISSError CMISSDataProjection_AbsoluteToleranceGet(CMISSDataProjectionType dataProjection /*<The data projection to get tolerance for. */,
    double *absoluteTolerance /*<On exit, the absolute tolerance of the specified data projection */);
%clear (double *absoluteTolerance);

/*>Sets/changes the absolute tolerance of data projection identified by a region user number. */
CMISSError CMISSDataProjection_AbsoluteToleranceSetNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection to get starting xi for. */,
    const int regionUserNumber /*<The region use number of data projection to set tolerance for. */,
    const double absoluteTolerance /*<the absolute tolerance to set */);

/*>Sets/changes the absolute tolerance of data projection identified an object. */
CMISSError CMISSDataProjection_AbsoluteToleranceSet(CMISSDataProjectionType dataProjection /*<The data projection to set tolerance for. */,
    const double absoluteTolerance /*<the absolute tolerance to set */);

/*>Finishes the creation of a new data projection identified by a region user number. */
CMISSError CMISSDataProjection_CreateFinishNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection to get starting xi for. */,
    const int regionUserNumber /*<The user number of the region containing the data points which associates to the data projection to finish the creation of. */);

/*>Finishes the creation of a new data projection identified by an object. */
CMISSError CMISSDataProjection_CreateFinish(CMISSDataProjectionType dataProjection /*<The data projection to finish the creation of */);

/*>Starts the creation of a new data projection for a data projection identified by a region user number. */
CMISSError CMISSDataProjection_CreateStartNum(const int dataProjectionUserNumber /*<The data projection user number. */,
    const int dataPointRegionUserNumber /*<The region user number of the data points to be projected. */,
    const int meshUserNumber /*<The field user number of the geometric field data points are be projected on. */,
    const int meshRegionUserNumber /*<The region user number of the geometric field data points are be projected on. */);

/*>Starts the creation of a new data projection for a data projection identified by an object. */
CMISSError CMISSDataProjection_CreateStart(const int dataProjectionUserNumber /*<The data projection user number. */,
    const CMISSDataPointsType dataPoints /*<The data points to be projected */,
    const CMISSMeshType mesh /*<The mesh where data points is projected on */,
    CMISSDataProjectionType dataProjection /*<On exit, the newly created data projection. */);

/*>Destroys a data projection identified by region user number. */
CMISSError CMISSDataProjection_DestroyNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection to get starting xi for. */,
    const int regionUserNumber /*<The region user number of the data projection to destroy. */);

/*>Destroys a data projection identified by an object. */
CMISSError CMISSDataProjection_Destroy(CMISSDataProjectionType dataProjection /*<The data projection to destroy. */);

/*>Evaluate the data points position in a field based on data projection in a region, identified by user number */
CMISSError CMISSDataProjection_DataPointsPositionEvaluateRegionNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection */,
    const int regionUserNumber /*<The region user number of the data projection and field */,
    const int fieldUserNumber /*<The field user number of the field to be interpolated */,
    const int fieldVariableType /*<The field variable type to be interpolated */);

/*>Evaluate the data points position in a field based on data projection in an interface, identified by user number */
CMISSError CMISSDataProjection_DataPointsPositionEvaluateInterfaceNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection */,
    const int parentRegionUserNumber /*<The parent region number of the interface for the data projection */,
    const int interfaceUserNumber /*<The interface number for the data projection */,
    const int fieldUserNumber /*<The field user number of the field to be interpolated */,
    const int fieldVariableType /*<The field variable type to be interpolated */);

/*>Evaluate the data points position in a field based on data projection, identified by object */
CMISSError CMISSDataProjection_DataPointsPositionEvaluate(CMISSDataProjectionType dataProjection /*<The data projection used to evaluate data points position */,
    const CMISSFieldType field /*<The field to interpolate */,
    const int fieldVariableType /*<The field variable type to be interpolated */);

%apply (const int DIM1, int *IN_ARRAY1){(const int candidateElementsSize, const int *candidateElements)};
%apply (const int DIM1, int *IN_ARRAY1){(const int localFaceLineNumbersSize, const int *localFaceLineNumbers)};
/*>Evaluate the data points position in a field based on data projection in a region, identified by user number */
CMISSError CMISSDataProjection_ProjectionCandidatesSetRegionNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection */,
    const int regionUserNumber /*<The region user number of the data projection and field */,
    const int candidateElementsSize /*<Length of candidateElements */,
    const int *candidateElements /*<The candidate element for the projection */,
    const int localFaceLineNumbersSize /*<Length of localFaceLineNumbers */,
    const int *localFaceLineNumbers /*<The local face/line number for the candidate elements */);
%clear (const int candidateElementsSize, const int *candidateElements);
%clear (const int localFaceLineNumbersSize, const int *localFaceLineNumbers);

%apply (const int DIM1, int *IN_ARRAY1){(const int candidateElementsSize, const int *candidateElements)};
%apply (const int DIM1, int *IN_ARRAY1){(const int localFaceLineNumbersSize, const int *localFaceLineNumbers)};
/*>Evaluate the data points position in a field based on data projection in an interface, identified by user number */
CMISSError CMISSDataProjection_ProjectionCandidatesSetInterfaceNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection */,
    const int parentRegionUserNumber /*<The parent region number of the interface for the data projection */,
    const int interfaceUserNumber /*<The interface number for the data projection */,
    const int candidateElementsSize /*<Length of candidateElements */,
    const int *candidateElements /*<The candidate element for the projection */,
    const int localFaceLineNumbersSize /*<Length of localFaceLineNumbers */,
    const int *localFaceLineNumbers /*<The local face/line number for the candidate elements */);
%clear (const int candidateElementsSize, const int *candidateElements);
%clear (const int localFaceLineNumbersSize, const int *localFaceLineNumbers);

%apply (const int DIM1, int *IN_ARRAY1){(const int candidateElementsSize, const int *candidateElements)};
%apply (const int DIM1, int *IN_ARRAY1){(const int localFaceLineNumbersSize, const int *localFaceLineNumbers)};
/*>Evaluate the data points position in a field based on data projection, identified by object */
CMISSError CMISSDataProjection_ProjectionCandidatesSet(CMISSDataProjectionType dataProjection /*<The data projection used to evaluate data points position */,
    const int candidateElementsSize /*<Length of candidateElements */,
    const int *candidateElements /*<The candidate element for the projection */,
    const int localFaceLineNumbersSize /*<Length of localFaceLineNumbers */,
    const int *localFaceLineNumbers /*<The local face/line number for the candidate elements */);
%clear (const int candidateElementsSize, const int *candidateElements);
%clear (const int localFaceLineNumbersSize, const int *localFaceLineNumbers);

/*>Evaluate a data projection identified by a region user number. */
CMISSError CMISSDataProjection_ProjectionEvaluateNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection to get starting xi for. */,
    const int dataPointsRegionUserNumber /*<The region user number of the data projection to evaluate. */,
    const int projectionFieldUserNumber /*<The field user number of the field data points are be projected on. */,
    const int projectionFieldRegionUserNumber /*<The region user number of the field data points are be projected on. */);

/*>Evaluate a data projection identified by an object. */
CMISSError CMISSDataProjection_ProjectionEvaluate(CMISSDataProjectionType dataProjection /*<The data projection to evaluate. */,
    const CMISSFieldType projectionField /*<The field data points is projected on */);

%apply (double *DummyOutputScalar){(double *maximumIterationUpdate)};
/*>Returns the relative tolerance of data projection identified by a region user number. */
CMISSError CMISSDataProjection_MaximumIterationUpdateGetNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection to get starting xi for. */,
    const int regionUserNumber /*<The region user number of the data projection to get tolerance for. */,
    double *maximumIterationUpdate /*<On exit, the maximum iteration update of the specified data projection */);
%clear (double *maximumIterationUpdate);

%apply (double *DummyOutputScalar){(double *maximumIterationUpdate)};
/*>Returns the relative tolerance of data projection identified an object. */
CMISSError CMISSDataProjection_MaximumIterationUpdateGet(CMISSDataProjectionType dataProjection /*<The data projection to get tolerance for. */,
    double *maximumIterationUpdate /*<On exit, the maximum iteration update of the specified data projection */);
%clear (double *maximumIterationUpdate);

/*>Sets/changes the relative tolerance of data projection identified by a region user number. */
CMISSError CMISSDataProjection_MaximumIterationUpdateSetNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection to get starting xi for. */,
    const int regionUserNumber /*<The region use number of data projection to set tolerance for. */,
    const double maximumIterationUpdate /*<the maximum iteration update to set */);

/*>Sets/changes the relative tolerance of data projection identified an object. */
CMISSError CMISSDataProjection_MaximumIterationUpdateSet(CMISSDataProjectionType dataProjection /*<The data projection to set tolerance for. */,
    const double maximumIterationUpdate /*<the maximum iteration update to set */);

%apply (int *DummyOutputScalar){(int *maximumNumberOfIterations)};
/*>Returns the maximum number of iterations of data projection identified by a region user number. */
CMISSError CMISSDataProjection_MaximumNumberOfIterationsGetNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection to get starting xi for. */,
    const int regionUserNumber /*<The region user number of the data projection to get maximum number of iterations for. */,
    int *maximumNumberOfIterations /*<On exit, the maximum number of iterations of the specified data projection */);
%clear (int *maximumNumberOfIterations);

%apply (double *DummyOutputScalar){(double *ProjectionDistance)};
/*>Returns the projection distance for a data point in a set of data points identified by user number. */
CMISSError CMISSDataProjection_ResultDistanceGetNum(const int regionUserNumber /*<The user number of the region containing the data points to get attributes for. */,
    const int dataProjectionUserNumber /*<The user number of the data projection containing the data points to get attributes for. */,
    const int dataPointUserNumber /*<The user number of the data points to get attributes for. */,
    double *ProjectionDistance /*<On return, the projection distance for the data point. */);
%clear (double *ProjectionDistance);

%apply (double *DummyOutputScalar){(double *ProjectionDistance)};
/*>Returns the projection distance for a data point in a set of data points identified by an object. */
CMISSError CMISSDataProjection_ResultDistanceGet(const CMISSDataProjectionType dataProjection /*<The data projection to get attributes for. */,
    const int dataPointUserNumber /*<The user number of the data points to get attributes for. */,
    double *ProjectionDistance /*<On return, the projection distance for the data point. */);
%clear (double *ProjectionDistance);

%apply (int *DummyOutputScalar){(int *ProjectionElementNumber)};
/*>Returns the projection element number for a data point in a set of data points identified by user number. */
CMISSError CMISSDataProjection_ResultElementNumberGetNum(const int regionUserNumber /*<The user number of the region containing the data points to get attributes for. */,
    const int dataProjectionUserNumber /*<The user number of the data projection containing the data points to get attributes for. */,
    const int dataPointUserNumber /*<The user number of the data points to get attributes for. */,
    int *ProjectionElementNumber /*<On return, the projection element number for the data point. */);
%clear (int *ProjectionElementNumber);

%apply (int *DummyOutputScalar){(int *ProjectionElementNumber)};
/*>Returns the projection element number for a data point in a set of data points identified by an object. */
CMISSError CMISSDataProjection_ResultElementNumberGet(const CMISSDataProjectionType dataProjection /*<The data projection to get attributes for. */,
    const int dataPointUserNumber /*<The user number of the data points to get attributes for. */,
    int *ProjectionElementNumber /*<On return, the projection element number for the data point. */);
%clear (int *ProjectionElementNumber);

%apply (int *DummyOutputScalar){(int *ProjectionElementFaceNumber)};
/*>Returns the projection element face number for a data point in a set of data points identified by user number. */
CMISSError CMISSDataProjection_ResultElementFaceNumberGetNum(const int regionUserNumber /*<The user number of the region containing the data points to get attributes for. */,
    const int dataProjectionUserNumber /*<The user number of the data projection containing the data points to get attributes for. */,
    const int dataPointUserNumber /*<The user number of the data points to get attributes for. */,
    int *ProjectionElementFaceNumber /*<On return, the projection element face number for the data point. */);
%clear (int *ProjectionElementFaceNumber);

%apply (int *DummyOutputScalar){(int *ProjectionElementFaceNumber)};
/*>Returns the projection element face number for a data point in a set of data points identified by an object. */
CMISSError CMISSDataProjection_ResultElementFaceNumberGet(const CMISSDataProjectionType dataProjection /*<The data projection to get attributes for. */,
    const int dataPointUserNumber /*<The user number of the data points to get attributes for. */,
    int *ProjectionElementFaceNumber /*<On return, the projection element face number for the data point. */);
%clear (int *ProjectionElementFaceNumber);

%apply (int *DummyOutputScalar){(int *ProjectionElementLineNumber)};
/*>Returns the projection element line number for a data point in a set of data points identified by user number. */
CMISSError CMISSDataProjection_ResultElementLineNumberGetNum(const int regionUserNumber /*<The user number of the region containing the data points to get attributes for. */,
    const int dataProjectionUserNumber /*<The user number of the data projection containing the data points to get attributes for. */,
    const int dataPointUserNumber /*<The user number of the data points to get attributes for. */,
    int *ProjectionElementLineNumber /*<On return, the projection element line number for the data point. */);
%clear (int *ProjectionElementLineNumber);

%apply (int *DummyOutputScalar){(int *ProjectionElementLineNumber)};
/*>Returns the projection element line number for a data point in a set of data points identified by an object. */
CMISSError CMISSDataProjection_ResultElementLineNumberGet(const CMISSDataProjectionType dataProjection /*<The data projection to get attributes for. */,
    const int dataPointUserNumber /*<The user number of the data points to get attributes for. */,
    int *ProjectionElementLineNumber /*<On return, the projection element line number for the data point. */);
%clear (int *ProjectionElementLineNumber);

%apply (int *DummyOutputScalar){(int *ProjectionExitTag)};
/*>Returns the projection exit tag for a data point in a set of data points identified by user number. */
CMISSError CMISSDataProjection_ResultExitTagGetNum(const int regionUserNumber /*<The user number of the region containing the data points to get attributes for. */,
    const int dataProjectionUserNumber /*<The user number of the data projection containing the data points to get attributes for. */,
    const int dataPointUserNumber /*<The user number of the data points to get attributes for. */,
    int *ProjectionExitTag /*<On return, the projection exit tag for the data point. */);
%clear (int *ProjectionExitTag);

%apply (int *DummyOutputScalar){(int *ProjectionExitTag)};
/*>Returns the projection exit tag for a data point in a set of data points identified by an object. */
CMISSError CMISSDataProjection_ResultExitTagGet(const CMISSDataProjectionType dataProjection /*<The data projection to get attributes for. */,
    const int dataPointUserNumber /*<The user number of the data points to get attributes for. */,
    int *ProjectionExitTag /*<On return, the projection exit tag for the data point. */);
%clear (int *ProjectionExitTag);

%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int ProjectionXiSize, double *ProjectionXi)};
/*>Returns the projection xi for a data point in a set of data points identified by user number. */
CMISSError CMISSDataProjection_ResultXiGetNum(const int regionUserNumber /*<The user number of the region containing the data points to get attributes for. */,
    const int dataProjectionUserNumber /*<The user number of the data projection containing the data points to get attributes for. */,
    const int dataPointUserNumber /*<The user number of the data points to get attributes for. */,
    const int ProjectionXiSize /*<Length of ProjectionXi */,
    double *ProjectionXi /*<On return, the projection xi for the data point. */);
%clear (const int ProjectionXiSize, double *ProjectionXi);

%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int ProjectionXiSize, double *ProjectionXi)};
/*>Returns the projection xi for a data point in a set of data points identified by an object. */
CMISSError CMISSDataProjection_ResultXiGet(const CMISSDataProjectionType dataProjection /*<The data projection to get attributes for. */,
    const int dataPointUserNumber /*<The user number of the data points to get attributes for. */,
    const int ProjectionXiSize /*<Length of ProjectionXi */,
    double *ProjectionXi /*<On return, the projection xi for the data point. */);
%clear (const int ProjectionXiSize, double *ProjectionXi);

%apply (const int DIM1, double *IN_ARRAY1){(const int ProjectionXiSize, const double *ProjectionXi)};
/*>Sets the projection xi for a data point in a set of data points identified by user number. */
CMISSError CMISSDataProjection_ResultXiSetNum(const int regionUserNumber /*<The user number of the region containing the data points to set attributes for. */,
    const int dataProjectionUserNumber /*<The user number of the data projection containing the data points to set attributes for. */,
    const int dataPointUserNumber /*<The user number of the data points to set attributes for. */,
    const int ProjectionXiSize /*<Length of ProjectionXi */,
    const double *ProjectionXi /*<On return, the projection xi for the data point. */);
%clear (const int ProjectionXiSize, const double *ProjectionXi);

%apply (const int DIM1, double *IN_ARRAY1){(const int ProjectionXiSize, const double *ProjectionXi)};
/*>Sets the projection xi for a data point in a set of data points identified by an object. */
CMISSError CMISSDataProjection_ResultXiSet(const CMISSDataProjectionType dataProjection /*<The data projection to set attributes for. */,
    const int dataPointUserNumber /*<The user number of the data points to set attributes for */,
    const int ProjectionXiSize /*<Length of ProjectionXi */,
    const double *ProjectionXi /*<On return, the projection xi for the data point. */);
%clear (const int ProjectionXiSize, const double *ProjectionXi);

%apply (int *DummyOutputScalar){(int *maximumNumberOfIterations)};
/*>Returns the maximum number of iterations of data projection identified an object. */
CMISSError CMISSDataProjection_MaximumNumberOfIterationsGet(CMISSDataProjectionType dataProjection /*<The data projection to get maximum number of iterations for. */,
    int *maximumNumberOfIterations /*<On exit, the maximum number of iterations of the specified data projection */);
%clear (int *maximumNumberOfIterations);

/*>Sets/changes the maximum number of iterations of data projection identified by a region user number. */
CMISSError CMISSDataProjection_MaximumNumberOfIterationsSetNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection to get starting xi for. */,
    const int regionUserNumber /*<The region use number of data projection to set maximum number of iterations for. */,
    const int maximumNumberOfIterations /*<the maximum number of iterations to set */);

/*>Sets/changes the maximum number of iterations of data projection identified an object. */
CMISSError CMISSDataProjection_MaximumNumberOfIterationsSet(CMISSDataProjectionType dataProjection /*<The data projection to set maximum number of iterations for. */,
    const int maximumNumberOfIterations /*<the maximum number of iterations to set */);

%apply (int *DummyOutputScalar){(int *numberOfClosestElements)};
/*>Returns the number of closest elements of data projection identified by a region user number. */
CMISSError CMISSDataProjection_NumberOfClosestElementsGetNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection to get starting xi for. */,
    const int regionUserNumber /*<The region user number of the data projection to get number of closest elements for. */,
    int *numberOfClosestElements /*<On exit, the number of closest elements of the specified data projection */);
%clear (int *numberOfClosestElements);

%apply (int *DummyOutputScalar){(int *numberOfClosestElements)};
/*>Returns the number of closest elements of data projection identified an object. */
CMISSError CMISSDataProjection_NumberOfClosestElementsGet(CMISSDataProjectionType dataProjection /*<The data projection to get number of closest elements for. */,
    int *numberOfClosestElements /*<On exit, the number of closest elements of the specified data projection */);
%clear (int *numberOfClosestElements);

/*>Sets/changes the number of closest elements of data projection identified by a region user number. */
CMISSError CMISSDataProjection_NumberOfClosestElementsSetNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection to get starting xi for. */,
    const int regionUserNumber /*<The region use number of data projection to set number of closest elements for. */,
    const int numberOfClosestElements /*<the number of closest elements to set */);

/*>Sets/changes the number of closest elements of data projection identified an object. */
CMISSError CMISSDataProjection_NumberOfClosestElementsSet(CMISSDataProjectionType dataProjection /*<The data projection to set number of closest elements for. */,
    const int numberOfClosestElements /*<the number of closest elements to set */);

%apply (int *DummyOutputScalar){(int *projectionType)};
/*>Returns the projection type of data projection identified by a region user number. */
CMISSError CMISSDataProjection_ProjectionTypeGetNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection to get starting xi for. */,
    const int regionUserNumber /*<The region user number of the data projection to get projection type for. */,
    int *projectionType /*<On exit, the projection type of the specified data projection */);
%clear (int *projectionType);

%apply (int *DummyOutputScalar){(int *projectionType)};
/*>Returns the projection type of data projection identified an object. */
CMISSError CMISSDataProjection_ProjectionTypeGet(CMISSDataProjectionType dataProjection /*<The data projection to get projection type for. */,
    int *projectionType /*<On exit, the projection type of the specified data projection */);
%clear (int *projectionType);

/*>Sets/changes the projection type of data projection identified by a region user number. */
CMISSError CMISSDataProjection_ProjectionTypeSetNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection to get starting xi for. */,
    const int regionUserNumber /*<The region use number of data projection to set projection type for. */,
    const int projectionType /*<the projection type to set */);

/*>Sets/changes the projection type of data projection identified an object. */
CMISSError CMISSDataProjection_ProjectionTypeSet(CMISSDataProjectionType dataProjection /*<The data projection to set projection type for. */,
    const int projectionType /*<the projection type to set */);

%apply (double *DummyOutputScalar){(double *relativeTolerance)};
/*>Returns the relative tolerance of data projection identified by a data projection user number and a region user number. */
CMISSError CMISSDataProjection_RelativeToleranceGetNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection to get starting xi for. */,
    const int regionUserNumber /*<The region user number of the data projection to get relative tolerance for. */,
    double *relativeTolerance /*<On exit, the absolute relative tolerance of the specified data projection */);
%clear (double *relativeTolerance);

%apply (double *DummyOutputScalar){(double *relativeTolerance)};
/*>Returns the relative tolerance of data projection identified an object. */
CMISSError CMISSDataProjection_RelativeToleranceGet(CMISSDataProjectionType dataProjection /*<The data projection to get relative tolerance for. */,
    double *relativeTolerance /*<On exit, the absolute relative tolerance of the specified data projection */);
%clear (double *relativeTolerance);

/*>Sets/changes the relative tolerance of data projection identified by a data projection user number and a region user number. */
CMISSError CMISSDataProjection_RelativeToleranceSetNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection to get starting xi for. */,
    const int regionUserNumber /*<The region use number of data projection to set relative tolerance for. */,
    const double relativeTolerance /*<the absolute relative tolerance to set */);

/*>Sets/changes the relative tolerance of data projection identified an object. */
CMISSError CMISSDataProjection_RelativeToleranceSet(CMISSDataProjectionType dataProjection /*<The data projection to set relative tolerance for. */,
    const double relativeTolerance /*<the absolute relative tolerance to set */);

%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int startingXiSize, double *startingXi)};
/*>Returns the starting xi of data projection identified by a data projection user number and region user number. */
CMISSError CMISSDataProjection_StartingXiGetNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection to get starting xi for. */,
    const int regionUserNumber /*<The region user number of the data projection to get starting xi for. */,
    const int startingXiSize /*<Length of startingXi */,
    double *startingXi /*<On exit, the absolute starting xi of the specified data projection */);
%clear (const int startingXiSize, double *startingXi);

%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int startingXiSize, double *startingXi)};
/*>Returns the starting xi of data projection identified an object. */
CMISSError CMISSDataProjection_StartingXiGet(CMISSDataProjectionType dataProjection /*<The data projection to get starting xi for. */,
    const int startingXiSize /*<Length of startingXi */,
    double *startingXi /*<On exit, the absolute starting xi of the specified data projection */);
%clear (const int startingXiSize, double *startingXi);

%apply (const int DIM1, double *IN_ARRAY1){(const int startingXiSize, const double *startingXi)};
/*>Sets/changes the starting xi of data projection identified by a region user number. */
CMISSError CMISSDataProjection_StartingXiSetNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection to get starting xi for. */,
    const int regionUserNumber /*<The region use number of data projection to set starting xi for. */,
    const int startingXiSize /*<Length of startingXi */,
    const double *startingXi /*<the absolute starting xi to set */);
%clear (const int startingXiSize, const double *startingXi);

%apply (const int DIM1, double *IN_ARRAY1){(const int startingXiSize, const double *startingXi)};
/*>Sets/changes the starting xi of data projection identified an object. */
CMISSError CMISSDataProjection_StartingXiSet(CMISSDataProjectionType dataProjection /*<The data projection to set starting xi for. */,
    const int startingXiSize /*<Length of startingXi */,
    const double *startingXi /*<the absolute starting xi to set */);
%clear (const int startingXiSize, const double *startingXi);

/*>Sets/changes the starting xi of data projection identified by a region user number. */
CMISSError CMISSDataProjection_ElementSetInterfaceNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection to get starting xi for. */,
    const int parentRegionUserNumber /*<The user number of the parent region. */,
    const int interfaceUserNumber /*<The user number of the interface. */,
    const int dataPointNumber /*<The data point number to set xi position for */,
    const int elementNumber /*<the element number to set */);

/*>Sets/changes the starting xi of data projection identified by a region user number. */
CMISSError CMISSDataProjection_ElementSetRegionNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection to get starting xi for. */,
    const int regionUserNumber /*<The region user number of data projection to set starting xi for. */,
    const int dataPointNumber /*<The data point number to set xi position for */,
    const int elementNumber /*<the element number to set */);

/*>Sets/changes the starting xi of data projection identified an object. */
CMISSError CMISSDataProjection_ElementSet(CMISSDataProjectionType dataProjection /*<The data projection to set starting xi for. */,
    const int dataPointNumber /*<The data point number to set xi position for */,
    const int elementNumber /*<the element number to set */);

%apply (const int Size, char *DummyOutputString){(const int labelSize, char *label)};
/*>Get the character string label of a data projection identified by a region user number. */
CMISSError CMISSDataProjection_LabelGetCInterfaceNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection to get the label for. */,
    const int parentRegionUserNumber /*<The user number of the parent region. */,
    const int interfaceUserNumber /*<The user number of the interface. */,
    const int labelSize /*<Length of label string */,
    char *label /*<the label to get */);
%clear (const int labelSize, char *label);

%apply (const int Size, char *DummyOutputString){(const int labelSize, char *label)};
/*>Get the character string label of a data projection identified by a region user number. */
CMISSError CMISSDataProjection_LabelGetCRegionNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection to get the label for. */,
    const int regionUserNumber /*<The region user number of data projection to get the label for. */,
    const int labelSize /*<Length of label string */,
    char *label /*<the label to get */);
%clear (const int labelSize, char *label);

%apply (const int Size, char *DummyOutputString){(const int labelSize, char *label)};
/*>Gets the character string label of a data projection identified an object. */
CMISSError CMISSDataProjection_LabelGet(CMISSDataProjectionType dataProjection /*<The data projection to get the label for. */,
    const int labelSize /*<Length of label string */,
    char *label /*<the label to get */);
%clear (const int labelSize, char *label);

%apply (const int Size, const char *DummyInputString){(const int labelSize, const char *label)};
/*>Sets/changes the character string label of a data projection identified by a region user number. */
CMISSError CMISSDataProjection_LabelSetCInterfaceNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection to set the label for. */,
    const int parentRegionUserNumber /*<The user number of the parent region. */,
    const int interfaceUserNumber /*<The user number of the interface. */,
    const int labelSize /*<Length of label string */,
    const char *label /*<the label to set */);
%clear (const int labelSize, const char *label);

%apply (const int Size, const char *DummyInputString){(const int labelSize, const char *label)};
/*>Sets/changes the character string label of a data projection identified by a region user number. */
CMISSError CMISSDataProjection_LabelSetCRegionNum(const int dataProjectionUserNumber /*<The data projection user number of the data projection to set the label for. */,
    const int regionUserNumber /*<The region user number of data projection to set the label for. */,
    const int labelSize /*<Length of label string */,
    const char *label /*<the label to set */);
%clear (const int labelSize, const char *label);

%apply (const int Size, const char *DummyInputString){(const int labelSize, const char *label)};
/*>Sets/changes the character string label of a data projection identified an object. */
CMISSError CMISSDataProjection_LabelSet(CMISSDataProjectionType dataProjection /*<The data projection to set the label for. */,
    const int labelSize /*<Length of label string */,
    const char *label /*<the label to set */);
%clear (const int labelSize, const char *label);

/*>Destroys equations for equations identified by a user number. */
CMISSError CMISSEquations_DestroyNum(const int regionUserNumber /*<The user number of the Region containing the equations to destroy. */,
    const int equationsSetUserNumber /*<The user number of the equations set to destroy the equations for. */);

/*>Destroy equations for equations identified by an object. */
CMISSError CMISSEquations_Destroy(CMISSEquationsType equations /*<The equations to destroy. */);

%apply (int *DummyOutputScalar){(int *linearityType)};
/*>Gets the linearity type for equations identified by a user number. */
CMISSError CMISSEquations_LinearityTypeGetNum(const int regionUserNumber /*<The user number of the Region containing the equations to get the linearity type for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to get the linearity type for. */,
    int *linearityType /*<On return, the linearity type of the equations \see OPENCMISS_EquationsLinearityTypes */);
%clear (int *linearityType);

%apply (int *DummyOutputScalar){(int *linearityType)};
/*>Gets the linearity type for equations identified by an object. */
CMISSError CMISSEquations_LinearityTypeGet(const CMISSEquationsType equations /*<The equations to get the linearity type for. */,
    int *linearityType /*<On return, the linearity type of the equations \see OPENCMISS_EquationsLinearityTypes */);
%clear (int *linearityType);

%apply (int *DummyOutputScalar){(int *lumpingType)};
/*>Gets the lumping type for equations identified by a user number. */
CMISSError CMISSEquations_LumpingTypeGetNum(const int regionUserNumber /*<The user number of the Region containing the equations to get the lumping type for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to get the lumping type for. */,
    int *lumpingType /*<On return, the lumping type of the equations \see OPENCMISS_EquationsLumpingTypes */);
%clear (int *lumpingType);

%apply (int *DummyOutputScalar){(int *lumpingType)};
/*>Gets the lumping type for equations identified by an object. */
CMISSError CMISSEquations_LumpingTypeGet(const CMISSEquationsType equations /*<The equations to get the lumping type for. */,
    int *lumpingType /*<On return, the lumping type of the equations \see OPENCMISS_EquationsLumpingTypes */);
%clear (int *lumpingType);

/*>Sets/changes the lumping type for equations identified by a user number. */
CMISSError CMISSEquations_LumpingTypeSetNum(const int regionUserNumber /*<The user number of the Region containing the equations to set the lumping type for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to set the lumping type for. */,
    const int lumpingType /*<The lumping type of the equations to set\see OPENCMISS_EquationsLumpingTypes */);

/*>Sets/changes the lumping type for equations identified by an object. */
CMISSError CMISSEquations_LumpingTypeSet(CMISSEquationsType equations /*<The equations to set the lumping type for. */,
    const int lumpingType /*<The lumping type of the equations to set\see OPENCMISS_EquationsLumpingTypes */);

%apply (int *DummyOutputScalar){(int *outputType)};
/*>Gets the output type for equations identified by a user number. */
CMISSError CMISSEquations_OutputTypeGetNum(const int regionUserNumber /*<The user number of the Region containing the equations to get the output type for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to get the output type for. */,
    int *outputType /*<On return, the output type of the equations \see OPENCMISS_EquationsOutputTypes */);
%clear (int *outputType);

%apply (int *DummyOutputScalar){(int *outputType)};
/*>Gets the output type for equations identified by an object. */
CMISSError CMISSEquations_OutputTypeGet(const CMISSEquationsType equations /*<The equations to get the output type for. */,
    int *outputType /*<On return, the output type of the equations \see OPENCMISS_EquationsOutputTypes */);
%clear (int *outputType);

/*>Sets/changes the output type for equations identified by a user number. */
CMISSError CMISSEquations_OutputTypeSetNum(const int regionUserNumber /*<The user number of the Region containing the equations to set the output type for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to set the output type for. */,
    const int outputType /*<The output type of the equations to set \see OPENCMISS_EquationsOutputTypes */);

/*>Sets/changes the output type for equations identified by an object. */
CMISSError CMISSEquations_OutputTypeSet(CMISSEquationsType equations /*<The equations to set the output type for. */,
    const int outputType /*<The output type of the equations to set \see OPENCMISS_EquationsOutputTypes */);

%apply (int *DummyOutputScalar){(int *sparsityType)};
/*>Gets the sparsity type for equations identified by a user number. */
CMISSError CMISSEquations_SparsityTypeGetNum(const int regionUserNumber /*<The user number of the Region containing the equations to get the sparsity type for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to get the sparsity type for. */,
    int *sparsityType /*<On return, the sparsity type of the equations \see OPENCMISS_EquationsSparsityTypes */);
%clear (int *sparsityType);

%apply (int *DummyOutputScalar){(int *sparsityType)};
/*>Gets the sparsity type for equations identified by an object. */
CMISSError CMISSEquations_SparsityTypeGet(const CMISSEquationsType equations /*<The equations to get the sparsity type for. */,
    int *sparsityType /*<On return, the sparsity type of the equations \see OPENCMISS_EquationsSparsityTypes */);
%clear (int *sparsityType);

/*>Sets/changes the sparsity type for equations identified by a user number. */
CMISSError CMISSEquations_SparsityTypeSetNum(const int regionUserNumber /*<The user number of the Region containing the equations to set the sparsity type for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to set the sparsity type for. */,
    const int sparsityType /*<The sparsity type of the equations to set \see OPENCMISS_EquationsSparsityTypes */);

/*>Sets/changes the sparsity type for equations identified by an object. */
CMISSError CMISSEquations_SparsityTypeSet(CMISSEquationsType equations /*<The equations to set the sparsity type for. */,
    const int sparsityType /*<The sparsity type of the equations to set \see OPENCMISS_EquationsSparsityTypes */);

%apply (int *DummyOutputScalar){(int *timeDependenceType)};
/*>Gets the time dependence type for equations identified by a user number. */
CMISSError CMISSEquations_TimeDependenceTypeGetNum(const int regionUserNumber /*<The user number of the Region containing the equations to get the time dependence type for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to get the time dependence type for. */,
    int *timeDependenceType /*<On return, the time dependence type of the equations \see OPENCMISS_EquationsTimeDependenceTypes */);
%clear (int *timeDependenceType);

%apply (int *DummyOutputScalar){(int *timeDependenceType)};
/*>Gets the time dependence type for equations identified by an object. */
CMISSError CMISSEquations_TimeDependenceTypeGet(const CMISSEquationsType equations /*<The equations to get the time dependence type for. */,
    int *timeDependenceType /*<On return, the time dependence type of the equations \see OPENCMISS_EquationsTimeDependenceTypes */);
%clear (int *timeDependenceType);

%apply (int *DummyOutputScalar){(int *numberOfMatrices)};
/*>Get the number of linear matrices in the equations */
CMISSError CMISSEquations_NumberOfLinearMatricesGet(const CMISSEquationsType equations /*<The equations to get the number of linear matrices for */,
    int *numberOfMatrices /*<On return, the number of linear matrices */);
%clear (int *numberOfMatrices);

%apply (int *DummyOutputScalar){(int *numberOfMatrices)};
/*>Get the number of Jacobian matrices in the equations */
CMISSError CMISSEquations_NumberOfJacobianMatricesGet(const CMISSEquationsType equations /*<The equations to get the number of Jacobian matrices for */,
    int *numberOfMatrices /*<On return, the number of Jacobian matrices */);
%clear (int *numberOfMatrices);

%apply (int *DummyOutputScalar){(int *numberOfMatrices)};
/*>Get the number of dynamic matrices in the equations */
CMISSError CMISSEquations_NumberOfDynamicMatricesGet(const CMISSEquationsType equations /*<The equations to get the number of dynamic matrices for */,
    int *numberOfMatrices /*<On return, the number of dynamic matrices */);
%clear (int *numberOfMatrices);

/*>Get a linear equations matrix from the equations */
CMISSError CMISSEquations_LinearMatrixGet(const CMISSEquationsType equations /*<The equations to get the linear matrix for */,
    const int matrixIndex /*<The number of the linear matrix to get */,
    CMISSDistributedMatrixType matrix /*<On return, the requested linear matrix */);

/*>Finish the creation of derived variables for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_DerivedCreateFinishNum(const int regionUserNumber /*<The user number of the region containing the equations set to finish the creation of derived variables for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to finish the creation of derived variables for. */);

/*>Finish the creation of derived variables for an equations set identified by an object. */
CMISSError CMISSEquationsSet_DerivedCreateFinish(CMISSEquationsSetType equationsSet /*<The equations set to finish the creation of derived variables for. */);

/*>Start the creation of derived variables for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_DerivedCreateStartNum(const int regionUserNumber /*<The user number of the region containing the equations set to start the creation of derived variables for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to start the creation of derived variables for. */,
    const int derivedFieldUserNumber /*<The user number of the derived field. */);

/*>Start the creation of derived variables for an equations set identified by an object. */
CMISSError CMISSEquationsSet_DerivedCreateStart(CMISSEquationsSetType equationsSet /*<The equations set to start the creation of derived variables on. */,
    const int derivedFieldUserNumber /*<The user number of the derived field. */,
    CMISSFieldType derivedField /*<If associated on entry, the user created derived field which has the same user number as the specified derived field user number. If not associated on entry, on return, the created derived field for the equations set. */);

/*>Destroy the derived variables for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_DerivedDestroyNum(const int regionUserNumber /*<The user number of the region containing the equations set to destroy the derived variables for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to destroy the derived variables for. */);

/*>Destroy the derived variables for an equations set identified by an object. */
CMISSError CMISSEquationsSet_DerivedDestroy(CMISSEquationsSetType equationsSet /*<The equations set to destroy the derived variables for. */);

/*>Calculates a derived field value for the equations set and stores the result in the derived field previously set up */
CMISSError CMISSEquationsSet_DerivedVariableCalculateNum(const int regionUserNumber /*<The user number of the region containing the equations set. */,
    const int equationsSetUserNumber /*<The user number of the equations set to calculate the output for. */,
    const int derivedType /*<The derived variable type to calculate. \see OPENCMISS_EquationsSetDerivedTypes. */);

/*>Calculates a derived field value for the equations set and stores the result in the derived field previously set up */
CMISSError CMISSEquationsSet_DerivedVariableCalculate(const CMISSEquationsSetType equationsSet /*<The equations set to calculate the output for. */,
    const int derivedType /*<The derived field type to calculate. \see OPENCMISS_EquationsSetDerivedTypes. */);

/*>Sets the field variable type of the derived field to be used to store a derived variable */
CMISSError CMISSEquationsSet_DerivedVariableSetNum(const int regionUserNumber /*<The user number of the region containing the equations set. */,
    const int equationsSetUserNumber /*<The user number of the equations set to calculate the output for. */,
    const int derivedType /*<The derived variable type to calculate. \see OPENCMISS_EquationsSetDerivedTypes. */,
    const int fieldVariableType /*<The field variable type to store the calculated values in. */);

/*>Sets the field variable type of the derived field to be used to store a derived variable */
CMISSError CMISSEquationsSet_DerivedVariableSet(const CMISSEquationsSetType equationsSet /*<The equations set to calculate the output for. */,
    const int derivedType /*<The derived field type to calculate. \see OPENCMISS_EquationsSetDerivedTypes. */,
    const int fieldVariableType /*<The field variable type to store the calculated values in. */);

/*>Get a Jacobian matrix from the equations */
CMISSError CMISSEquations_JacobianMatrixGet(const CMISSEquationsType equations /*<The equations to get the Jacobian matrix for */,
    const int residualIndex /*<The index of the residual vector to get the Jacobian matrix for */,
    const int variableType /*<The field variable type that the residual is differentiated with respect to for this Jacobian. \see OPENCMISS_FieldVariableTypes */,
    CMISSDistributedMatrixType matrix /*<On return, the requested Jacobian matrix */);

/*>Get a dynamic equations matrix from equations using the dynamic matrix index */
CMISSError CMISSEquations_DynamicMatrixGet(const CMISSEquationsType equations /*<The equations to get the dynamic matrix for */,
    const int matrixIndex /*<The number of the dynamic matrix to get */,
    CMISSDistributedMatrixType matrix /*<On return, the requested dynamic matrix */);

/*>Get a dynamic equations matrix from equations using the dynamic matrix type */
CMISSError CMISSEquations_DynamicMatrixGetByType(const CMISSEquationsType equations /*<The equations to get the dynamic matrix for */,
    const int matrixType /*<The type of the dynamic matrix to get. \see OPENCMISS_EquationsSetDynamicMatrixTypes */,
    CMISSDistributedMatrixType matrix /*<On return, the requested dynamic matrix */);

%apply (int *DummyOutputScalar){(int *matrixType)};
/*>Get the type of a dynamic matrix from equations set equations */
CMISSError CMISSEquations_DynamicMatrixTypeGet(const CMISSEquationsType equations /*<The equations to get the dynamic matrix type from */,
    const int matrixIndex /*<The number of the dynamic matrix to get the type of */,
    int *matrixType /*<On return, the dynamic matrix type. \see OPENCMISS_EquationsSetDynamicMatrixTypes */);
%clear (int *matrixType);

/*>Get the right hand side vector for equations */
CMISSError CMISSEquations_RhsVectorGet(const CMISSEquationsType equations /*<The equations to get the right hand side vector for */,
    CMISSDistributedVectorType rhsVector /*<On return, the right hand side vector for the equations */);

/*>Get the source vector for equations */
CMISSError CMISSEquations_SourceVectorGet(const CMISSEquationsType equations /*<The equations to get the source vector for */,
    CMISSDistributedVectorType sourceVector /*<On return, the source vector for the equations */);

/*>Get a residual vector for equations */
CMISSError CMISSEquations_ResidualVectorGet(const CMISSEquationsType equations /*<The equations to get the residual vector for */,
    const int residualIndex /*<The index of the residual vector to get */,
    CMISSDistributedVectorType residualVector /*<On return, the residual vector for the equations */);

%apply (int *DummyOutputScalar){(int *numberOfVariables)};
/*>Get the number of field variables that contribute to the residual vector */
CMISSError CMISSEquations_ResidualNumberOfVariablesGet(const CMISSEquationsType equations /*<The equations to get the residual vector number of variables for */,
    const int residualIndex /*<The index of the residual vector to get the number of variables for */,
    int *numberOfVariables /*<On return, the number of variables that contribute to the residual vector */);
%clear (int *numberOfVariables);

%apply (const int DIM1, int *ARGOUT_ARRAY1){(const int residualVariablesSize, int *residualVariables)};
/*>Get the field variables that contribute to the residual vector */
CMISSError CMISSEquations_ResidualVariablesGet(const CMISSEquationsType equations /*<The equations to get the residual vector variables for */,
    const int residualIndex /*<The index of the residual vector to get the variables for */,
    const int residualVariablesSize /*<Length of residualVariables */,
    int *residualVariables /*<residualVariables(varIdx). On return, the field variable type for the varIdx'th residual variable. \see OPENCMISS_FieldVariableTypes */);
%clear (const int residualVariablesSize, int *residualVariables);

/*>Finish the creation of a analytic solution for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_AnalyticCreateFinishNum(const int regionUserNumber /*<The user number of the Region containing the equations set to finish. */,
    const int equationsSetUserNumber /*<The user number of the equations set to finish the creation of. */);

/*>Finish the creation of a analytic solution for an equations set identified by an object. */
CMISSError CMISSEquationsSet_AnalyticCreateFinish(CMISSEquationsSetType equationsSet /*<The equations set to finish. */);

/*>Start the creation of a analytic solution for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_AnalyticCreateStartNum(const int regionUserNumber /*<The user number of the Region containing the equations set to finish. */,
    const int equationsSetUserNumber /*<The user number of the equations set to finish the creation of. */,
    const int analyticFunctionType /*<The analytic function type to use. \see OPENCMISS_EquationsSetAnalyticFunctionTypes */,
    const int analyticFieldUserNumber /*<The user number of the field for the analytic function */);

/*>Start the creation of an analytic solution for an equations set identified by an object. */
CMISSError CMISSEquationsSet_AnalyticCreateStart(CMISSEquationsSetType equationsSet /*<The equations set to start the analytic creation on. */,
    const int analyticFunctionType /*<The analytic function type to use. \see OPENCMISS_EquationsSetAnalyticFunctionTypes */,
    const int analyticFieldUserNumber /*<The user number of the field for the analytic function */,
    CMISSFieldType analyticField /*<If associated on entry, the user created analytic field which has the same user number as the specified analytic field user number. If not associated on entry, on return, the created analytic field for the equations set. */);

/*>Destroy the analytic solution for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_AnalyticDestroyNum(const int regionUserNumber /*<The user number of the Region containing the equations set to destroy. */,
    const int equationsSetUserNumber /*<The user number of the equations set to destroy. */);

/*>Destroy the analytic solution for an equations set identified by an object. */
CMISSError CMISSEquationsSet_AnalyticDestroy(CMISSEquationsSetType equationsSet /*<The equations set to destroy the analytic for. */);

/*>Evaluates the current analytic solution for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_AnalyticEvaluateNum(const int regionUserNumber /*<The user number of the Region containing the equations set to evaluate. */,
    const int equationsSetUserNumber /*<The user number of the equations set to evaluate. */);

/*>Evaluates the current analytic solution for an equations set identified by an object. */
CMISSError CMISSEquationsSet_AnalyticEvaluate(CMISSEquationsSetType equationsSet /*<The equations set to evaluate the current analytic solution for. */);

%apply (double *DummyOutputScalar){(double *time)};
/*>Returns the analytic time for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_AnalyticTimeGetNum(const int regionUserNumber /*<The user number of the Region containing the equations set get the analytic time for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to get the analytic time get. */,
    double *time /*<On return, the analytic time for the equations set. */);
%clear (double *time);

%apply (double *DummyOutputScalar){(double *time)};
/*>Returns the analytic time for an equations set identified by an object. */
CMISSError CMISSEquationsSet_AnalyticTimeGet(CMISSEquationsSetType equationsSet /*<The equations set to get the analytic time for. */,
    double *time /*<On return, the analytic time for the equations set. */);
%clear (double *time);

/*>Sets/changes the analytic time for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_AnalyticTimeSetNum(const int regionUserNumber /*<The user number of the Region containing the equations set get the analytic time for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to get the analytic time get. */,
    const double time /*<The analytic time to set. */);

/*>Sets/changes the analytic time for an equations set identified by an object. */
CMISSError CMISSEquationsSet_AnalyticTimeSet(CMISSEquationsSetType equationsSet /*<The equations set to set the analytic time for. */,
    const double time /*<The analytic time to set. */);

/*>Sets the analytic problem user parameter */
CMISSError CMISSEquationsSet_AnalyticUserParamSetNum(const int regionUserNumber /*<The user number of the Region containing the equations set */,
    const int equationsSetUserNumber /*<The user number of the equations set */,
    const int paramIdx /*<The index of the analytic user parameter to set */,
    const double param /*<Value of the parameter to set */);

/*>Sets the analytic problem user parameter */
CMISSError CMISSEquationsSet_AnalyticUserParamSet(CMISSEquationsSetType equationsSet /*<The equations set to set the analytic user parameter. */,
    const int paramIdx /*<The index of the analytic user parameter to set */,
    const double param /*<Value of the parameter to set */);

%apply (double *DummyOutputScalar){(double *param)};
/*>Sets the analytic problem user parameter */
CMISSError CMISSEquationsSet_AnalyticUserParamGetNum(const int regionUserNumber /*<The user number of the Region containing the equations set */,
    const int equationsSetUserNumber /*<The user number of the equations set */,
    const int paramIdx /*<The index of the analytic user parameter to set */,
    double *param /*<Value of the parameter to set */);
%clear (double *param);

%apply (double *DummyOutputScalar){(double *param)};
/*>Sets the analytic problem user parameter */
CMISSError CMISSEquationsSet_AnalyticUserParamGet(CMISSEquationsSetType equationsSet /*<The equations set to set the analytic user parameter. */,
    const int paramIdx /*<The index of the analytic user parameter to set */,
    double *param /*<Value of the parameter to set */);
%clear (double *param);

/*>Finish the creation of an equations set identified by a user number. */
CMISSError CMISSEquationsSet_CreateFinishNum(const int regionUserNumber /*<The user number of the Region containing the equations set to finish. */,
    const int equationsSetUserNumber /*<The user number of the equations set to finish the creation of. */);

/*>Finish the creation of an equations set identified by an object. */
CMISSError CMISSEquationsSet_CreateFinish(CMISSEquationsSetType equationsSet /*<The equations set to finish the creation of. */);

/*>Start the creation of an equations set identified by a user number. */
CMISSError CMISSEquationsSet_CreateStartNum(const int equationsSetUserNumber /*<The user number of the equations set to be created. */,
    const int regionUserNumber /*<The user number of the region to start the creation of an equations set on. */,
    const int geomFibreFieldUserNumber /*<The user number of the Geometric/Fibre field for the equations set. */,
    const int equationsSetClass /*<The equations set class to set. \see OPENCMISS_EquationsSetClasses */,
    const int equationsSetType /*<The equations set type to set. \see OPENCMISS_EquationsSetTypes */,
    const int equationsSetSubtype /*<The equations set subtype to set. \see OPENCMISS_EquationsSetSubtypes */,
    const int equationsSetFieldUserNumber /*<The user number of the equations set field */);

/*>Start the creation of an equations set identified by an object. */
CMISSError CMISSEquationsSet_CreateStart(const int equationsSetUserNumber /*<The user number of the equations set to be created. */,
    const CMISSRegionType region /*<The region to create the equations set on. */,
    const CMISSFieldType geomFibreField /*<The Geometric/Fibre field for the creation of the equations set. */,
    const int equationsSetClass /*<The equations set class to set. \see OPENCMISS_EquationsSetClasses */,
    const int equationsSetType /*<The equations set type to set. \see OPENCMISS_EquationsSetTypes */,
    const int equationsSetSubtype /*<The equations set subtype to set. \see OPENCMISS_EquationsSetSubtypes */,
    const int equationsSetFieldUserNumber /*<The user number of the equations set field */,
    CMISSFieldType equationsSetFieldField /*<On return, a pointer to the equations set field */,
    CMISSEquationsSetType equationsSet /*<On return, the created equations set. */);

/*>Destroy an equations set identified by a user number. */
CMISSError CMISSEquationsSet_DestroyNum(const int regionUserNumber /*<The user number of the Region containing the equations set to destory. */,
    const int equationsSetUserNumber /*<The user number of the equations set to destroy. */);

/*>Destroy an equations set identified by an object. */
CMISSError CMISSEquationsSet_Destroy(CMISSEquationsSetType equationsSet /*<The equations set to destroy. */);

/*>Finish the creation of dependent variables for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_DependentCreateFinishNum(const int regionUserNumber /*<The user number of the Region containing the equations set to finish the creation of dependent variables for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to finish the creation of dependent variables for. */);

/*>Finish the creation of dependent variables for an equations set identified by an object. */
CMISSError CMISSEquationsSet_DependentCreateFinish(CMISSEquationsSetType equationsSet /*<The equations set to finish the creation of dependent variables for. */);

/*>Start the creation of dependent variables for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_DependentCreateStartNum(const int regionUserNumber /*<The user number of the Region containing the equations set to start the creation of dependent variables for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to start the creation of dependent variables for. */,
    const int dependentFieldUserNumber /*<The user number of the dependent field. */);

/*>Start the creation of dependent variables for an equations set identified by an object. */
CMISSError CMISSEquationsSet_DependentCreateStart(CMISSEquationsSetType equationsSet /*<The equations set to start the creation of dependent variables on. */,
    const int dependentFieldUserNumber /*<The user number of the dependent field. */,
    CMISSFieldType dependentField /*<If associated on entry, the user created dependent field which has the same user number as the specified dependent field user number. If not associated on entry, on return, the created dependent field for the equations set. */);

/*>Destroy the dependent variables for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_DependentDestroyNum(const int regionUserNumber /*<The user number of the Region containing the equations set to destroy the dependent variables for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to destroy the dependent variables for. */);

/*>Destroy the dependent variables for an equations set identified by an object. */
CMISSError CMISSEquationsSet_DependentDestroy(CMISSEquationsSetType equationsSet /*<The equations set to destroy the dependent variables for. */);

/*>Finish the creation of equations for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_EquationsCreateFinishNum(const int regionUserNumber /*<The user number of the Region containing the equations set to finish the creation of equations for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to finish the creation of equations for. */);

/*>Finish the creation of equations for an equations set identified by an object. */
CMISSError CMISSEquationsSet_EquationsCreateFinish(CMISSEquationsSetType equationsSet /*<The equations set to finish the creation of equations for. */);

/*>Start the creation of equations for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_EquationsCreateStartNum(const int regionUserNumber /*<The user number of the Region containing the equations set to start the creation of equations for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to start the creation of equations for. */);

/*>Start the creation of equations for an equations set identified by an object. */
CMISSError CMISSEquationsSet_EquationsCreateStart(CMISSEquationsSetType equationsSet /*<The equations set to start the creation of equations on. */,
    CMISSEquationsType equations /*<On return, the created equations. */);

/*>Destroy the equations for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_EquationsDestroyNum(const int regionUserNumber /*<The user number of the Region containing the equations set to destroy the equations for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to destroy the equations for. */);

/*>Destroy the equations for an equations set identified by an object. */
CMISSError CMISSEquationsSet_EquationsDestroy(CMISSEquationsSetType equationsSet /*<The equations set to destroy the equations for. */);

/*>Finish the creation of independent variables for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_IndependentCreateFinishNum(const int regionUserNumber /*<The user number of the Region containing the equations set to finish the creation of independent variables for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to finish the creation of independent variables for. */);

/*>Finish the creation of independent variables for an equations set identified by an object. */
CMISSError CMISSEquationsSet_IndependentCreateFinish(CMISSEquationsSetType equationsSet /*<The equations set to finish the creation of independent variables for. */);

/*>Start the creation of independent variables for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_IndependentCreateStartNum(const int regionUserNumber /*<The user number of the Region containing the equations set to start the creation of independent variables for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to start the creation of independent variables for. */,
    const int independentFieldUserNumber /*<The user number of the independent field. */);

/*>Start the creation of independent variables for an equations set identified by an object. */
CMISSError CMISSEquationsSet_IndependentCreateStart(CMISSEquationsSetType equationsSet /*<The equations set to start the creation of independent variables on. */,
    const int independentFieldUserNumber /*<The user number of the dependent field. */,
    CMISSFieldType independentField /*<If associated on entry, the user created independent field which has the same user number as the specified independent field user number. If not associated on entry, on return, the created independent field for the equations set. */);

/*>Destroy the independent variables for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_IndependentDestroyNum(const int regionUserNumber /*<The user number of the Region containing the equations set to destroy the independent variables for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to destroy the independent variables for. */);

/*>Destroy the independent variables for an equations set identified by an object. */
CMISSError CMISSEquationsSet_IndependentDestroy(CMISSEquationsSetType equationsSet /*<The equations set to destroy the independent variables for. */);

/*>Finish the creation of materials for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_MaterialsCreateFinishNum(const int regionUserNumber /*<The user number of the Region containing the equations set to finish the creation of materials for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to finish the creation of materials for. */);

/*>Finish the creation of materials for an equations set identified by an object. */
CMISSError CMISSEquationsSet_MaterialsCreateFinish(CMISSEquationsSetType equationsSet /*<The equations set to finish the creation of materials for. */);

/*>Start the creation of materials for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_MaterialsCreateStartNum(const int regionUserNumber /*<The user number of the Region containing the equations set to start the creation of materials for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to start the creation of materials for. */,
    const int materialsFieldUserNumber /*<The user number of the materials field. */);

/*>Start the creation of materials for an equations set identified by an object. */
CMISSError CMISSEquationsSet_MaterialsCreateStart(CMISSEquationsSetType equationsSet /*<The equations set to start the creation of materials on. */,
    const int materialsFieldUserNumber /*<The user number of the materials field. */,
    CMISSFieldType materialsField /*<If associated on entry, the user created materials field which has the same user number as the specified materials field user number. If not associated on entry, on return, the created materials field for the equations set. */);

/*>Destroy the materials for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_MaterialsDestroyNum(const int regionUserNumber /*<The user number of the Region containing the equations set to destroy the materials for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to destroy the materials for. */);

/*>Destroy the materials for an equations set identified by an object. */
CMISSError CMISSEquationsSet_MaterialsDestroy(CMISSEquationsSetType equationsSet /*<The equations set to destroy the materials for. */);

%apply (int *DummyOutputScalar){(int *solutionMethod)};
/*>Returns the solution method for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_SolutionMethodGetNum(const int regionUserNumber /*<The user number of the Region containing the equations set to get the solution method for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to get the solution method for. */,
    int *solutionMethod /*<On return, the solution method. \see OPENCMISS_EquationsSetSolutionMethods */);
%clear (int *solutionMethod);

%apply (int *DummyOutputScalar){(int *solutionMethod)};
/*>Returns the solution method for an equations set identified by an object. */
CMISSError CMISSEquationsSet_SolutionMethodGet(CMISSEquationsSetType equationsSet /*<The equations set to get the solution method for. */,
    int *solutionMethod /*<On Return, the solution method. \see OPENCMISS_EquationsSetSolutionMethods */);
%clear (int *solutionMethod);

/*>Sets/changes the solution method for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_SolutionMethodSetNum(const int regionUserNumber /*<The user number of the Region containing the equations set to set the solution method for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to set the solution method for. */,
    const int solutionMethod /*<The solution method to set. \see OPENCMISS_EquationsSetSolutionMethods */);

/*>Sets/changes the solution method for an equations set identified by an object. */
CMISSError CMISSEquationsSet_SolutionMethodSet(CMISSEquationsSetType equationsSet /*<The equations set to set the solution method for. */,
    const int solutionMethod /*<The solution method to set. \see OPENCMISS_EquationsSetSolutionMethods */);

/*>Finish the creation of a source for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_SourceCreateFinishNum(const int regionUserNumber /*<The user number of the Region containing the equations set to finish the creation of a source for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to finish the creation of a source for. */);

/*>Finish the creation of a source for an equations set identified by an object. */
CMISSError CMISSEquationsSet_SourceCreateFinish(CMISSEquationsSetType equationsSet /*<The equations set to finish the creation of a source for. */);

/*>Start the creation of a source for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_SourceCreateStartNum(const int regionUserNumber /*<The user number of the Region containing the equations set to start the creation of a source for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to start the creation of a source for. */,
    const int sourceFieldUserNumber /*<The user number of the source field. */);

/*>Start the creation of a source for an equations set identified by an object. */
CMISSError CMISSEquationsSet_SourceCreateStart(CMISSEquationsSetType equationsSet /*<The equations set to start the creation of a source on. */,
    const int sourceFieldUserNumber /*<The user number of the source field. */,
    CMISSFieldType sourceField /*<If associated on entry, the user created source field which has the same user number as the specified source field user number. If not associated on entry, on return, the created source field for the equations set. */);

/*>Destroy the source for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_SourceDestroyNum(const int regionUserNumber /*<The user number of the Region containing the equations set to destroy the source for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to destroy the source for. */);

/*>Destroy the source for an equations set identified by an object. */
CMISSError CMISSEquationsSet_SourceDestroy(CMISSEquationsSetType equationsSet /*<The equations set to destroy the source for. */);

%apply (int *DummyOutputScalar){(int *equationsSetClass)};
%apply (int *DummyOutputScalar){(int *equationsSetType)};
%apply (int *DummyOutputScalar){(int *equationsSetSubtype)};
/*>Returns the equations set specification i.e., equations set class, type and subtype for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_SpecificationGetNum(const int regionUserNumber /*<The user number of the Region containing the equations set to get the specification for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to get the specification for. */,
    int *equationsSetClass /*<On return, the equations set class. \see OPENCMISS_EquationsSetClasses */,
    int *equationsSetType /*<On return, the equations set type. \see OPENCMISS_EquationsSetTypes */,
    int *equationsSetSubtype /*<On return, the equations set subtype. \see OPENCMISS_EquationsSetSubtypes */);
%clear (int *equationsSetClass);
%clear (int *equationsSetType);
%clear (int *equationsSetSubtype);

%apply (int *DummyOutputScalar){(int *equationsSetClass)};
%apply (int *DummyOutputScalar){(int *equationsSetType)};
%apply (int *DummyOutputScalar){(int *equationsSetSubtype)};
/*>Returns the equations set specification i.e., equations set class, type and subtype for an equations set identified by an object. */
CMISSError CMISSEquationsSet_SpecificationGet(const CMISSEquationsSetType equationsSet /*<The equations set to get the specification for. */,
    int *equationsSetClass /*<On return, the equations set class. \see OPENCMISS_EquationsSetClasses */,
    int *equationsSetType /*<On return, the equations set type. \see OPENCMISS_EquationsSetTypes */,
    int *equationsSetSubtype /*<On return, the equations set subtype. \see OPENCMISS_EquationsSetSubtypes */);
%clear (int *equationsSetClass);
%clear (int *equationsSetType);
%clear (int *equationsSetSubtype);

/*>Sets/changes the equations set specification i.e., equations set class, type and subtype for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_SpecificationSetNum(const int regionUserNumber /*<The user number of the Region containing the equations set to set the specification for. */,
    const int equationsSetUserNumber /*<The user number of the equations set to set the specification for. */,
    const int equationsSetClass /*<The equations set class to set. \see OPENCMISS_EquationsSetClasses */,
    const int equationsSetType /*<The equations set type to set. \see OPENCMISS_EquationsSetTypes */,
    const int equationsSetSubtype /*<The equations set subtype to set. \see OPENCMISS_EquationsSetSubtypes */);

/*>Sets/changes the equations set specification i.e., equations set class, type and subtype for an equations set identified by an object. */
CMISSError CMISSEquationsSet_SpecificationSet(CMISSEquationsSetType equationsSet /*<The equations set to set the specification for. */,
    const int equationsSetClass /*<The equations set class to set. \see OPENCMISS_EquationsSetClasses */,
    const int equationsSetType /*<The equations set type to set. \see OPENCMISS_EquationsSetTypes */,
    const int equationsSetSubtype /*<The equations set subtype to set. \see OPENCMISS_EquationsSetSubtypes */);

%apply (const int DIM1, double *IN_ARRAY1){(const int xiSize, const double *xi)};
%apply (double ARGOUT_ARRAY1[ANY]){(double values[6])};
/*>Calculate the strain tensor at a given element xi location, for an equations set identified by a user number. */
CMISSError CMISSEquationsSet_StrainInterpolateXiNum(const int regionUserNumber /*<The user number of the region containing the equations set. */,
    const int equationsSetUserNumber /*<The user number of the equations set to calculate the strain for. */,
    const int userElementNumber /*<The user element number of the field to interpolate. */,
    const int xiSize /*<Length of xi */,
    const double *xi /*<The element xi to interpolate the field at. */,
    double values[6] /*<The interpolated strain tensor values. */);
%clear (const int xiSize, const double *xi);
%clear (double values[6]);

%apply (const int DIM1, double *IN_ARRAY1){(const int xiSize, const double *xi)};
%apply (double ARGOUT_ARRAY1[ANY]){(double values[6])};
/*>Calculate the strain tensor at a given element xi location, for an equations set identified by an object. */
CMISSError CMISSEquationsSet_StrainInterpolateXi(const CMISSEquationsSetType equationsSet /*<A pointer to the equations set to interpolate strain for. */,
    const int userElementNumber /*<The user element number of the field to interpolate. */,
    const int xiSize /*<Length of xi */,
    const double *xi /*<The element xi to interpolate the field at. */,
    double values[6] /*<The interpolated strain tensor values. */);
%clear (const int xiSize, const double *xi);
%clear (double values[6]);

%apply (int *DummyOutputScalar){(int *interpolationType)};
/*>Returns the interpolation type for a field variable component for a field identified by a user number. */
CMISSError CMISSField_ComponentInterpolationGetNum(const int regionUserNumber /*<The user number of the region containing the field to get the interpolation type for. */,
    const int fieldUserNumber /*<The user number of the field to get the interpolation type for. */,
    const int variableType /*<The variable type of the field to get the interpolation type for. \see OPENCMISS_FieldVariableTypes */,
    const int componentNumber /*<The component number of the field variable to get the interpolation type for. */,
    int *interpolationType /*<On return, the interpolation type. \see OPENCMISS_FieldInterpolationTypes */);
%clear (int *interpolationType);

%apply (int *DummyOutputScalar){(int *interpolationType)};
/*>Returns the interpolation type for a field variable component for a field identified by an object. */
CMISSError CMISSField_ComponentInterpolationGet(const CMISSFieldType field /*<The field to get the interpolation type for. */,
    const int variableType /*<The variable type of the field to get the interpolation type for. \see OPENCMISS_FieldVariableTypes */,
    const int componentNumber /*<The component number of the field variable to get the interpolation type for. */,
    int *interpolationType /*<On return, the interpolation type. \see OPENCMISS_FieldInterpolationTypes */);
%clear (int *interpolationType);

/*>Sets/changes the interpolation type for a field variable component for a field identified by a user number. */
CMISSError CMISSField_ComponentInterpolationSetNum(const int regionUserNumber /*<The user number of the region containing the field to set the interpolation type for. */,
    const int fieldUserNumber /*<The user number of the field to set the interpolation type for. */,
    const int variableType /*<The variable type of the field to set the interpolation type for. \see OPENCMISS_FieldVariableTypes */,
    const int componentNumber /*<The component number of the field variable to set the interpolation type for. */,
    const int interpolationType /*<The interpolation type to set. \see OPENCMISS_FieldInterpolationTypes */);

/*>Sets/changes the interpolation type for a field variable component for a field identified by an object. */
CMISSError CMISSField_ComponentInterpolationSet(const CMISSFieldType field /*<The field to set the interpolation type for. */,
    const int variableType /*<The variable type of the field to set the interpolation type for. \see OPENCMISS_FieldVariableTypes */,
    const int componentNumber /*<The component number of the field variable to set the interpolation type for. */,
    const int interpolationType /*<The interpolation type to set. \see OPENCMISS_FieldInterpolationTypes */);

%apply (const int Size, char *DummyOutputString){(const int labelSize, char *label)};
/*>Returns the character string label for a field variable component for a field identified by a user number. */
CMISSError CMISSField_ComponentLabelGetNum(const int regionUserNumber /*<The user number of the region containing the field to get the label for. */,
    const int fieldUserNumber /*<The user number of the field to get the label for. */,
    const int variableType /*<The variable type of the field to get the label for. \see OPENCMISS_FieldVariableTypes */,
    const int componentNumber /*<The component number of the field variable to get the label for. */,
    const int labelSize /*<Length of label string */,
    char *label /*<On return, the field variable component label. */);
%clear (const int labelSize, char *label);

%apply (const int Size, char *DummyOutputString){(const int labelSize, char *label)};
/*>Returns the character string label for a field variable component for a field identified by an object. */
CMISSError CMISSField_ComponentLabelGet(const CMISSFieldType field /*<The field to get the label for. */,
    const int variableType /*<The variable type of the field to get the label for. \see OPENCMISS_FieldVariableTypes */,
    const int componentNumber /*<The component number of the field variable to get the label for. */,
    const int labelSize /*<Length of label string */,
    char *label /*<On return, the field variable component label. */);
%clear (const int labelSize, char *label);

%apply (const int Size, const char *DummyInputString){(const int labelSize, const char *label)};
/*>Sets/changes the character string label for a field variable component for a field identified by a user number. */
CMISSError CMISSField_ComponentLabelSetNum(const int regionUserNumber /*<The user number of the region containing the field to set the label for. */,
    const int fieldUserNumber /*<The user number of the field to set the label for. */,
    const int variableType /*<The variable type of the field to set the label for. \see OPENCMISS_FieldVariableTypes */,
    const int componentNumber /*<The component number of the field variable to set the label for. */,
    const int labelSize /*<Length of label string */,
    const char *label /*<The field variable component label to set. */);
%clear (const int labelSize, const char *label);

%apply (const int Size, const char *DummyInputString){(const int labelSize, const char *label)};
/*>Sets/changes the character string label for a field variable component for a field identified by an object. */
CMISSError CMISSField_ComponentLabelSet(const CMISSFieldType field /*<The field to set the label for. */,
    const int variableType /*<The variable type of the field to set the label for. \see OPENCMISS_FieldVariableTypes */,
    const int componentNumber /*<The component number of the field variable to set the label for. */,
    const int labelSize /*<Length of label string */,
    const char *label /*<The field variable component label to set. */);
%clear (const int labelSize, const char *label);

%apply (int *DummyOutputScalar){(int *meshComponent)};
/*>Returns the mesh component number for a field variable component for a field identified by a user number. */
CMISSError CMISSField_ComponentMeshComponentGetNum(const int regionUserNumber /*<The user number of the region containing the field to get the mesh component number for. */,
    const int fieldUserNumber /*<The user number of the field to get the mesh component number for. */,
    const int variableType /*<The variable type of the field to get the mesh component number for. \see OPENCMISS_FieldVariableTypes */,
    const int componentNumber /*<The component number of the field variable to get the mesh component number for. */,
    int *meshComponent /*<On return, the mesh component number. */);
%clear (int *meshComponent);

%apply (int *DummyOutputScalar){(int *meshComponent)};
/*>Returns the mesh component number for a field variable component for a field identified by an object. */
CMISSError CMISSField_ComponentMeshComponentGet(const CMISSFieldType field /*<The field to get the mesh component number for. */,
    const int variableType /*<The variable type of the field to get the mesh component number for. \see OPENCMISS_FieldVariableTypes */,
    const int componentNumber /*<The component number of the field variable to get the mesh component number for. */,
    int *meshComponent /*<On return, the mesh component number. */);
%clear (int *meshComponent);

/*>Sets/changes the mesh component number for a field variable component for a field identified by a user number. */
CMISSError CMISSField_ComponentMeshComponentSetNum(const int regionUserNumber /*<The user number of the region containing the field to set the mesh component number for. */,
    const int fieldUserNumber /*<The user number of the field to set the mesh component number for. */,
    const int variableType /*<The variable type of the field to set the mesh component number for. \see OPENCMISS_FieldVariableTypes */,
    const int componentNumber /*<The component number of the field variable to set the mesh component number for. */,
    const int meshComponent /*<The mesh component number to set. */);

/*>Sets/changes the mesh component number for a field variable component for a field identified by an object. */
CMISSError CMISSField_ComponentMeshComponentSet(const CMISSFieldType field /*<The field to set the mesh component number for. */,
    const int variableType /*<The variable type of the field to set the mesh component number for. \see OPENCMISS_FieldVariableTypes */,
    const int componentNumber /*<The component number of the field variable to set the mesh component number for. */,
    const int meshComponent /*<The mesh component number to set. */);

/*>Initialises the values of parameter set of a field variable component to an integer constant value for a field identified by a user number. */
CMISSError CMISSField_ComponentValuesInitialiseIntgNum(const int regionUserNumber /*<The user number of the region containing the field to initialise the field variable component for. */,
    const int fieldUserNumber /*<The user number of the field to initialise the field variable component for for. */,
    const int variableType /*<The variable type of the field to initialise the field variable component for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to initialise the field variable component for. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to initialise the field variable component for. */,
    const int value /*<The value to initialise the parameter set for. */);

/*>Initialises the values of parameter set of a field variable component to an integer constant value for a field identified by an object. */
CMISSError CMISSField_ComponentValuesInitialiseIntg(const CMISSFieldType field /*<The field to initialise the field variable component for. */,
    const int variableType /*<The variable type of the field to initialise the field variable component for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to initialise the field variable component for. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to initialise the field variable component for. */,
    const int value /*<The value to initialise the parameter set for. */);

/*>Initialises the values of parameter set of a field variable component to a single precision constant value for a field identified by a user number. */
CMISSError CMISSField_ComponentValuesInitialiseSPNum(const int regionUserNumber /*<The user number of the region containing the field to initialise the field variable component for. */,
    const int fieldUserNumber /*<The user number of the field to initialise the field variable component for for. */,
    const int variableType /*<The variable type of the field to initialise the field variable component for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to initialise the field variable component for. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to initialise the field variable component for. */,
    const float value /*<The value to initialise the parameter set for. */);

/*>Initialises the values of parameter set of a field variable component to a single precision constant value for a field identified by an object. */
CMISSError CMISSField_ComponentValuesInitialiseSP(const CMISSFieldType field /*<The field to initialise the field variable component for. */,
    const int variableType /*<The variable type of the field to initialise the field variable component for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to initialise the field variable component for. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to initialise the field variable component for. */,
    const float value /*<The value to initialise the parameter set for. */);

/*>Initialises the values of parameter set of a field variable component to a double precision constant value for a field identified by a user number. */
CMISSError CMISSField_ComponentValuesInitialiseDPNum(const int regionUserNumber /*<The user number of the region containing the field to initialise the field variable component for. */,
    const int fieldUserNumber /*<The user number of the field to initialise the field variable component for for. */,
    const int variableType /*<The variable type of the field to initialise the field variable component for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to initialise the field variable component for. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to initialise the field variable component for. */,
    const double value /*<The value to initialise the parameter set for. */);

/*>Initialises the values of parameter set of a field variable component to a double precision constant value for a field identified by an object. */
CMISSError CMISSField_ComponentValuesInitialiseDP(const CMISSFieldType field /*<The field to initialise the field variable component for. */,
    const int variableType /*<The variable type of the field to initialise the field variable component for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to initialise the field variable component for. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to initialise the field variable component for. */,
    const double value /*<The value to initialise the parameter set for. */);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *value)};
/*>Initialises the values of parameter set of a field variable component to a logical constant value for a field identified by a user number. */
CMISSError CMISSField_ComponentValuesInitialiseLNum(const int regionUserNumber /*<The user number of the region containing the field to initialise the field variable component for. */,
    const int fieldUserNumber /*<The user number of the field to initialise the field variable component for for. */,
    const int variableType /*<The variable type of the field to initialise the field variable component for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to initialise the field variable component for. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to initialise the field variable component for. */,
    const CMISSBool value /*<The value to initialise the parameter set for. */);
%clear (const CMISSBool *value);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *value)};
/*>Initialises the values of parameter set of a field variable component to a logical constant value for a field identified by an object. */
CMISSError CMISSField_ComponentValuesInitialiseL(const CMISSFieldType field /*<The field to initialise the field variable component for. */,
    const int variableType /*<The variable type of the field to initialise the field variable component for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to initialise the field variable component for. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to initialise the field variable component for. */,
    const CMISSBool value /*<The value to initialise the parameter set for. */);
%clear (const CMISSBool *value);

%apply (int *DummyOutputScalar){(int *dataType)};
/*>Returns the data type for a field variable for a field identified by a user number. */
CMISSError CMISSField_DataTypeGetNum(const int regionUserNumber /*<The user number of the region containing the field to get the data type for. */,
    const int fieldUserNumber /*<The user number of the field to get the data type for. */,
    const int variableType /*<The variable type of the field to get the data type for. \see OPENCMISS_FieldVariableTypes */,
    int *dataType /*<On return, the field variable data type. \see OPENCMISS_FieldDataTypes */);
%clear (int *dataType);

%apply (int *DummyOutputScalar){(int *dataType)};
/*>Returns the data type for a field variable for a field identified by an object. */
CMISSError CMISSField_DataTypeGet(const CMISSFieldType field /*<The field to get the data type for. */,
    const int variableType /*<The variable type of the field to get the data type for. \see OPENCMISS_FieldVariableTypes */,
    int *dataType /*<On return, the field variable data type. \see OPENCMISS_FieldDataTypes */);
%clear (int *dataType);

/*>Sets/changes the data type for a field variable for a field identified by a user number. */
CMISSError CMISSField_DataTypeSetNum(const int regionUserNumber /*<The user number of the region containing the field to set the data type for. */,
    const int fieldUserNumber /*<The user number of the field to set the data type for. */,
    const int variableType /*<The variable type of the field to set the data type for. \see OPENCMISS_FieldVariableTypes */,
    const int dataType /*<The field variable data type to set. \see OPENCMISS_FieldDataTypes */);

/*>Sets/changes the data type for a field variable for a field identified by an object. */
CMISSError CMISSField_DataTypeSet(const CMISSFieldType field /*<The field to set the data type for. */,
    const int variableType /*<The variable type of the field to set the data type for. \see OPENCMISS_FieldVariableTypes */,
    const int dataType /*<The field variable data type to set. \see OPENCMISS_FieldDataTypes */);

%apply (int *DummyOutputScalar){(int *DOFOrderType)};
/*>Returns the DOF order type for a field variable for a field identified by a user number. */
CMISSError CMISSField_DOFOrderTypeGetNum(const int regionUserNumber /*<The user number of the region containing the field to get the DOF Order type for. */,
    const int fieldUserNumber /*<The user number of the field to get the DOF Order type for. */,
    const int variableType /*<The variable type of the field to get the DOF Order type for. \see OPENCMISS_FieldVariableTypes */,
    int *DOFOrderType /*<On return, the field variable DOF Order type. \see OPENCMISS_FieldDOFOrderTypes */);
%clear (int *DOFOrderType);

%apply (int *DummyOutputScalar){(int *DOFOrderType)};
/*>Returns the DOF Order type for a field variable for a field identified by an object. */
CMISSError CMISSField_DOFOrderTypeGet(const CMISSFieldType field /*<The field to get the DOF order type for. */,
    const int variableType /*<The variable type of the field to get the DOF order type for. \see OPENCMISS_FieldVariableTypes */,
    int *DOFOrderType /*<On return, the field variable DOF order type. \see OPENCMISS_FieldDOFOrderTypes */);
%clear (int *DOFOrderType);

/*>Sets/changes the DOF order type for a field variable for a field identified by a user number. */
CMISSError CMISSField_DOFOrderTypeSetNum(const int regionUserNumber /*<The user number of the region containing the field to set the DOF Order type for. */,
    const int fieldUserNumber /*<The user number of the field to set the DOF Order type for. */,
    const int variableType /*<The variable type of the field to set the DOF Order type for. \see OPENCMISS_FieldVariableTypes */,
    const int DOFOrderType /*<The field variable DOF Order type to set. \see OPENCMISS_FieldDOFOrderTypes */);

/*>Sets/changes the DOF Order type for a field variable for a field identified by an object. */
CMISSError CMISSField_DOFOrderTypeSet(const CMISSFieldType field /*<The field to set the DOF order type for. */,
    const int variableType /*<The variable type of the field to set the DOF order type for. \see OPENCMISS_FieldVariableTypes */,
    const int DOFOrderType /*<The field variable DOF order type to set. \see OPENCMISS_FieldDOFOrderTypes */);

/*>Finishes the creation of a field identified by a user number. */
CMISSError CMISSField_CreateFinishNum(const int regionUserNumber /*<The user number of the region containing the field to finish the creation of. */,
    const int fieldUserNumber /*<The user number of the field to finish the creation of. */);

/*>Finishes the creation of a field identified by an object. */
CMISSError CMISSField_CreateFinish(CMISSFieldType field /*<The field to finish the creation of. */);

/*>Starts the creation of a field identified by a user number. */
CMISSError CMISSField_CreateStartNum(const int fieldUserNumber /*<The user number of the field to start the creation of. */,
    const int regionUserNumber /*<The user number of the region containing the field to start the creation of. */);

/*>Starts the creation of a field on an interface identified by an object. */
CMISSError CMISSField_CreateStartInterface(const int fieldUserNumber /*<The user number of the field to start the creation of. */,
    const CMISSInterfaceType interface /*<The interface to create the field on. */,
    CMISSFieldType field /*<On return, the created field. */);

/*>Starts the creation of a field on a region identified by an object. */
CMISSError CMISSField_CreateStart(const int fieldUserNumber /*<The user number of the field to start the creation of. */,
    const CMISSRegionType region /*<The region to create the field on. */,
    CMISSFieldType field /*<On return, the created field. */);

%apply (int *DummyOutputScalar){(int *dependentType)};
/*>Returns the dependent type for a field identified by a user number. */
CMISSError CMISSField_DependentTypeGetNum(const int regionUserNumber /*<The user number of the region containing the field to get the dependent type for. */,
    const int fieldUserNumber /*<The user number of the field to get the dependent type for. */,
    int *dependentType /*<On return, the field dependent type. \see OPENCMISS_FieldDependentTypes */);
%clear (int *dependentType);

%apply (int *DummyOutputScalar){(int *dependentType)};
/*>Returns the dependent type for a field identified by an object. */
CMISSError CMISSField_DependentTypeGet(const CMISSFieldType field /*<The field to get the dependent type for. */,
    int *dependentType /*<On return, the field dependent type. \see OPENCMISS_FieldDependentTypes */);
%clear (int *dependentType);

/*>Sets/changes the dependent type for a field identified by a user number. */
CMISSError CMISSField_DependentTypeSetNum(const int regionUserNumber /*<The user number of the region containing the field to get the dependent type for. */,
    const int fieldUserNumber /*<The user number of the field to get the dependent type for. */,
    const int dependentType /*<The field dependent type to set. \see OPENCMISS_FieldDependentTypes */);

/*>Sets/changes the dependent type for a field identified by an object. */
CMISSError CMISSField_DependentTypeSet(const CMISSFieldType field /*<The field to set the dependent type for. */,
    const int dependentType /*<The field dependent type to set. \see OPENCMISS_FieldDependentTypes */);

/*>Destroys a field identified by a user number. */
CMISSError CMISSField_DestroyNum(const int regionUserNumber /*<The user number of the region containing the field to destroy. */,
    const int fieldUserNumber /*<The user number of the field to destroy. */);

/*>Destroys a field identified by an object. */
CMISSError CMISSField_Destroy(const CMISSFieldType field /*<The field to destroy. */);

%apply (int *DummyOutputScalar){(int *dimension)};
/*>Returns the dimension for a field identified by a user number. */
CMISSError CMISSField_DimensionGetNum(const int regionUserNumber /*<The user number of the region containing the field to get the dimension for. */,
    const int fieldUserNumber /*<The user number of the field to get the dimension for. */,
    const int variableType /*<The variable type of the field to get the dimension for. \see OPENCMISS_FieldVariableTypes */,
    int *dimension /*<On return, the field dimension. \see OPENCMISS_FieldDimensionTypes */);
%clear (int *dimension);

%apply (int *DummyOutputScalar){(int *dimension)};
/*>Returns the dimension for a field identified by an object. */
CMISSError CMISSField_DimensionGet(const CMISSFieldType field /*<The field to get the dimension for. */,
    const int variableType /*<The variable type of the field to get the dimension for. \see OPENCMISS_FieldVariableTypes */,
    int *dimension /*<On return, the field dimension. \see OPENCMISS_FieldDimension */);
%clear (int *dimension);

/*>Sets/changes the dimension for a field identified by a user number. */
CMISSError CMISSField_DimensionSetNum(const int regionUserNumber /*<The user number of the region containing the field to set the dimension for. */,
    const int fieldUserNumber /*<The user number of the field to set the dimension for. */,
    const int variableType /*<The variable type of the field to get the dimension for. \see OPENCMISS_FieldVariableTypes */,
    const int dimension /*<The field dimension to set. \see OPENCMISS_FieldDimensionTypes */);

/*>Sets/changes the dimension for a field identified by an object. */
CMISSError CMISSField_DimensionSet(const CMISSFieldType field /*<The field to set the dimension for. */,
    const int variableType /*<The variable type of the field to get the dimension for. \see OPENCMISS_FieldVariableTypes */,
    const int dimension /*<The field dimension to set. \see OPENCMISS_FieldDimension */);

%apply (int *DummyOutputScalar){(int *geometricFieldUserNumber)};
/*>Returns the geometric field for a field identified by a user number. */
CMISSError CMISSField_GeometricFieldGetNum(const int regionUserNumber /*<The user number of the region containing the field to get the geometric field for. */,
    const int fieldUserNumber /*<The user number of the field to get the geometric field for. */,
    int *geometricFieldUserNumber /*<On return, the field geometric field user number. */);
%clear (int *geometricFieldUserNumber);

/*>Returns the geometric field for a field identified by an object. */
CMISSError CMISSField_GeometricFieldGet(const CMISSFieldType field /*<The field to get the geometric field for. */,
    CMISSFieldType geometricField /*<On return, the geometric field for the field. */);

/*>Sets/changes the geometric field for a field identified by a user number. */
CMISSError CMISSField_GeometricFieldSetNum(const int regionUserNumber /*<The user number of the region containing the field to set the geometric field for. */,
    const int fieldUserNumber /*<The user number of the field to set the geometric field for. */,
    const int geometricFieldUserNumber /*<The field geometric field user number to set. */);

/*>Sets/changes the geometric field for a field identified by an object. */
CMISSError CMISSField_GeometricFieldSet(const CMISSFieldType field /*<The field to set the geometric field for. */,
    const CMISSFieldType geometricField /*<The geometric field for the field to set. */);

%apply (double *DummyOutputScalar){(double *lineLength)};
/*>Gets the line length between nodes of a geometric field for a given element number and element basis line number by a user number. */
CMISSError CMISSField_GeometricParametersElementLineLengthGetNum(const int regionUserNumber /*<The user number of the region containing the field to obtain the line length from */,
    const int geometricFieldUserNumber /*<The geometric field user number to obtain the line length from */,
    const int elementNumber /*<The element to get the line length for */,
    const int elementLineNumber /*<The element basis line to get the length for */,
    double *lineLength /*<The line length of the chosen element line number */);
%clear (double *lineLength);

%apply (double *DummyOutputScalar){(double *lineLength)};
/*>Gets the line length between nodes of a geometric field for a given element number and element basis line number by an object. */
CMISSError CMISSField_GeometricParametersElementLineLengthGet(const CMISSFieldType geometricField /*<The geometric field to obtain the line length from */,
    const int elementNumber /*<The element to get the line length for */,
    const int elementLineNumber /*<The element basis line to get the length for */,
    double *lineLength /*<The line length of the chosen element line number */);
%clear (double *lineLength);

%apply (double *DummyOutputScalar){(double *scaleFactor)};
/*>Gets the scale factor for a particular node identified by a user number. */
CMISSError CMISSField_ParameterSetNodeScaleFactorGetNum(const int regionUserNumber /*<The user number of the region containing the field to get the scalefactor for */,
    const int fieldUserNumber /*<The field to get scale factor for */,
    const int variableType /*<The field variable type to get the scale factor for */,
    const int versionNumber /*<The user number of the node derivative version to get the scale factor for */,
    const int derivativeNumber /*<The user number of the node derivative to get the scale factor for */,
    const int nodeUserNumber /*<The user number of the node to get the scale factor for */,
    const int componentNumber /*<The component number of the field to get the scale factor for */,
    double *scaleFactor /*<The scale factor of the specified node */);
%clear (double *scaleFactor);

%apply (double *DummyOutputScalar){(double *scaleFactor)};
/*>Gets the scale factor for a particular node identified by an object. */
CMISSError CMISSField_ParameterSetNodeScaleFactorGet(const CMISSFieldType field /*<The field to get scale factor for */,
    const int variableType /*<The field variable type to get the scale factor for */,
    const int versionNumber /*<The user number of the node derivative version to get the scale factor for */,
    const int derivativeNumber /*<The user number of the node derivative to get the scale factor for */,
    const int nodeUserNumber /*<The user number of the node to get the scale factor for */,
    const int componentNumber /*<The component number of the field to get the scale factor for */,
    double *scaleFactor /*<The scale factor of the specified node */);
%clear (double *scaleFactor);

%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int scaleFactorsSize, double *scaleFactors)};
/*>Gets the scale factors for all nodes identified by a user number. */
CMISSError CMISSField_ParameterSetNodeScaleFactorsGetNum(const int regionUserNumber /*<The user number of the region containing the field to get the scalefactor for */,
    const int fieldUserNumber /*<The field to get scale factor for */,
    const int variableType /*<The field variable type to get the scale factor for */,
    const int meshComponentNumber /*<The mesh omponent number of the field to set the scale factor for */,
    const int scaleFactorsSize /*<Length of scaleFactors */,
    double *scaleFactors /*<The scale factors */);
%clear (const int scaleFactorsSize, double *scaleFactors);

%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int scaleFactorsSize, double *scaleFactors)};
/*>Gets the scale factors for all nodes identified by an object. */
CMISSError CMISSField_ParameterSetNodeScaleFactorsGet(const CMISSFieldType field /*<The field to get scale factor for */,
    const int variableType /*<The field variable type to get the scale factor for */,
    const int meshComponentNumber /*<The mesh omponent number of the field to set the scale factor for */,
    const int scaleFactorsSize /*<Length of scaleFactors */,
    double *scaleFactors /*<The scale factors */);
%clear (const int scaleFactorsSize, double *scaleFactors);

%apply (int *DummyOutputScalar){(int *numberOfScaleFactorsDofs)};
/*>Gets the number of scale factor dofs, identified by a user number. */
CMISSError CMISSField_ParameterSetNodeNumberOfScaleFactorDofsGetNum(const int regionUserNumber /*<The user number of the region containing the field to get the number of scalefactors for */,
    const int fieldUserNumber /*<The field to get the number of scale factor dofs for */,
    const int variableType /*<The field variable type to get the number of scale factor dofs for */,
    const int meshComponentNumber /*<The mesh component number of the field to get the number of scale factor dofs for */,
    int *numberOfScaleFactorsDofs /*<The number of scale factor dofs */);
%clear (int *numberOfScaleFactorsDofs);

%apply (int *DummyOutputScalar){(int *numberOfScaleFactorsDofs)};
/*>Gets the number of scale factor dofs, identified by an object. */
CMISSError CMISSField_ParameterSetNodeNumberOfScaleFactorDofsGet(const CMISSFieldType field /*<The field to get the number of scale factor dofs for */,
    const int variableType /*<The field variable type to get the number of scale factor dofs for */,
    const int meshComponentNumber /*<The mesh component number of the field to get the number of scale factor dofs for */,
    int *numberOfScaleFactorsDofs /*<The number of scale factor dofs */);
%clear (int *numberOfScaleFactorsDofs);

/*>Sets the scale factor for a particular node identified by a user number. */
CMISSError CMISSField_ParameterSetNodeScaleFactorSetNum(const int regionUserNumber /*<The user number of the region containing the field to set the scalefactor for */,
    const int fieldUserNumber /*<The field to set scale factor for */,
    const int variableType /*<The field variable type to set the scale factor for */,
    const int versionNumber /*<The user number of the node derivative version to set the scale factor for */,
    const int derivativeNumber /*<The user number of the node derivative to set the scale factor for */,
    const int nodeUserNumber /*<The user number of the node to set the scale factor for */,
    const int componentNumber /*<The component number of the field to set the scale factor for */,
    const double scaleFactor /*<The scale factor of the specified node */);

/*>Sets the scale factor for a particular node identified by an object. */
CMISSError CMISSField_ParameterSetNodeScaleFactorSet(const CMISSFieldType field /*<The field to set scale factor for */,
    const int variableType /*<The field variable type to set the scale factor for */,
    const int versionNumber /*<The user number of the node derivative version to set the scale factor for */,
    const int derivativeNumber /*<The user number of the node derivative to set the scale factor for */,
    const int nodeUserNumber /*<The user number of the node to set the scale factor for */,
    const int componentNumber /*<The component number of the field to set the scale factor for */,
    const double scaleFactor /*<The scale factor of the specified node */);

%apply (const int DIM1, double *IN_ARRAY1){(const int scaleFactorsSize, const double *scaleFactors)};
/*>Sets the scale factors for all nodes identified by a user number. */
CMISSError CMISSField_ParameterSetNodeScaleFactorsSetNum(const int regionUserNumber /*<The user number of the region containing the field to set the scalefactor for */,
    const int fieldUserNumber /*<The field to set scale factor for */,
    const int variableType /*<The field variable type to set the scale factor for */,
    const int meshComponentNumber /*<The mesh omponent number of the field to set the scale factor for */,
    const int scaleFactorsSize /*<Length of scaleFactors */,
    const double *scaleFactors /*<The scale factors */);
%clear (const int scaleFactorsSize, const double *scaleFactors);

%apply (const int DIM1, double *IN_ARRAY1){(const int scaleFactorsSize, const double *scaleFactors)};
/*>Sets the scale factors for all nodes identified by an object. */
CMISSError CMISSField_ParameterSetNodeScaleFactorsSet(const CMISSFieldType field /*<The field to set scale factor for */,
    const int variableType /*<The field variable type to set the scale factor for */,
    const int meshComponentNumber /*<The component number of the field to set the scale factor for */,
    const int scaleFactorsSize /*<Length of scaleFactors */,
    const double *scaleFactors /*<The scale factors */);
%clear (const int scaleFactorsSize, const double *scaleFactors);

%apply (const int Size, char *DummyOutputString){(const int labelSize, char *label)};
/*>Returns the character string label for a field identified by a user number. */
CMISSError CMISSField_LabelGetNum(const int regionUserNumber /*<The user number of the region containing the field to get the label for. */,
    const int fieldUserNumber /*<The user number of the field to get the label for. */,
    const int labelSize /*<Length of label string */,
    char *label /*<On return, the field label. */);
%clear (const int labelSize, char *label);

%apply (const int Size, char *DummyOutputString){(const int labelSize, char *label)};
/*>Returns the character string label for a field identified by an object. */
CMISSError CMISSField_LabelGet(const CMISSFieldType field /*<The field to get the label for. */,
    const int labelSize /*<Length of label string */,
    char *label /*<On return, the field label. */);
%clear (const int labelSize, char *label);

%apply (const int Size, const char *DummyInputString){(const int labelSize, const char *label)};
/*>Sets/changes the character string label for a field identified by a user number. */
CMISSError CMISSField_LabelSetNum(const int regionUserNumber /*<The user number of the region containing the field to set the label for. */,
    const int fieldUserNumber /*<The user number of the field to set the label for. */,
    const int labelSize /*<Length of label string */,
    const char *label /*<The field label to set. */);
%clear (const int labelSize, const char *label);

%apply (const int Size, const char *DummyInputString){(const int labelSize, const char *label)};
/*>Sets/changes the character string label for a field identified by an object. */
CMISSError CMISSField_LabelSet(const CMISSFieldType field /*<The field to set the label for. */,
    const int labelSize /*<Length of label string */,
    const char *label /*<The field label to set. */);
%clear (const int labelSize, const char *label);

%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int positionSize, double *position)};
%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int normalSize, double *normal)};
%apply (const int DIM1, const int DIM2, double *ARGOUT_FARRAY2){(const int tangentsSize1, const int tangentsSize2, double *tangents)};
/*>Returns the interpolation type for a field variable component for a field identified by a user number. */
CMISSError CMISSField_PositionNormalTangentCalculateNodeNum(const int regionUserNumber /*<The user number of the region containing the field to get the interpolation type for. */,
    const int fieldUserNumber /*<The user number of the field to get the interpolation type for. */,
    const int variableType /*<The variable type of the field to get the interpolation type for. \see OPENCMISS_FieldVariableTypes */,
    const int componentNumber /*<The component number of the field variable to get the interpolation type for. */,
    const int localNodeNumber /*<The local node number of the field variable to get the data type for. */,
    const int positionSize /*<Length of position */,
    double *position /*<Actual useful outputs */,
    const int normalSize /*<Length of normal */,
    double *normal /*<Actual useful outputs */,
    const int tangentsSize1 /*<Size of dimension 1 of tangents */,
    const int tangentsSize2 /*<Size of dimension 2 of tangents */,
    double *tangents /*<Actual useful outputs */);
%clear (const int positionSize, double *position);
%clear (const int normalSize, double *normal);
%clear (const int tangentsSize1, const int tangentsSize2, double *tangents);

%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int positionSize, double *position)};
%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int normalSize, double *normal)};
%apply (const int DIM1, const int DIM2, double *ARGOUT_FARRAY2){(const int tangentsSize1, const int tangentsSize2, double *tangents)};
/*>Returns the position, normal and tangents for a field node for a field identified by an object. */
CMISSError CMISSField_PositionNormalTangentCalculateNode(const CMISSFieldType field /*<The field to get the interpolation type for. */,
    const int variableType /*<The variable type of the field to get the interpolation type for. \see OPENCMISS_FieldVariableTypes */,
    const int componentNumber /*<The component number of the field variable to get the data type for. */,
    const int localNodeNumber /*<The local node number of the field variable to get the data type for. */,
    const int positionSize /*<Length of position */,
    double *position /*<Actual useful outputs */,
    const int normalSize /*<Length of normal */,
    double *normal /*<Actual useful outputs */,
    const int tangentsSize1 /*<Size of dimension 1 of tangents */,
    const int tangentsSize2 /*<Size of dimension 2 of tangents */,
    double *tangents /*<Actual useful outputs */);
%clear (const int positionSize, double *position);
%clear (const int normalSize, double *normal);
%clear (const int tangentsSize1, const int tangentsSize2, double *tangents);

%apply (int *DummyOutputScalar){(int *decompositionUserNumber)};
/*>Returns the mesh decomposition for a field identified by a user number. */
CMISSError CMISSField_MeshDecompositionGetNum(const int regionUserNumber /*<The user number of the region containing the field to get the mesh decomposition for. */,
    const int fieldUserNumber /*<The user number of the field to get the mesh decomposition for. */,
    int *decompositionUserNumber /*<On return, the field decomposition user number. */);
%clear (int *decompositionUserNumber);

/*>Returns the mesh decomposition for a field identified by an object. */
CMISSError CMISSField_MeshDecompositionGet(const CMISSFieldType field /*<The field to get the mesh decomposition for. */,
    CMISSDecompositionType meshDecomposition /*<On return, the mesh decomposition for the field. */);

/*>Sets/changes the mesh decomposition for a field identified by a user number. */
CMISSError CMISSField_MeshDecompositionSetNum(const int regionUserNumber /*<The user number of the region containing the field to set the mesh decomposition for. */,
    const int fieldUserNumber /*<The user number of the field to set the mesh decomposition for. */,
    const int meshUserNumber /*<The user number of the mesh to set the mesh decomposition for. */,
    const int decompositionUserNumber /*<The field mesh decomposition user number to set. */);

/*>Sets/changes the mesh decomposition for a field identified by an object. */
CMISSError CMISSField_MeshDecompositionSet(const CMISSFieldType field /*<The field to get the mesh decomposition for. */,
    const CMISSDecompositionType meshDecomposition /*<The mesh decomposition for the field to set. */);

/*>Sets/changes the data projection for a field identified by a user number. */
CMISSError CMISSField_DataProjectionSetNum(const int regionUserNumber /*<The user number of the region containing the field to set the mesh decomposition for. */,
    const int fieldUserNumber /*<The user number of the field to set the mesh decomposition for. */,
    const int dataProjectionUserNumber /*<The field data projection user number to set. */);

/*>Sets/changes the data projection for a field identified by an object. */
CMISSError CMISSField_DataProjectionSet(const CMISSFieldType field /*<The field to get the mesh decomposition for. */,
    const CMISSDataProjectionType dataProjection /*<The data projection for the field to set. */);

%apply (int *DummyOutputScalar){(int *numberOfComponents)};
/*>Returns the number of componenets for a field variable for a field identified by a user number. */
CMISSError CMISSField_NumberOfComponentsGetNum(const int regionUserNumber /*<The user number of the region containing the field to get the number of components for. */,
    const int fieldUserNumber /*<The user number of the field to get the number of components for. */,
    const int variableType /*<The variable type of the dependent field to get the number of components for. \see OPENCMISS_FieldVariableTypes */,
    int *numberOfComponents /*<On return, the number of components in the field variable. */);
%clear (int *numberOfComponents);

%apply (int *DummyOutputScalar){(int *numberOfComponents)};
/*>Returns the number of components for a field variable for a field identified by an object. */
CMISSError CMISSField_NumberOfComponentsGet(const CMISSFieldType field /*<The field to get the number of components for. */,
    const int variableType /*<The variable type of the dependent field to get the number of components for. \see OPENCMISS_FieldVariableTypes */,
    int *numberOfComponents /*<On return, the number of components in the field variable. */);
%clear (int *numberOfComponents);

/*>Sets/changes the number of componenets for a field variable for a field identified by a user number. */
CMISSError CMISSField_NumberOfComponentsSetNum(const int regionUserNumber /*<The user number of the region containing the field to set the number of components for. */,
    const int fieldUserNumber /*<The user number of the field to set the number of components for. */,
    const int variableType /*<The variable type of the dependent field to set the number of components for. \see OPENCMISS_FieldVariableTypes */,
    const int numberOfComponents /*<The number of components in the field variable to set. */);

/*>Sets/changes the number of components for a field variable for a field identified by an object. */
CMISSError CMISSField_NumberOfComponentsSet(const CMISSFieldType field /*<The field to set the number of components for. */,
    const int variableType /*<The variable type of the dependent field to set the number of components for. \see OPENCMISS_FieldVariableTypes */,
    const int numberOfComponents /*<The number of components in the field variable to set. */);

%apply (int *DummyOutputScalar){(int *numberOfVariables)};
/*>Returns the number of variables for a field identified by a user number. */
CMISSError CMISSField_NumberOfVariablesGetNum(const int regionUserNumber /*<The user number of the region containing the field to get the number of variables for. */,
    const int fieldUserNumber /*<The user number of the field to get the number of variables for. */,
    int *numberOfVariables /*<On return, the number of variables in the field. */);
%clear (int *numberOfVariables);

%apply (int *DummyOutputScalar){(int *numberOfVariables)};
/*>Returns the number of variables for a field identified by an object. */
CMISSError CMISSField_NumberOfVariablesGet(const CMISSFieldType field /*<The field to get the number of variables for. */,
    int *numberOfVariables /*<On return, the number of variables in the field. */);
%clear (int *numberOfVariables);

/*>Sets/chnages the number of variables for a field identified by a user number. */
CMISSError CMISSField_NumberOfVariablesSetNum(const int regionUserNumber /*<The user number of the region containing the field to set the number of variables for. */,
    const int fieldUserNumber /*<The user number of the field to set the number of variables for. */,
    const int numberOfVariables /*<The number of variables in the field to set. */);

/*>Sets/changes the number of variables for a field identified by an object. */
CMISSError CMISSField_NumberOfVariablesSet(const CMISSFieldType field /*<The field to set the number of variables for. */,
    const int numberOfVariables /*<The number of variables in the field to set. */);

/*>Adds the given integer value to the given parameter set for the constant of the field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetAddConstantIntgNum(const int regionUserNumber /*<The user number of the region containing the field to add the constant to the field parameter set for. */,
    const int fieldUserNumber /*<The user number of the field to add the constant to the field parameter set for. */,
    const int variableType /*<The variable type of the field to add the constant to the field parameter set for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to add the constant to the field parameter set for. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to add the constant to the field parameter set for. */,
    const int value /*<The value to add to the field parameter set. */);

/*>Adds the given integer value to the given parameter set for the constant of the field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetAddConstantIntg(const CMISSFieldType field /*<The field to add the constant to the field parameter set for. */,
    const int variableType /*<The variable type of the field to add the constant to the field parameter set for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to add the constant to the field parameter set for. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to add the constant to the field parameter set for. */,
    const int value /*<The value to add to the field parameter set. */);

/*>Adds the given single precision value to the given parameter set for the constant of the field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetAddConstantSPNum(const int regionUserNumber /*<The user number of the region containing the field to add the constant to the field parameter set for. */,
    const int fieldUserNumber /*<The user number of the field to add the constant to the field parameter set for. */,
    const int variableType /*<The variable type of the field to add the constant to the field parameter set for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to add the constant to the field parameter set for. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to add the constant to the field parameter set for. */,
    const float value /*<The value to add to the field parameter set. */);

/*>Adds the given single precision value to the given parameter set for the constant of the field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetAddConstantSP(const CMISSFieldType field /*<The field to add the constant to the field parameter set for. */,
    const int variableType /*<The variable type of the field to add the constant to the field parameter set for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to add the constant to the field parameter set for. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to add the constant to the field parameter set for. */,
    const float value /*<The value to add to the field parameter set. */);

/*>Adds the given double precision value to the given parameter set for the constant of the field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetAddConstantDPNum(const int regionUserNumber /*<The user number of the region containing the field to add the constant to the field parameter set for. */,
    const int fieldUserNumber /*<The user number of the field to add the constant to the field parameter set for. */,
    const int variableType /*<The variable type of the field to add the constant to the field parameter set for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to add the constant to the field parameter set for. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to add the constant to the field parameter set for. */,
    const double value /*<The value to add to the field parameter set. */);

/*>Adds the given double precision value to the given parameter set for the constant of the field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetAddConstantDP(const CMISSFieldType field /*<The field to add the constant to the field parameter set for. */,
    const int variableType /*<The variable type of the field to add the constant to the field parameter set for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to add the constant to the field parameter set for. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to add the constant to the field parameter set for. */,
    const double value /*<The value to add to the field parameter set. */);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *value)};
/*>Adds the given logical value to the given parameter set for the constant of the field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetAddConstantLNum(const int regionUserNumber /*<The user number of the region containing the field to add the constant to the field parameter set for. */,
    const int fieldUserNumber /*<The user number of the field to add the constant to the field parameter set for. */,
    const int variableType /*<The variable type of the field to add the constant to the field parameter set for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to add the constant to the field parameter set for. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to add the constant to the field parameter set for. */,
    const CMISSBool value /*<The value to add to the field parameter set. */);
%clear (const CMISSBool *value);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *value)};
/*>Adds the given logical value to the given parameter set for the constant of the field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetAddConstantL(const CMISSFieldType field /*<The field to add the constant to the field parameter set for. */,
    const int variableType /*<The variable type of the field to add the constant to the field parameter set for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to add the constant to the field parameter set for. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to add the constant to the field parameter set for. */,
    const CMISSBool value /*<The value to add to the field parameter set. */);
%clear (const CMISSBool *value);

/*>Adds the given integer value to an element in the given parameter set for field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetAddElementIntgNum(const int regionUserNumber /*<The user number of the region containing the field to add the value to the element in the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to add the value to the element in the field parameter set. */,
    const int variableType /*<The variable type of the field to add the value to the element in the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to add the value to the element. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number to add the value to. */,
    const int componentNumber /*<The component number of the field variable to add the value to the element to in the field parameter set. */,
    const int value /*<The value to add to the element in the field parameter set. */);

/*>Adds the given integer value to an element in the given parameter set for field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetAddElementIntg(const CMISSFieldType field /*<The field to add the value to the element in the field parameter set. */,
    const int variableType /*<The variable type of the field to add the value to the element in the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to add the value to the element. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number to add the value to. */,
    const int componentNumber /*<The component number of the field variable to add the value to the element to in the field parameter set. */,
    const int value /*<The value to add to the element in the field parameter set. */);

/*>Adds the given single precision value to an element in the given parameter set for field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetAddElementSPNum(const int regionUserNumber /*<The user number of the region containing the field to add the value to the element in the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to add the value to the element in the field parameter set. */,
    const int variableType /*<The variable type of the field to add the value to the element in the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to add the value to the element. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number to add the value to. */,
    const int componentNumber /*<The component number of the field variable to add the value to the element to in the field parameter set. */,
    const float value /*<The value to add to the element in the field parameter set. */);

/*>Adds the given single precision value to an element in the given parameter set for field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetAddElementSP(const CMISSFieldType field /*<The field to add the value to the element in the field parameter set. */,
    const int variableType /*<The variable type of the field to add the value to the element in the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to add the value to the element. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number to add the value to. */,
    const int componentNumber /*<The component number of the field variable to add the value to the element to in the field parameter set. */,
    const float value /*<The value to add to the element in the field parameter set. */);

/*>Adds the given double precision value to an element in the given parameter set for field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetAddElementDPNum(const int regionUserNumber /*<The user number of the region containing the field to add the value to the element in the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to add the value to the element in the field parameter set. */,
    const int variableType /*<The variable type of the field to add the value to the element in the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to add the value to the element. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number to add the value to. */,
    const int componentNumber /*<The component number of the field variable to add the value to the element to in the field parameter set. */,
    const double value /*<The value to add to the element in the field parameter set. */);

/*>Adds the given double precision value to an element in the given parameter set for field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetAddElementDP(const CMISSFieldType field /*<The field to add the value to the element in the field parameter set. */,
    const int variableType /*<The variable type of the field to add the value to the element in the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to add the value to the element. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number to add the value to. */,
    const int componentNumber /*<The component number of the field variable to add the value to the element to in the field parameter set. */,
    const double value /*<The value to add to the element in the field parameter set. */);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *value)};
/*>Adds the given logical value to an element in the given parameter set for field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetAddElementLNum(const int regionUserNumber /*<The user number of the region containing the field to add the value to the element in the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to add the value to the element in the field parameter set. */,
    const int variableType /*<The variable type of the field to add the value to the element in the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to add the value to the element. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number to add the value to. */,
    const int componentNumber /*<The component number of the field variable to add the value to the element to in the field parameter set. */,
    const CMISSBool value /*<The value to add to the element in the field parameter set. */);
%clear (const CMISSBool *value);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *value)};
/*>Adds the given logical value to an element in the given parameter set for field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetAddElementL(const CMISSFieldType field /*<The field to add the value to the element in the field parameter set. */,
    const int variableType /*<The variable type of the field to add the value to the element in the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to add the value to the element. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number to add the value to. */,
    const int componentNumber /*<The component number of the field variable to add the value to the element to in the field parameter set. */,
    const CMISSBool value /*<The value to add to the element in the field parameter set. */);
%clear (const CMISSBool *value);

/*>Adds the given integer value to an node in the given parameter set for field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetAddNodeIntgNum(const int regionUserNumber /*<The user number of the region containing the field to add the value to the node in the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to add the value to the node in the field parameter set. */,
    const int variableType /*<The variable type of the field to add the value to the node in the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to add the value to the node. \see OPENCMISS_FieldParameterSetTypes */,
    const int versionNumber /*<The node derivative version number of the node to add the value to. */,
    const int derivativeNumber /*<The node derivative number of the node to add the value to. */,
    const int userNodeNumber /*<The user node number to add the value to. */,
    const int componentNumber /*<The component number of the field variable to add the value to the node to in the field parameter set. */,
    const int value /*<The value to add to the node in the field parameter set. */);

/*>Adds the given integer value to an node in the given parameter set for field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetAddNodeIntg(const CMISSFieldType field /*<The field to add the value to the node in the field parameter set. */,
    const int variableType /*<The variable type of the field to add the value to the node in the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to add the value to the node. \see OPENCMISS_FieldParameterSetTypes */,
    const int versionNumber /*<The node derivative version number of the node to add the value to. */,
    const int derivativeNumber /*<The node derivative number of the node to add the value to. */,
    const int userNodeNumber /*<The user node number to add the value to. */,
    const int componentNumber /*<The component number of the field variable to add the value to the node to in the field parameter set. */,
    const int value /*<The value to add to the node in the field parameter set. */);

/*>Adds the given single precision value to an node in the given parameter set for field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetAddNodeSPNum(const int regionUserNumber /*<The user number of the region containing the field to add the value to the node in the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to add the value to the node in the field parameter set. */,
    const int variableType /*<The variable type of the field to add the value to the node in the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to add the value to the node. \see OPENCMISS_FieldParameterSetTypes */,
    const int versionNumber /*<The node derivative version number of the node to add the value to. */,
    const int derivativeNumber /*<The node derivative number of the node to add the value to. */,
    const int userNodeNumber /*<The user node number to add the value to. */,
    const int componentNumber /*<The component number of the field variable to add the value to the node to in the field parameter set. */,
    const float value /*<The value to add to the node in the field parameter set. */);

/*>Adds the given single precision value to an node in the given parameter set for field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetAddNodeSP(const CMISSFieldType field /*<The field to add the value to the node in the field parameter set. */,
    const int variableType /*<The variable type of the field to add the value to the node in the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to add the value to the node. \see OPENCMISS_FieldParameterSetTypes */,
    const int versionNumber /*<The node derivative version number of the node to add the value to. */,
    const int derivativeNumber /*<The node derivative number of the node to add the value to. */,
    const int userNodeNumber /*<The user node number to add the value to. */,
    const int componentNumber /*<The component number of the field variable to add the value to the node to in the field parameter set. */,
    const float value /*<The value to add to the node in the field parameter set. */);

/*>Adds the given double precision value to an node in the given parameter set for field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetAddNodeDPNum(const int regionUserNumber /*<The user number of the region containing the field to add the value to the node in the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to add the value to the node in the field parameter set. */,
    const int variableType /*<The variable type of the field to add the value to the node in the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to add the value to the node. \see OPENCMISS_FieldParameterSetTypes */,
    const int versionNumber /*<The node derivative version number of the node to add the value to. */,
    const int derivativeNumber /*<The node derivative number of the node to add the value to. */,
    const int userNodeNumber /*<The user node number to add the value to. */,
    const int componentNumber /*<The component number of the field variable to add the value to the node to in the field parameter set. */,
    const double value /*<The value to add to the node in the field parameter set. */);

/*>Adds the given double precision value to an node in the given parameter set for field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetAddNodeDP(const CMISSFieldType field /*<The field to add the value to the node in the field parameter set. */,
    const int variableType /*<The variable type of the field to add the value to the node in the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to add the value to the node. \see OPENCMISS_FieldParameterSetTypes */,
    const int versionNumber /*<The node derivative version number of the node to add the value to. */,
    const int derivativeNumber /*<The node derivative number of the node to add the value to. */,
    const int userNodeNumber /*<The user node number to add the value to. */,
    const int componentNumber /*<The component number of the field variable to add the value to the node to in the field parameter set. */,
    const double value /*<The value to add to the node in the field parameter set. */);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *value)};
/*>Adds the given logical value to an node in the given parameter set for field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetAddNodeLNum(const int regionUserNumber /*<The user number of the region containing the field to add the value to the node in the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to add the value to the node in the field parameter set. */,
    const int variableType /*<The variable type of the field to add the value to the node in the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to add the value to the node. \see OPENCMISS_FieldParameterSetTypes */,
    const int versionNumber /*<The node derivative version number of the node to add the value to. */,
    const int derivativeNumber /*<The node derivative number of the node to add the value to. */,
    const int userNodeNumber /*<The user node number to add the value to. */,
    const int componentNumber /*<The component number of the field variable to add the value to the node to in the field parameter set. */,
    const CMISSBool value /*<The value to add to the node in the field parameter set. */);
%clear (const CMISSBool *value);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *value)};
/*>Adds the given logical value to an node in the given parameter set for field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetAddNodeL(const CMISSFieldType field /*<The field to add the value to the node in the field parameter set. */,
    const int variableType /*<The variable type of the field to add the value to the node in the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to add the value to the node. \see OPENCMISS_FieldParameterSetTypes */,
    const int versionNumber /*<The node derivative version number of the node to add the value to. */,
    const int derivativeNumber /*<The node derivative number of the node to add the value to. */,
    const int userNodeNumber /*<The user node number to add the value to. */,
    const int componentNumber /*<The component number of the field variable to add the value to the node to in the field parameter set. */,
    const CMISSBool value /*<The value to add to the node in the field parameter set. */);
%clear (const CMISSBool *value);

/*>Creates a new parameter set of type set type for a field variable for a field identified by a user number. */
CMISSError CMISSField_ParameterSetCreateNum(const int regionUserNumber /*<The user number of the region containing the field to create the parameter set on. */,
    const int fieldUserNumber /*<The user number of the field to create the parameter set on. */,
    const int variableType /*<The variable type of the field to create the parameter set on. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to create. \see OPENCMISS_FieldParameterSetTypes */);

/*>Creates a new parameter set of type set type for a field variable for a field identified by an object. */
CMISSError CMISSField_ParameterSetCreate(const CMISSFieldType field /*<The field to create the field parameter set on. */,
    const int variableType /*<The variable type of the field to create the parameter set on. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to create. \see OPENCMISS_FieldParameterSetTypes */);

/*>Destroys the specified parameter set type for a field variable for a field identified by a user number. */
CMISSError CMISSField_ParameterSetDestroyNum(const int regionUserNumber /*<The user number of the region containing the field to destroy the parameter set for. */,
    const int fieldUserNumber /*<The user number of the field to destroy the parameter set for. */,
    const int variableType /*<The variable type of the field to destroy the parameter set for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to destroy. \see OPENCMISS_FieldParameterSetTypes */);

/*>Destroys the specified parameter set type for a field variable for a field identified by an object. */
CMISSError CMISSField_ParameterSetDestroy(const CMISSFieldType field /*<The field to destroy the field parameter set for. */,
    const int variableType /*<The variable type of the field to destroy the parameter set for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to destroy. \see OPENCMISS_FieldParameterSetTypes */);

%apply (int *DIM1, int **ARGOUTVIEW_ARRAY1){(int *parametersSize, int **parameters)};
/*>Returns a pointer to the specified field parameter set local integer data array for a field identified by an user number. The pointer must be restored with a call to OPENCMISS::CMISSField_ParameterSetDataRestore call. Note: the values can be used for read operations but a field parameter set update or add calls must be used to change any values. */
CMISSError CMISSField_ParameterSetDataGetIntgNum(const int regionUserNumber /*<The user number of the region containing the field to get the parameter set data for. */,
    const int fieldUserNumber /*<The user number of the field to get the parameter set data for. */,
    const int variableType /*<The variable type of the field to get the parameter set data for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the parameter set data to get. \see OPENCMISS_FieldParameterSetTypes */,
    int *parametersSize /*<Length of parameters */,
    int **parameters /*<On return, a pointer to the parameter set data. */);
%clear (int *parametersSize, int **parameters);

%apply (int *DIM1, int **ARGOUTVIEW_ARRAY1){(int *parametersSize, int **parameters)};
/*>Returns a pointer to the specified field parameter set local integer data array for a field identified by an object. The pointer must be restored with a call to OPENCMISS::CMISSField_ParameterSetDataRestore call. Note: the values can be used for read operations but a field parameter set update or add calls must be used to change any values. */
CMISSError CMISSField_ParameterSetDataGetIntg(const CMISSFieldType field /*<The field to get the field parameter set data for. */,
    const int variableType /*<The variable type of the field to get the parameter set data for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the parameter set data to get. \see OPENCMISS_FieldParameterSetTypes */,
    int *parametersSize /*<Length of parameters */,
    int **parameters /*<On return, a pointer to the parameter set data. */);
%clear (int *parametersSize, int **parameters);

%apply (int *DIM1, float **ARGOUTVIEW_ARRAY1){(int *parametersSize, float **parameters)};
/*>Returns a pointer to the specified field parameter set local single precision data array for a field identified by an user number. The pointer must be restored with a call to OPENCMISS::CMISSField_ParameterSetDataRestore call. Note: the values can be used for read operations but a field parameter set update or add calls must be used to change any values. */
CMISSError CMISSField_ParameterSetDataGetSPNum(const int regionUserNumber /*<The user number of the region containing the field to get the parameter set data for. */,
    const int fieldUserNumber /*<The user number of the field to get the parameter set data for. */,
    const int variableType /*<The variable type of the field to get the parameter set data for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the parameter set data to get. \see OPENCMISS_FieldParameterSetTypes */,
    int *parametersSize /*<Length of parameters */,
    float **parameters /*<On return, a pointer to the parameter set data. */);
%clear (int *parametersSize, float **parameters);

%apply (int *DIM1, float **ARGOUTVIEW_ARRAY1){(int *parametersSize, float **parameters)};
/*>Returns a pointer to the specified field parameter set local single precision data array for a field identified by an object. The pointer must be restored with a call to OPENCMISS::CMISSField_ParameterSetDataRestore call. Note: the values can be used for read operations but a field parameter set update or add calls must be used to change any values. */
CMISSError CMISSField_ParameterSetDataGetSP(const CMISSFieldType field /*<The field to get the field parameter set data for. */,
    const int variableType /*<The variable type of the field to get the parameter set data for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the parameter set data to get. \see OPENCMISS_FieldParameterSetTypes */,
    int *parametersSize /*<Length of parameters */,
    float **parameters /*<On return, a pointer to the parameter set data. */);
%clear (int *parametersSize, float **parameters);

%apply (int *DIM1, double **ARGOUTVIEW_ARRAY1){(int *parametersSize, double **parameters)};
/*>Returns a pointer to the specified field parameter set local double precision data array for a field identified by an user number. The pointer must be restored with a call to OPENCMISS::CMISSField_ParameterSetDataRestore call. Note: the values can be used for read operations but a field parameter set update or add calls must be used to change any values. */
CMISSError CMISSField_ParameterSetDataGetDPNum(const int regionUserNumber /*<The user number of the region containing the field to get the parameter set data for. */,
    const int fieldUserNumber /*<The user number of the field to get the parameter set data for. */,
    const int variableType /*<The variable type of the field to get the parameter set data for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the parameter set data to get. \see OPENCMISS_FieldParameterSetTypes */,
    int *parametersSize /*<Length of parameters */,
    double **parameters /*<On return, a pointer to the parameter set data. */);
%clear (int *parametersSize, double **parameters);

%apply (int *DIM1, double **ARGOUTVIEW_ARRAY1){(int *parametersSize, double **parameters)};
/*>Returns a pointer to the specified field parameter set local double precision data array for a field identified by an object. The pointer must be restored with a call to OPENCMISS::CMISSField_ParameterSetDataRestore call. Note: the values can be used for read operations but a field parameter set update or add calls must be used to change any values. */
CMISSError CMISSField_ParameterSetDataGetDP(const CMISSFieldType field /*<The field to get the field parameter set data for. */,
    const int variableType /*<The variable type of the field to get the parameter set data for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the parameter set data to get. \see OPENCMISS_FieldParameterSetTypes */,
    int *parametersSize /*<Length of parameters */,
    double **parameters /*<On return, a pointer to the parameter set data. */);
%clear (int *parametersSize, double **parameters);

%apply (int *DIM1, CMISSBool **ARGOUTVIEW_ARRAY1){(int *parametersSize, CMISSBool **parameters)};
/*>Returns a pointer to the specified field parameter set local logical data array for a field identified by an user number. The pointer must be restored with a call to OPENCMISS::CMISSField_ParameterSetDataRestore call. Note: the values can be used for read operations but a field parameter set update or add calls must be used to change any values. */
CMISSError CMISSField_ParameterSetDataGetLNum(const int regionUserNumber /*<The user number of the region containing the field to get the parameter set data for. */,
    const int fieldUserNumber /*<The user number of the field to get the parameter set data for. */,
    const int variableType /*<The variable type of the field to get the parameter set data for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the parameter set data to get. \see OPENCMISS_FieldParameterSetTypes */,
    int *parametersSize /*<Length of parameters */,
    CMISSBool **parameters /*<On return, a pointer to the parameter set data. */);
%clear (int *parametersSize, CMISSBool **parameters);

%apply (int *DIM1, CMISSBool **ARGOUTVIEW_ARRAY1){(int *parametersSize, CMISSBool **parameters)};
/*>Returns a pointer to the specified field parameter set local logical data array for a field identified by an object. The pointer must be restored with a call to OPENCMISS::CMISSField_ParameterSetDataRestore call. Note: the values can be used for read operations but a field parameter set update or add calls must be used to change any values. */
CMISSError CMISSField_ParameterSetDataGetL(const CMISSFieldType field /*<The field to get the field parameter set data for. */,
    const int variableType /*<The variable type of the field to get the parameter set data for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the parameter set data to get. \see OPENCMISS_FieldParameterSetTypes */,
    int *parametersSize /*<Length of parameters */,
    CMISSBool **parameters /*<On return, a pointer to the parameter set data. */);
%clear (int *parametersSize, CMISSBool **parameters);

%apply (int *DIM1, int **ARGINOUTVIEW_ARRAY1){(int *parametersSize, int **parameters)};
/*>Restores the specified field variable parameter set local integer array that was obtained with an OPENCMISS::CMISSField_ParameterSetDataGet call for a field that is specified with an user number. */
CMISSError CMISSField_ParameterSetDataRestoreIntgNum(const int regionUserNumber /*<The user number of the region containing the field to restore the parameter set data for. */,
    const int fieldUserNumber /*<The user number of the field to restore the parameter set data for. */,
    const int variableType /*<The variable type of the field to restore the parameter set data for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the parameter set data to restore. \see OPENCMISS_FieldParameterSetTypes */,
    int *parametersSize /*<Length of parameters */,
    int **parameters /*<A pointer to the parameter set data. On return this pointer is null. */);
%clear (int *parametersSize, int **parameters);

%apply (int *DIM1, int **ARGINOUTVIEW_ARRAY1){(int *parametersSize, int **parameters)};
/*>Restores the specified field variable parameter set local integer array that was obtained with an OPENCMISS::CMISSField_ParameterSetDataGet call for a field that is specified with an object. */
CMISSError CMISSField_ParameterSetDataRestoreIntg(const CMISSFieldType field /*<The field to restore the field parameter set data for. */,
    const int variableType /*<The variable type of the field to restore the parameter set data for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the parameter set data to restore. \see OPENCMISS_FieldParameterSetTypes */,
    int *parametersSize /*<Length of parameters */,
    int **parameters /*<A pointer to the parameter set data to restore. On return this pointer is null. */);
%clear (int *parametersSize, int **parameters);

%apply (int *DIM1, float **ARGINOUTVIEW_ARRAY1){(int *parametersSize, float **parameters)};
/*>Restores the specified field variable parameter set local single precision array that was obtained with an OPENCMISS::CMISSField_ParameterSetDataGet call for a field that is specified with an user number. */
CMISSError CMISSField_ParameterSetDataRestoreSPNum(const int regionUserNumber /*<The user number of the region containing the field to restore the parameter set data for. */,
    const int fieldUserNumber /*<The user number of the field to restore the parameter set data for. */,
    const int variableType /*<The variable type of the field to restore the parameter set data for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the parameter set data to restore. \see OPENCMISS_FieldParameterSetTypes */,
    int *parametersSize /*<Length of parameters */,
    float **parameters /*<A pointer to the parameter set data. On return this pointer is null. */);
%clear (int *parametersSize, float **parameters);

%apply (int *DIM1, float **ARGINOUTVIEW_ARRAY1){(int *parametersSize, float **parameters)};
/*>Restores the specified field variable parameter set local single precision array that was obtained with an OPENCMISS::CMISSField_ParameterSetDataGet call for a field that is specified with an object. */
CMISSError CMISSField_ParameterSetDataRestoreSP(const CMISSFieldType field /*<The field to restore the field parameter set data for. */,
    const int variableType /*<The variable type of the field to restore the parameter set data for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the parameter set data to restore. \see OPENCMISS_FieldParameterSetTypes */,
    int *parametersSize /*<Length of parameters */,
    float **parameters /*<A pointer to the parameter set data to restore. */);
%clear (int *parametersSize, float **parameters);

%apply (int *DIM1, double **ARGINOUTVIEW_ARRAY1){(int *parametersSize, double **parameters)};
/*>Restores the specified field variable parameter set local double precision array that was obtained with an OPENCMISS::CMISSField_ParameterSetDataGet call for a field that is specified with an user number. */
CMISSError CMISSField_ParameterSetDataRestoreDPNum(const int regionUserNumber /*<The user number of the region containing the field to restore the parameter set data for. */,
    const int fieldUserNumber /*<The user number of the field to restore the parameter set data for. */,
    const int variableType /*<The variable type of the field to restore the parameter set data for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the parameter set data to restore. \see OPENCMISS_FieldParameterSetTypes */,
    int *parametersSize /*<Length of parameters */,
    double **parameters /*<A pointer to the parameter set data. On return this pointer is null. */);
%clear (int *parametersSize, double **parameters);

%apply (int *DIM1, double **ARGINOUTVIEW_ARRAY1){(int *parametersSize, double **parameters)};
/*>Restores the specified field variable parameter set local double precision array that was obtained with an OPENCMISS::CMISSField_ParameterSetDataGet call for a field that is specified with an object. */
CMISSError CMISSField_ParameterSetDataRestoreDP(const CMISSFieldType field /*<The field to restore the field parameter set data for. */,
    const int variableType /*<The variable type of the field to restore the parameter set data for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the parameter set data to restore. \see OPENCMISS_FieldParameterSetTypes */,
    int *parametersSize /*<Length of parameters */,
    double **parameters /*<A pointer to the parameter set data to restore. On return this pointer is null. */);
%clear (int *parametersSize, double **parameters);

%apply (int *DIM1, CMISSBool **ARGINOUTVIEW_ARRAY1){(int *parametersSize, CMISSBool **parameters)};
/*>Restores the specified field variable parameter set local logical array that was obtained with an OPENCMISS::CMISSField_ParameterSetDataGet call for a field that is specified with an user number. */
CMISSError CMISSField_ParameterSetDataRestoreLNum(const int regionUserNumber /*<The user number of the region containing the field to restore the parameter set data for. */,
    const int fieldUserNumber /*<The user number of the field to restore the parameter set data for. */,
    const int variableType /*<The variable type of the field to restore the parameter set data for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the parameter set data to restore. \see OPENCMISS_FieldParameterSetTypes */,
    int *parametersSize /*<Length of parameters */,
    CMISSBool **parameters /*<A pointer to the parameter set data. On return this pointer is null. */);
%clear (int *parametersSize, CMISSBool **parameters);

%apply (int *DIM1, CMISSBool **ARGINOUTVIEW_ARRAY1){(int *parametersSize, CMISSBool **parameters)};
/*>Restores the specified field variable parameter set local logical array that was obtained with an OPENCMISS::CMISSField_ParameterSetDataGet call for a field that is specified with an object. */
CMISSError CMISSField_ParameterSetDataRestoreL(const CMISSFieldType field /*<The field to restore the field parameter set data for. */,
    const int variableType /*<The variable type of the field to restore the parameter set data for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the parameter set data to restore. \see OPENCMISS_FieldParameterSetTypes */,
    int *parametersSize /*<Length of parameters */,
    CMISSBool **parameters /*<A pointer to the parameter set data to restore. On return this pointer is null. */);
%clear (int *parametersSize, CMISSBool **parameters);

%apply (int *DummyOutputScalar){(int *value)};
/*>Returns from the given parameter set an integer value for the specified constant of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetGetConstantIntgNum(const int regionUserNumber /*<The user number of the region containing the field to get the constant value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to get the constant value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the constant value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the constant value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to get the constant value from the field parameter set. */,
    int *value /*<On return, the value from the field parameter set. */);
%clear (int *value);

%apply (int *DummyOutputScalar){(int *value)};
/*>Returns from the given parameter set an integer value for the specified constant of a field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetGetConstantIntg(const CMISSFieldType field /*<The field to get the constant value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the constant value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the constant value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to get the constant value from the field parameter set. */,
    int *value /*<On return, the value from the field parameter set. */);
%clear (int *value);

%apply (float *DummyOutputScalar){(float *value)};
/*>Returns from the given parameter set a single precision value for the specified constant of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetGetConstantSPNum(const int regionUserNumber /*<The user number of the region containing the field to get the constant value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to get the constant value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the constant value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the constant value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to get the constant value from the field parameter set. */,
    float *value /*<On return, the value from the field parameter set. */);
%clear (float *value);

%apply (float *DummyOutputScalar){(float *value)};
/*>Returns from the given parameter set a single precision value for the specified constant of a field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetGetConstantSP(const CMISSFieldType field /*<The field to get the constant value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the constant value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the constant value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to get the constant value from the field parameter set. */,
    float *value /*<On return, the value from the field parameter set. */);
%clear (float *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Returns from the given parameter set a double precision value for the specified constant of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetGetConstantDPNum(const int regionUserNumber /*<The user number of the region containing the field to get the constant value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to get the constant value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the constant value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the constant value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to get the constant value from the field parameter set. */,
    double *value /*<On return, the value from the field parameter set. */);
%clear (double *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Returns from the given parameter set a double precision value for the specified constant of a field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetGetConstantDP(const CMISSFieldType field /*<The field to get the constant value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the constant value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the constant value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to get the constant value from the field parameter set. */,
    double *value /*<On return, the value from the field parameter set. */);
%clear (double *value);

%apply (CMISSBool *DummyOutputScalar){(CMISSBool *value)};
/*>Returns from the given parameter set a logical value for the specified constant of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetGetConstantLNum(const int regionUserNumber /*<The user number of the region containing the field to get the constant value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to get the constant value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the constant value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the constant value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to get the constant value from the field parameter set. */,
    CMISSBool *value /*<On return, the value from the field parameter set. */);
%clear (CMISSBool *value);

%apply (CMISSBool *DummyOutputScalar){(CMISSBool *value)};
/*>Returns from the given parameter set a logical value for the specified constant of a field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetGetConstantL(const CMISSFieldType field /*<The field to get the constant value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the constant value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the constant value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to get the constant value from the field parameter set. */,
    CMISSBool *value /*<On return, the value from the field parameter set. */);
%clear (CMISSBool *value);

%apply (int *DummyOutputScalar){(int *value)};
/*>Returns from the given parameter set a integer value for the specified data point of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetGetDataPointIntgNumberI(const int parentRegionUserNumber /*<The user number of the parent region for the interface. */,
    const int interfaceUserNumber /*<The user number of the interface containing the field to get the data point value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to get the data point value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the data point value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the data point value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userDataPointNumber /*<The user data point number to get the value for */,
    const int componentNumber /*<The component number of the field variable to get the data point value from the field parameter set. */,
    int *value /*<On return, the value from the field parameter set. */);
%clear (int *value);

%apply (int *DummyOutputScalar){(int *value)};
/*>Returns from the given parameter set a integer value for the specified data point of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetGetDataPointIntgNumberR(const int regionUserNumber /*<The user number of the region containing the field to get the data point value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to get the data point value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the data point value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the data point value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userDataPointNumber /*<The user data point number to get the value for */,
    const int componentNumber /*<The component number of the field variable to get the data point value from the field parameter set. */,
    int *value /*<On return, the value from the field parameter set. */);
%clear (int *value);

%apply (int *DummyOutputScalar){(int *value)};
/*>Returns from the given parameter set a integer value for the specified constant of a field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetGetDataPointIntg(const CMISSFieldType field /*<The field to get the data point value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the data point value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the data point value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userDataPointNumber /*<The user data point number to get the value for */,
    const int componentNumber /*<The component number of the field variable to get the data point value from the field parameter set. */,
    int *value /*<On return, the value from the field parameter set. */);
%clear (int *value);

%apply (float *DummyOutputScalar){(float *value)};
/*>Returns from the given parameter set a single precision value for the specified data point of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetGetDataPointSPNumberI(const int parentRegionUserNumber /*<The user number of the parent region for the interface. */,
    const int interfaceUserNumber /*<The user number of the interface containing the field to get the data point value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to get the data point value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the data point value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the data point value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userDataPointNumber /*<The user data point number to get the value for */,
    const int componentNumber /*<The component number of the field variable to get the data point value from the field parameter set. */,
    float *value /*<On return, the value from the field parameter set. */);
%clear (float *value);

%apply (float *DummyOutputScalar){(float *value)};
/*>Returns from the given parameter set a single precision value for the specified data point of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetGetDataPointSPNumberR(const int regionUserNumber /*<The user number of the region containing the field to get the data point value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to get the data point value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the data point value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the data point value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userDataPointNumber /*<The user data point number to get the value for */,
    const int componentNumber /*<The component number of the field variable to get the data point value from the field parameter set. */,
    float *value /*<On return, the value from the field parameter set. */);
%clear (float *value);

%apply (float *DummyOutputScalar){(float *value)};
/*>Returns from the given parameter set a single precision value for the specified constant of a field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetGetDataPointSP(const CMISSFieldType field /*<The field to get the data point value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the data point value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the data point value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userDataPointNumber /*<The user data point number to get the value for */,
    const int componentNumber /*<The component number of the field variable to get the data point value from the field parameter set. */,
    float *value /*<On return, the value from the field parameter set. */);
%clear (float *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Returns from the given parameter set a double precision value for the specified data point of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetGetDataPointDPNumberI(const int parentRegionUserNumber /*<The user number of the parent region for the interface. */,
    const int interfaceUserNumber /*<The user number of the interface containing the field to get the data point value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to get the data point value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the data point value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the data point value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userDataPointNumber /*<The user data point number to get the value for */,
    const int componentNumber /*<The component number of the field variable to get the data point value from the field parameter set. */,
    double *value /*<On return, the value from the field parameter set. */);
%clear (double *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Returns from the given parameter set a double precision value for the specified data point of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetGetDataPointDPNumberR(const int regionUserNumber /*<The user number of the region containing the field to get the data point value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to get the data point value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the data point value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the data point value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userDataPointNumber /*<The user data point number to get the value for */,
    const int componentNumber /*<The component number of the field variable to get the data point value from the field parameter set. */,
    double *value /*<On return, the value from the field parameter set. */);
%clear (double *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Returns from the given parameter set a double precision value for the specified constant of a field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetGetDataPointDP(const CMISSFieldType field /*<The field to get the data point value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the data point value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the data point value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userDataPointNumber /*<The user data point number to get the value for */,
    const int componentNumber /*<The component number of the field variable to get the data point value from the field parameter set. */,
    double *value /*<On return, the value from the field parameter set. */);
%clear (double *value);

%apply (CMISSBool *DummyOutputScalar){(CMISSBool *value)};
/*>Returns from the given parameter set a logical value for the specified data point of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetGetDataPointLNumberI(const int parentRegionUserNumber /*<The user number of the parent region for the interface. */,
    const int interfaceUserNumber /*<The user number of the interface containing the field to get the data point value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to get the data point value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the data point value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the data point value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userDataPointNumber /*<The user data point number to get the value for */,
    const int componentNumber /*<The component number of the field variable to get the data point value from the field parameter set. */,
    CMISSBool *value /*<On return, the value from the field parameter set. */);
%clear (CMISSBool *value);

%apply (CMISSBool *DummyOutputScalar){(CMISSBool *value)};
/*>Returns from the given parameter set a logical value for the specified data point of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetGetDataPointLNumberR(const int regionUserNumber /*<The user number of the region containing the field to get the data point value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to get the data point value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the data point value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the data point value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userDataPointNumber /*<The user data point number to get the value for */,
    const int componentNumber /*<The component number of the field variable to get the data point value from the field parameter set. */,
    CMISSBool *value /*<On return, the value from the field parameter set. */);
%clear (CMISSBool *value);

%apply (CMISSBool *DummyOutputScalar){(CMISSBool *value)};
/*>Returns from the given parameter set a logical value for the specified constant of a field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetGetDataPointL(const CMISSFieldType field /*<The field to get the data point value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the data point value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the data point value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userDataPointNumber /*<The user data point number to get the value for */,
    const int componentNumber /*<The component number of the field variable to get the data point value from the field parameter set. */,
    CMISSBool *value /*<On return, the value from the field parameter set. */);
%clear (CMISSBool *value);

%apply (int *DummyOutputScalar){(int *value)};
/*>Returns from the given parameter set an integer value for the specified element of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetGetElementIntgNum(const int regionUserNumber /*<The user number of the region containing the field to get the element value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to get the element value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the element value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the element value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number to get the value from the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to get the element value from the field parameter set. */,
    int *value /*<On return, the value from the field parameter set. */);
%clear (int *value);

%apply (int *DummyOutputScalar){(int *value)};
/*>Returns from the given parameter set an integer value for the specified element of a field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetGetElementIntg(const CMISSFieldType field /*<The field to get the element value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the element value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the element value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number to get the value from the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to get the element value from the field parameter set. */,
    int *value /*<On return, the value from the field parameter set. */);
%clear (int *value);

%apply (float *DummyOutputScalar){(float *value)};
/*>Returns from the given parameter set a single precision value for the specified element of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetGetElementSPNum(const int regionUserNumber /*<The user number of the region containing the field to get the element value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to get the element value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the element value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the element value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number to get the value from the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to get the element value from the field parameter set. */,
    float *value /*<On return, the value from the field parameter set. */);
%clear (float *value);

%apply (float *DummyOutputScalar){(float *value)};
/*>Returns from the given parameter set a single precision value for the specified element of a field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetGetElementSP(const CMISSFieldType field /*<The field to get the element value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the element value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the element value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number to get the value from the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to get the element value from the field parameter set. */,
    float *value /*<On return, the value from the field parameter set. */);
%clear (float *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Returns from the given parameter set a double precision value for the specified element of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetGetElementDPNum(const int regionUserNumber /*<The user number of the region containing the field to get the element value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to get the element value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the element value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the element value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number to get the value from the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to get the element value from the field parameter set. */,
    double *value /*<On return, the value from the field parameter set. */);
%clear (double *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Returns from the given parameter set a double precision value for the specified element of a field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetGetElementDP(const CMISSFieldType field /*<The field to get the element value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the element value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the element value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number to get the value from the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to get the element value from the field parameter set. */,
    double *value /*<On return, the value from the field parameter set. */);
%clear (double *value);

%apply (CMISSBool *DummyOutputScalar){(CMISSBool *value)};
/*>Returns from the given parameter set a logical value for the specified element of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetGetElementLNum(const int regionUserNumber /*<The user number of the region containing the field to get the element value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to get the element value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the element value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the element value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number to get the value from the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to get the element value from the field parameter set. */,
    CMISSBool *value /*<On return, the value from the field parameter set. */);
%clear (CMISSBool *value);

%apply (CMISSBool *DummyOutputScalar){(CMISSBool *value)};
/*>Returns from the given parameter set a logical value for the specified element of a field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetGetElementL(const CMISSFieldType field /*<The field to get the element value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the element value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the element value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number to get the value from the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to get the element value from the field parameter set. */,
    CMISSBool *value /*<On return, the value from the field parameter set. */);
%clear (CMISSBool *value);

%apply (int *DummyOutputScalar){(int *value)};
/*>Returns from the given parameter set an integer value for the specified node and derivative of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetGetNodeIntgNum(const int regionUserNumber /*<The user number of the region containing the field to get the nodal value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to get the nodal value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the nodal value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the nodal value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int versionNumber /*<The derivative version number to get the value from the field parameter set. */,
    const int derivativeNumber /*<The derivative number to get the value from the field parameter set. */,
    const int userNodeNumber /*<The user node number to get the value from the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to get the nodal value from the field parameter set. */,
    int *value /*<On return, the value from the field parameter set. */);
%clear (int *value);

%apply (int *DummyOutputScalar){(int *value)};
/*>Returns from the given parameter set an integer value for the specified node and derivative of a field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetGetNodeIntg(const CMISSFieldType field /*<The field to get the nodal value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the nodal value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the nodal value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int versionNumber /*<The derivative version number to get the value from the field parameter set. */,
    const int derivativeNumber /*<The derivative number to get the value from the field parameter set. */,
    const int userNodeNumber /*<The user node number to get the value from the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to get the nodal value from the field parameter set. */,
    int *value /*<On return, the value from the field parameter set. */);
%clear (int *value);

%apply (float *DummyOutputScalar){(float *value)};
/*>Returns from the given parameter set a single precision value for the specified node and derivative of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetGetNodeSPNum(const int regionUserNumber /*<The user number of the region containing the field to get the nodal value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to get the nodal value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the nodal value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the nodal value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int versionNumber /*<The derivative version number to get the value from the field parameter set. */,
    const int derivativeNumber /*<The derivative number to get the value from the field parameter set. */,
    const int userNodeNumber /*<The user node number to get the value from the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to get the nodal value from the field parameter set. */,
    float *value /*<On return, the value from the field parameter set. */);
%clear (float *value);

%apply (float *DummyOutputScalar){(float *value)};
/*>Returns from the given parameter set a single precision value for the specified node and derivative of a field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetGetNodeSP(const CMISSFieldType field /*<The field to get the nodal value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the nodal value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the nodal value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int versionNumber /*<The derivative version number to get the value from the field parameter set. */,
    const int derivativeNumber /*<The derivative number to get the value from the field parameter set. */,
    const int userNodeNumber /*<The user node number to get the value from the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to get the nodal value from the field parameter set. */,
    float *value /*<On return, the value from the field parameter set. */);
%clear (float *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Returns from the given parameter set a double precision value for the specified node and derivative of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetGetNodeDPNum(const int regionUserNumber /*<The user number of the region containing the field to get the nodal value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to get the nodal value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the nodal value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the nodal value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int versionNumber /*<The derivative version number to get the value from the field parameter set. */,
    const int derivativeNumber /*<The derivative number to get the value from the field parameter set. */,
    const int userNodeNumber /*<The user node number to get the value from the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to get the nodal value from the field parameter set. */,
    double *value /*<On return, the value from the field parameter set. */);
%clear (double *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Returns from the given parameter set a double precision value for the specified node and derivative of a field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetGetNodeDP(const CMISSFieldType field /*<The field to get the nodal value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the nodal value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the nodal value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int versionNumber /*<The derivative version number to get the value from the field parameter set. */,
    const int derivativeNumber /*<The derivative number to get the value from the field parameter set. */,
    const int userNodeNumber /*<The user node number to get the value from the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to get the nodal value from the field parameter set. */,
    double *value /*<On return, the value from the field parameter set. */);
%clear (double *value);

%apply (CMISSBool *DummyOutputScalar){(CMISSBool *value)};
/*>Returns from the given parameter set a logical value for the specified node and derivative of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetGetNodeLNum(const int regionUserNumber /*<The user number of the region containing the field to get the nodal value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to get the nodal value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the nodal value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the nodal value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int versionNumber /*<The derivative version number to get the value from the field parameter set. */,
    const int derivativeNumber /*<The derivative number to get the value from the field parameter set. */,
    const int userNodeNumber /*<The user node number to get the value from the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to get the nodal value from the field parameter set. */,
    CMISSBool *value /*<On return, the value from the field parameter set. */);
%clear (CMISSBool *value);

%apply (CMISSBool *DummyOutputScalar){(CMISSBool *value)};
/*>Returns from the given parameter set a logical value for the specified node and derivative of a field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetGetNodeL(const CMISSFieldType field /*<The field to get the nodal value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the nodal value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the nodal value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int versionNumber /*<The derivative version number to get the value from the field parameter set. */,
    const int derivativeNumber /*<The derivative number to get the value from the field parameter set. */,
    const int userNodeNumber /*<The user node number to get the value from the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to get the nodal value from the field parameter set. */,
    CMISSBool *value /*<On return, the value from the field parameter set. */);
%clear (CMISSBool *value);

%apply (double *DummyOutputScalar){(double *value)};
/*>Returns from the given parameter set a double precision value for the specified element of a field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetGetGaussPointDP(const CMISSFieldType field /*<The field to get the element value from the field parameter set. */,
    const int variableType /*<The variable type of the field to get the element value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to get the element value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number to get the value from the field parameter set. */,
    const int gaussPointNumber /*<The gauss point number number to get the value from the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to get the element value from the field parameter set. */,
    double *value /*<On return, the value from the field parameter set. */);
%clear (double *value);

/*>Updates the given parameter set with the given integer value for the constant of the field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateConstantIntgNum(const int regionUserNumber /*<The user number of the region containing the field to update the constant value for the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to update the constant value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the constant value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the constant value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to update the constant value for the field parameter set. */,
    const int value /*<The value to update the field parameter set to. */);

/*>Updates the given parameter set with the given integer value for the constant of the field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetUpdateConstantIntg(const CMISSFieldType field /*<The field to update the constant value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the constant value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the constant value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to update the constant value for the field parameter set. */,
    const int value /*<The value for the field parameter set to update. */);

/*>Updates the given parameter set with the given single precision value for the constant of the field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateConstantSPNum(const int regionUserNumber /*<The user number of the region containing the field to update the constant value for the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to update the constant value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the constant value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the constant value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to update the constant value for the field parameter set. */,
    const float value /*<The value to update the field parameter set to. */);

/*>Updates the given parameter set with the given single precision value for the constant of the field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetUpdateConstantSP(const CMISSFieldType field /*<The field to update the constant value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the constant value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the constant value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to update the constant value for the field parameter set. */,
    const float value /*<The value for the field parameter set to update. */);

/*>Updates the given parameter set with the given double precision value for the constant of the field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateConstantDPNum(const int regionUserNumber /*<The user number of the region containing the field to update the constant value for the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to update the constant value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the constant value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the constant value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to update the constant value for the field parameter set. */,
    const double value /*<The value to update the field parameter set to. */);

/*>Updates the given parameter set with the given double precision value for the constant of the field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetUpdateConstantDP(const CMISSFieldType field /*<The field to update the constant value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the constant value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the constant value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to update the constant value for the field parameter set. */,
    const double value /*<The value for the field parameter set to update. */);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *value)};
/*>Updates the given parameter set with the given logical value for the constant of the field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateConstantLNum(const int regionUserNumber /*<The user number of the region containing the field to update the constant value for the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to update the constant value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the constant value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the constant value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to update the constant value for the field parameter set. */,
    const CMISSBool value /*<The value to update the field parameter set to. */);
%clear (const CMISSBool *value);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *value)};
/*>Updates the given parameter set with the given logical value for the constant of the field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetUpdateConstantL(const CMISSFieldType field /*<The field to update the constant value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the constant value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the constant value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int componentNumber /*<The component number of the field variable to update the constant value for the field parameter set. */,
    const CMISSBool value /*<The value for the field parameter set to update. */);
%clear (const CMISSBool *value);

/*>Update the given parameter set a integer value for the specified data point of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateDataPointIntgNumberI(const int parentRegionUserNumber /*<The user number of the parent region for the interface. */,
    const int interfaceUserNumber /*<The user number of the interface containing the field to update the data point value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to update the data point value from the field parameter set. */,
    const int variableType /*<The variable type of the field to update the data point value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the data point value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userDataPointNumber /*<The user data point number to update the value for */,
    const int componentNumber /*<The component number of the field variable to update the data point value from the field parameter set. */,
    const int value /*<The value for the field parameter set to update */);

/*>Update the given parameter set a integer value for the specified data point of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateDataPointIntgNumberR(const int regionUserNumber /*<The user number of the region containing the field to update the data point value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to update the data point value from the field parameter set. */,
    const int variableType /*<The variable type of the field to update the data point value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the data point value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userDataPointNumber /*<The user data point number to update the value for */,
    const int componentNumber /*<The component number of the field variable to update the data point value from the field parameter set. */,
    const int value /*<The value for the field parameter set to update */);

/*>Update the given parameter set a integer value for the specified constant of a field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetUpdateDataPointIntg(const CMISSFieldType field /*<The field to update the data point value from the field parameter set. */,
    const int variableType /*<The variable type of the field to update the data point value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the data point value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userDataPointNumber /*<The user data point number to update the value for */,
    const int componentNumber /*<The component number of the field variable to update the data point value from the field parameter set. */,
    const int value /*<The value for the field parameter set to update */);

/*>Update the given parameter set a single precision value for the specified data point of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateDataPointSPNumberI(const int parentRegionUserNumber /*<The user number of the parent region for the interface. */,
    const int interfaceUserNumber /*<The user number of the interface containing the field to update the data point value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to update the data point value from the field parameter set. */,
    const int variableType /*<The variable type of the field to update the data point value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the data point value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userDataPointNumber /*<The user data point number to update the value for */,
    const int componentNumber /*<The component number of the field variable to update the data point value from the field parameter set. */,
    const float value /*<The value for the field parameter set to update */);

/*>Update the given parameter set a single precision value for the specified data point of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateDataPointSPNumberR(const int regionUserNumber /*<The user number of the region containing the field to update the data point value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to update the data point value from the field parameter set. */,
    const int variableType /*<The variable type of the field to update the data point value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the data point value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userDataPointNumber /*<The user data point number to update the value for */,
    const int componentNumber /*<The component number of the field variable to update the data point value from the field parameter set. */,
    const float value /*<The value for the field parameter set to update */);

/*>Update the given parameter set a single precision value for the specified constant of a field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetUpdateDataPointSP(const CMISSFieldType field /*<The field to update the data point value from the field parameter set. */,
    const int variableType /*<The variable type of the field to update the data point value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the data point value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userDataPointNumber /*<The user data point number to update the value for */,
    const int componentNumber /*<The component number of the field variable to update the data point value from the field parameter set. */,
    const float value /*<The value for the field parameter set to update */);

/*>Update the given parameter set a double precision value for the specified data point of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateDataPointDPNumberI(const int parentRegionUserNumber /*<The user number of the parent region for the interface. */,
    const int interfaceUserNumber /*<The user number of the interface containing the field to update the data point value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to update the data point value from the field parameter set. */,
    const int variableType /*<The variable type of the field to update the data point value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the data point value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userDataPointNumber /*<The user data point number to update the value for */,
    const int componentNumber /*<The component number of the field variable to update the data point value from the field parameter set. */,
    const double value /*<The value for the field parameter set to update */);

/*>Update the given parameter set a double precision value for the specified data point of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateDataPointDPNumberR(const int regionUserNumber /*<The user number of the region containing the field to update the data point value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to update the data point value from the field parameter set. */,
    const int variableType /*<The variable type of the field to update the data point value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the data point value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userDataPointNumber /*<The user data point number to update the value for */,
    const int componentNumber /*<The component number of the field variable to update the data point value from the field parameter set. */,
    const double value /*<The value for the field parameter set to update */);

/*>Update the given parameter set a double precision value for the specified constant of a field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetUpdateDataPointDP(const CMISSFieldType field /*<The field to update the data point value from the field parameter set. */,
    const int variableType /*<The variable type of the field to update the data point value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the data point value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userDataPointNumber /*<The user data point number to update the value for */,
    const int componentNumber /*<The component number of the field variable to update the data point value from the field parameter set. */,
    const double value /*<The value for the field parameter set to update */);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *value)};
/*>Update the given parameter set a logical value for the specified data point of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateDataPointLNumberI(const int parentRegionUserNumber /*<The user number of the parent region for the interface. */,
    const int interfaceUserNumber /*<The user number of the interface containing the field to update the data point value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to update the data point value from the field parameter set. */,
    const int variableType /*<The variable type of the field to update the data point value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the data point value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userDataPointNumber /*<The user data point number to update the value for */,
    const int componentNumber /*<The component number of the field variable to update the data point value from the field parameter set. */,
    const CMISSBool value /*<The value for the field parameter set to update */);
%clear (const CMISSBool *value);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *value)};
/*>Update the given parameter set a logical value for the specified data point of a field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateDataPointLNumberR(const int regionUserNumber /*<The user number of the region containing the field to update the data point value from the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to update the data point value from the field parameter set. */,
    const int variableType /*<The variable type of the field to update the data point value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the data point value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userDataPointNumber /*<The user data point number to update the value for */,
    const int componentNumber /*<The component number of the field variable to update the data point value from the field parameter set. */,
    const CMISSBool value /*<The value for the field parameter set to update */);
%clear (const CMISSBool *value);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *value)};
/*>Update the given parameter set a logical value for the specified constant of a field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetUpdateDataPointL(const CMISSFieldType field /*<The field to update the data point value from the field parameter set. */,
    const int variableType /*<The variable type of the field to update the data point value from the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the data point value from. \see OPENCMISS_FieldParameterSetTypes */,
    const int userDataPointNumber /*<The user data point number to update the value for */,
    const int componentNumber /*<The component number of the field variable to update the data point value from the field parameter set. */,
    const CMISSBool value /*<The value for the field parameter set to update */);
%clear (const CMISSBool *value);

/*>Updates the given parameter set with the given integer value for the element of the field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateElementIntgNum(const int regionUserNumber /*<The user number of the region containing the field to update the element value for the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to update the element value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the element value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the element value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to update the element value for the field parameter set. */,
    const int value /*<The value to update the field parameter set to. */);

/*>Updates the given parameter set with the given integer value for the element of the field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetUpdateElementIntg(const CMISSFieldType field /*<The field to update the constant value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the constant value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the constant value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to update the constant value for the field parameter set. */,
    const int value /*<The value for the field parameter set to update. */);

/*>Updates the given parameter set with the given single precision value for the element of the field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateElementSPNum(const int regionUserNumber /*<The user number of the region containing the field to update the element value for the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to update the element value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the element value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the element value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to update the element value for the field parameter set. */,
    const float value /*<The value to update the field parameter set to. */);

/*>Updates the given parameter set with the given single precision value for the element of the field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetUpdateElementSP(const CMISSFieldType field /*<The field to update the constant value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the constant value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the constant value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to update the constant value for the field parameter set. */,
    const float value /*<The value for the field parameter set to update. */);

/*>Updates the given parameter set with the given double precision value for the element of the field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateElementDPNum(const int regionUserNumber /*<The user number of the region containing the field to update the element value for the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to update the element value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the element value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the element value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to update the element value for the field parameter set. */,
    const double value /*<The value to update the field parameter set to. */);

/*>Updates the given parameter set with the given double precision value for the element of the field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetUpdateElementDP(const CMISSFieldType field /*<The field to update the constant value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the constant value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the constant value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to update the constant value for the field parameter set. */,
    const double value /*<The value for the field parameter set to update. */);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *value)};
/*>Updates the given parameter set with the given logical value for the element of the field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateElementLNum(const int regionUserNumber /*<The user number of the region containing the field to update the element value for the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to update the element value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the element value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the element value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to update the element value for the field parameter set. */,
    const CMISSBool value /*<The value to update the field parameter set to. */);
%clear (const CMISSBool *value);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *value)};
/*>Updates the given parameter set with the given logical value for the element of the field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetUpdateElementL(const CMISSFieldType field /*<The field to update the constant value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the constant value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the constant value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to update the constant value for the field parameter set. */,
    const CMISSBool value /*<The value for the field parameter set to update. */);
%clear (const CMISSBool *value);

/*>Updates the given parameter set with the given double precision value for the element data point of the field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetUpdateElementDataPointDP(const CMISSFieldType field /*<The field to update the constant value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the constant value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the constant value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int elementNumber /*<The user element number to update the data point for. */,
    const int dataPointIndex /*<The index of the data point for the data points projected on this element. */,
    const int componentNumber /*<The component number of the field variable to update the constant value for the field parameter set. */,
    const double value /*<The value for the field parameter set to update. */);

/*>Finishes the parameter set update for a field variable for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateFinishNum(const int regionUserNumber /*<The user number of the region containing the field to finish the parameter set update for. */,
    const int fieldUserNumber /*<The user number of the field to finish the parameter set update for. */,
    const int variableType /*<The variable type of the field to finish the parameter set update for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type to finish the update for. \see OPENCMISS_FieldParameterSetTypes */);

/*>Finishes the parameter set update for a field variable for a field identified by an object. */
CMISSError CMISSField_ParameterSetUpdateFinish(const CMISSFieldType field /*<The field to finishe the parameter set update for. */,
    const int variableType /*<The variable type of the field to finish the parameter set update for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type to finish the update for. \see OPENCMISS_FieldParameterSetTypes */);

/*>Updates the given parameter set with the given integer value for the node and derivative of the field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateNodeIntgNum(const int regionUserNumber /*<The user number of the region containing the field to update the nodal value for the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to update the nodal value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the nodal value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the nodal value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int versionNumber /*<The derivative version number of the field variable component to update for the field parameter set. */,
    const int derivativeNumber /*<The derivative number of the field variable component to update for the field parameter set. */,
    const int userNodeNumber /*<The user node number of the field variable component to update for the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to update the nodal value for the field parameter set. */,
    const int value /*<The value to update the field parameter set to. */);

/*> */
CMISSError CMISSField_ParameterSetUpdateNodeIntg(const CMISSFieldType field /*<The field to update the nodal value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the nodal value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the nodal value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int versionNumber /*<The derivative version number of the field variable component to update for the field parameter set. */,
    const int derivativeNumber /*<The derivative number of the field variable component to update for the field parameter set. */,
    const int userNodeNumber /*<The user node number of the field variable component to update for the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to update the nodal value for the field parameter set. */,
    const int value /*<The value to update the field parameter set to. */);

/*>Updates the given parameter set with the given single precision value for the node and derivative of the field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateNodeSPNum(const int regionUserNumber /*<The user number of the region containing the field to update the nodal value for the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to update the nodal value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the nodal value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the nodal value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int versionNumber /*<The derivative version number of the field variable component to update for the field parameter set. */,
    const int derivativeNumber /*<The derivative number of the field variable component to update for the field parameter set. */,
    const int userNodeNumber /*<The user node number of the field variable component to update for the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to update the nodal value for the field parameter set. */,
    const float value /*<The value to update the field parameter set to. */);

/*> */
CMISSError CMISSField_ParameterSetUpdateNodeSP(const CMISSFieldType field /*<The field to update the nodal value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the nodal value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the nodal value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int versionNumber /*<The derivative version number of the field variable component to update for the field parameter set. */,
    const int derivativeNumber /*<The derivative number of the field variable component to update for the field parameter set. */,
    const int userNodeNumber /*<The user node number of the field variable component to update for the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to update the nodal value for the field parameter set. */,
    const float value /*<The value to update the field parameter set to. */);

/*>Updates the given parameter set with the given double precision value for the node and derivative of the field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateNodeDPNum(const int regionUserNumber /*<The user number of the region containing the field to update the nodal value for the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to update the nodal value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the nodal value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the nodal value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int versionNumber /*<The derivative version number of the field variable component to update for the field parameter set. */,
    const int derivativeNumber /*<The derivative number of the field variable component to update for the field parameter set. */,
    const int userNodeNumber /*<The user node number of the field variable component to update for the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to update the nodal value for the field parameter set. */,
    const double value /*<The value to update the field parameter set to. */);

/*> */
CMISSError CMISSField_ParameterSetUpdateNodeDP(const CMISSFieldType field /*<The field to update the nodal value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the nodal value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the nodal value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int versionNumber /*<The derivative version number of the field variable component to update for the field parameter set. */,
    const int derivativeNumber /*<The derivative number of the field variable component to update for the field parameter set. */,
    const int userNodeNumber /*<The user node number of the field variable component to update for the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to update the nodal value for the field parameter set. */,
    const double value /*<The value to update the field parameter set to. */);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *value)};
/*>Updates the given parameter set with the given logical value for the node and derivative of the field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateNodeLNum(const int regionUserNumber /*<The user number of the region containing the field to update the nodal value for the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to update the nodal value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the nodal value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the nodal value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int versionNumber /*<The derivative version number of the field variable component to update for the field parameter set. */,
    const int derivativeNumber /*<The derivative number of the field variable component to update for the field parameter set. */,
    const int userNodeNumber /*<The user node number of the field variable component to update for the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to update the nodal value for the field parameter set. */,
    const CMISSBool value /*<The value to update the field parameter set to. */);
%clear (const CMISSBool *value);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *value)};
/*> */
CMISSError CMISSField_ParameterSetUpdateNodeL(const CMISSFieldType field /*<The field to update the nodal value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the nodal value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the nodal value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int versionNumber /*<The derivative version number of the field variable component to update for the field parameter set. */,
    const int derivativeNumber /*<The derivative number of the field variable component to update for the field parameter set. */,
    const int userNodeNumber /*<The user node number of the field variable component to update for the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to update the nodal value for the field parameter set. */,
    const CMISSBool value /*<The value to update the field parameter set to. */);
%clear (const CMISSBool *value);

%apply (const int DIM1, double *IN_ARRAY1){(const int valuesSize, const double *values)};
/*>Updates the given parameter set with the given values for all local dofs of the field variable identified by an object.. */
CMISSError CMISSField_ParameterSetUpdateLocalDofsDP(const CMISSFieldType field /*<The field to update the values for the field parameter set. */,
    const int variableType /*<The variable type of the field to update values for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update values for. \see OPENCMISS_FieldParameterSetTypes */,
    const int valuesSize /*<Length of values */,
    const double *values /*<The values to update the field parameter set to. */);
%clear (const int valuesSize, const double *values);

/*>Updates the given parameter set with the given integer value for the element Gauss point of the field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateGaussPointIntgNum(const int regionUserNumber /*<The user number of the region containing the field to update the Gauss point value for the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to update the Gauss point value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the Gauss point value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the Gauss point value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int gaussPointNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to update the Gauss point value for the field parameter set. */,
    const int value /*<The value for the field parameter set to update. */);

/*>Updates the given parameter set with the given integer value for the element Gauss point of the field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetUpdateGaussPointIntg(const CMISSFieldType field /*<The field to update the Gauss point value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the Gauss point value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the Gauss point value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int gaussPointNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to update the Gauss point value for the field parameter set. */,
    const int value /*<The value for the field parameter set to update. */);

/*>Updates the given parameter set with the given single precision value for the element Gauss point of the field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateGaussPointSPNum(const int regionUserNumber /*<The user number of the region containing the field to update the Gauss point value for the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to update the Gauss point value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the Gauss point value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the Gauss point value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int gaussPointNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to update the Gauss point value for the field parameter set. */,
    const float value /*<The value for the field parameter set to update. */);

/*>Updates the given parameter set with the given single precision value for the element Gauss point of the field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetUpdateGaussPointSP(const CMISSFieldType field /*<The field to update the Gauss point value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the Gauss point value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the Gauss point value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int gaussPointNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to update the Gauss point value for the field parameter set. */,
    const float value /*<The value for the field parameter set to update. */);

/*>Updates the given parameter set with the given double precision value for the element Gauss point of the field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateGaussPointDPNum(const int regionUserNumber /*<The user number of the region containing the field to update the Gauss point value for the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to update the Gauss point value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the Gauss point value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the Gauss point value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int gaussPointNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to update the Gauss point value for the field parameter set. */,
    const double value /*<The value for the field parameter set to update. */);

/*>Updates the given parameter set with the given double precision value for the element Gauss point of the field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetUpdateGaussPointDP(const CMISSFieldType field /*<The field to update the Gauss point value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the Gauss point value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the Gauss point value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int gaussPointNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to update the Gauss point value for the field parameter set. */,
    const double value /*<The value for the field parameter set to update. */);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *value)};
/*>Updates the given parameter set with the given logical value for the element Gauss point of the field variable component for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateGaussPointLNum(const int regionUserNumber /*<The user number of the region containing the field to update the Gauss point value for the field parameter set. */,
    const int fieldUserNumber /*<The user number of the field to update the Gauss point value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the Gauss point value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the Gauss point value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int gaussPointNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to update the Gauss point value for the field parameter set. */,
    const CMISSBool value /*<The value for the field parameter set to update. */);
%clear (const CMISSBool *value);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *value)};
/*>Updates the given parameter set with the given logical value for the element Gauss point of the field variable component for a field identified by an object. */
CMISSError CMISSField_ParameterSetUpdateGaussPointL(const CMISSFieldType field /*<The field to update the Gauss point value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the Gauss point value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the Gauss point value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int userElementNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int gaussPointNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int componentNumber /*<The component number of the field variable to update the Gauss point value for the field parameter set. */,
    const CMISSBool value /*<The value for the field parameter set to update. */);
%clear (const CMISSBool *value);

%apply (const int DIM1, double *IN_ARRAY1){(const int xiSize, const double *xi)};
%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int valuesSize, double *values)};
/*>Interpolates the given parameter set at a specified xi location for the specified element and derviative and returns double precision values for a field identified by a user number. */
CMISSError CMISSField_ParameterSetInterpolateSingleXiDPNum(const int regionUserNumber /*<The user number of the region containing the field whose parameter set is to be interpolated. */,
    const int fieldUserNumber /*<The user number of the field whose parameter set is to be interpolated. */,
    const int variableType /*<The variable type of the field to interpolate. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to interpolate. \see OPENCMISS_FieldParameterSetTypes */,
    const int derivativeNumber /*<The derivative number of the field to interpolate. */,
    const int userElementNumber /*<The user element number of the field to interpolate. */,
    const int xiSize /*<Length of xi */,
    const double *xi /*<The element xi to interpolate the field at. */,
    const int valuesSize /*<Length of values */,
    double *values /*<The interpolated values. */);
%clear (const int xiSize, const double *xi);
%clear (const int valuesSize, double *values);

%apply (const int DIM1, double *IN_ARRAY1){(const int xiSize, const double *xi)};
%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int valuesSize, double *values)};
/*>Interpolates the given parameter set at a specified xi location for the specified element and derviative and returns double precision values for a field identified by an object. */
CMISSError CMISSField_ParameterSetInterpolateSingleXiDP(const CMISSFieldType field /*<The field whose parameter set is to be interpolated. */,
    const int variableType /*<The variable type of the field to interpolate. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to interpolate. \see OPENCMISS_FieldParameterSetTypes */,
    const int derivativeNumber /*<The derivative number of the field to interpolate. */,
    const int userElementNumber /*<The user element number of the field to interpolate. */,
    const int xiSize /*<Length of xi */,
    const double *xi /*<The element xi to interpolate the field at. */,
    const int valuesSize /*<Length of values */,
    double *values /*<The interpolated values. */);
%clear (const int xiSize, const double *xi);
%clear (const int valuesSize, double *values);

%apply (const int DIM1, const int DIM2, double *IN_FARRAY2){(const int xiSize1, const int xiSize2, const double *xi)};
%apply (const int DIM1, const int DIM2, double *ARGOUT_FARRAY2){(const int valuesSize1, const int valuesSize2, double *values)};
/*>Interpolates the given parameter set at a specified set of xi locations for the specified element and derviative and returns double precision values for a field identified by a user number. */
CMISSError CMISSField_ParameterSetInterpolateMultipleXiDPNum(const int regionUserNumber /*<The user number of the region containing the field whose parameter set is to be interpolated. */,
    const int fieldUserNumber /*<The user number of the field whose parameter set is to be interpolated. */,
    const int variableType /*<The variable type of the field to interpolate. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to interpolate. \see OPENCMISS_FieldParameterSetTypes */,
    const int derivativeNumber /*<The derivative number of the field to interpolate. */,
    const int userElementNumber /*<The user element number of the field to interpolate. */,
    const int xiSize1 /*<Size of dimension 1 of xi */,
    const int xiSize2 /*<Size of dimension 2 of xi */,
    const double *xi /*<The sets of element xi to interpolate the field at. */,
    const int valuesSize1 /*<Size of dimension 1 of values */,
    const int valuesSize2 /*<Size of dimension 2 of values */,
    double *values /*<The interpolated values. */);
%clear (const int xiSize1, const int xiSize2, const double *xi);
%clear (const int valuesSize1, const int valuesSize2, double *values);

%apply (const int DIM1, const int DIM2, double *IN_FARRAY2){(const int xiSize1, const int xiSize2, const double *xi)};
%apply (const int DIM1, const int DIM2, double *ARGOUT_FARRAY2){(const int valuesSize1, const int valuesSize2, double *values)};
/*>Interpolates the given parameter set at a specified set of xi locations for the specified element and derviative and returns double precision values for a field identified by an object. */
CMISSError CMISSField_ParameterSetInterpolateMultipleXiDP(const CMISSFieldType field /*<The field whose parameter set is to be interpolated. */,
    const int variableType /*<The variable type of the field to interpolate. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to interpolate. \see OPENCMISS_FieldParameterSetTypes */,
    const int derivativeNumber /*<The derivative number of the field to interpolate. */,
    const int userElementNumber /*<The user element number of the field to interpolate. */,
    const int xiSize1 /*<Size of dimension 1 of xi */,
    const int xiSize2 /*<Size of dimension 2 of xi */,
    const double *xi /*<The sets of element xi to interpolate the field at. */,
    const int valuesSize1 /*<Size of dimension 1 of values */,
    const int valuesSize2 /*<Size of dimension 2 of values */,
    double *values /*<The interpolated values. */);
%clear (const int xiSize1, const int xiSize2, const double *xi);
%clear (const int valuesSize1, const int valuesSize2, double *values);

%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int valuesSize, double *values)};
/*>Interpolates the given parameter set at a specified Gauss point for the specified element and derviative and returns double precision values for a or a field identified by a user number. */
CMISSError CMISSField_ParameterSetInterpolateSingleGaussDPNum(const int regionUserNumber /*<The user number of the region containing the field whose parameter set is to be interpolated. */,
    const int fieldUserNumber /*<The user number of the field whose parameter set is to be interpolated. */,
    const int variableType /*<The variable type of the field to interpolate. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to interpolate. \see OPENCMISS_FieldParameterSetTypes */,
    const int derivativeNumber /*<The derivative number of the field to interpolate. */,
    const int userElementNumber /*<The user element number of the field to interpolate. */,
    const int quadratureScheme /*<The quadrature scheme to interpolate the field for. */,
    const int GaussPoint /*<The Gauss point to interpolate the field at. */,
    const int valuesSize /*<Length of values */,
    double *values /*<The interpolated values. */);
%clear (const int valuesSize, double *values);

%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int valuesSize, double *values)};
/*>Interpolates the given parameter set at a specified Gauss point for the specified element and derviative and returns double precision values for a field identified by an object. */
CMISSError CMISSField_ParameterSetInterpolateSingleGaussDP(const CMISSFieldType field /*<The field to update the constant value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the constant value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the constant value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int derivativeNumber /*<The derivative number of the field to interpolate. */,
    const int userElementNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int quadratureScheme /*<The quadrature scheme to interpolate the field for. */,
    const int GaussPoint /*<The Gauss point to interpolate the field at. */,
    const int valuesSize /*<Length of values */,
    double *values /*<The interpolated values. */);
%clear (const int valuesSize, double *values);

%apply (const int DIM1, int *IN_ARRAY1){(const int GaussPointsSize, const int *GaussPoints)};
%apply (const int DIM1, const int DIM2, double *ARGOUT_FARRAY2){(const int valuesSize1, const int valuesSize2, double *values)};
/*>Interpolates the given parameter set at a specified set of Gauss points for the specified element and derviative and returns double precision values for a or a field identified by a user number. If no Gauss points are specified then all Gauss points are interpolated. */
CMISSError CMISSField_ParameterSetInterpolateMultipleGaussDPNum(const int regionUserNumber /*<The user number of the region containing the field whose parameter set is to be interpolated. */,
    const int fieldUserNumber /*<The user number of the field whose parameter set is to be interpolated. */,
    const int variableType /*<The variable type of the field to interpolate. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to interpolate. \see OPENCMISS_FieldParameterSetTypes */,
    const int derivativeNumber /*<The derivative number of the field to interpolate. */,
    const int userElementNumber /*<The user element number of the field to interpolate. */,
    const int quadratureScheme /*<The quadrature scheme to interpolate the field for. */,
    const int GaussPointsSize /*<Length of GaussPoints */,
    const int *GaussPoints /*<The Gauss points to interpolate the field at. */,
    const int valuesSize1 /*<Size of dimension 1 of values */,
    const int valuesSize2 /*<Size of dimension 2 of values */,
    double *values /*<The interpolated values. */);
%clear (const int GaussPointsSize, const int *GaussPoints);
%clear (const int valuesSize1, const int valuesSize2, double *values);

%apply (const int DIM1, int *IN_ARRAY1){(const int GaussPointsSize, const int *GaussPoints)};
%apply (const int DIM1, const int DIM2, double *ARGOUT_FARRAY2){(const int valuesSize1, const int valuesSize2, double *values)};
/*>Interpolates the given parameter set at a specified set of Gauss points for the specified element and derviative and returns double precision values for a field identified by an object. If no Gauss points are specified then all Gauss points are interpolated. */
CMISSError CMISSField_ParameterSetInterpolateMultipleGaussDP(const CMISSFieldType field /*<The field to update the constant value for the field parameter set. */,
    const int variableType /*<The variable type of the field to update the constant value for the field parameter set. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type of the field to update the constant value for. \see OPENCMISS_FieldParameterSetTypes */,
    const int derivativeNumber /*<The derivative number of the field to interpolate. */,
    const int userElementNumber /*<The user element number of the field variable component to update for the field parameter set. */,
    const int quadratureScheme /*<The quadrature scheme to interpolate the field for. */,
    const int GaussPointsSize /*<Length of GaussPoints */,
    const int *GaussPoints /*<The Gauss points to interpolate the field at. */,
    const int valuesSize1 /*<Size of dimension 1 of values */,
    const int valuesSize2 /*<Size of dimension 2 of values */,
    double *values /*<The interpolated values. */);
%clear (const int GaussPointsSize, const int *GaussPoints);
%clear (const int valuesSize1, const int valuesSize2, double *values);

/*>Starts the parameter set update for a field variable for a field identified by a user number. */
CMISSError CMISSField_ParameterSetUpdateStartNum(const int regionUserNumber /*<The user number of the region containing the field to start the parameter set update for. */,
    const int fieldUserNumber /*<The user number of the field to start the parameter set update for. */,
    const int variableType /*<The variable type of the field to start the parameter set update for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type to start the update for. \see OPENCMISS_FieldParameterSetTypes */);

/*>Starts the parameter set update for a field variable for a field identified by an object. */
CMISSError CMISSField_ParameterSetUpdateStart(const CMISSFieldType field /*<The field to start the parameter set update for. */,
    const int variableType /*<The variable type of the field to start the parameter set update for. \see OPENCMISS_FieldVariableTypes */,
    const int fieldSetType /*<The parameter set type to start the update for. \see OPENCMISS_FieldParameterSetTypes */);

/*>Copy the parameters from the parameter set of a component of a field variable to the paramters of a parameter set of
 *>a component of another field variable, where both fields are identified by user numbers. */
CMISSError CMISSField_ParametersToFieldParametersComponentCopyNum(const int fromRegionUserNumber /*<The user number of the region containing the field to copy from */,
    const int fromFieldUserNumber /*<The field to copy from */,
    const int fromVariableType /*<The field variable type to copy from */,
    const int fromParameterSetType /*<The field parameter set type to copy from */,
    const int fromComponentNumber /*<The field variable component number to copy from */,
    const int toRegionUserNumber /*<The user number of the region containing the field to copy to */,
    const int toFieldUserNumber /*<The field to copy to */,
    const int toVariableType /*<The field variable type to copy to */,
    const int toParameterSetType /*<The parameter set type to copy to */,
    const int toComponentNumber /*<The field variable component to copy to */);

/*>Copy the parameters from the parameter set of a component of a field variable to the paramters of a parameter set of
 *>a component of another field variable, where both fields are objects. */
CMISSError CMISSField_ParametersToFieldParametersComponentCopy(const CMISSFieldType fromField /*<The field to copy from */,
    const int fromVariableType /*<The field variable type to copy from */,
    const int fromParameterSetType /*<The field parameter set type to copy from */,
    const int fromComponentNumber /*<The field variable component number to copy from */,
    const CMISSFieldType toField /*<The field to copy to */,
    const int toVariableType /*<The field variable type to copy to */,
    const int toParameterSetType /*<The parameter set type to copy to */,
    const int toComponentNumber /*<The field variable component to copy to */);

%apply (int *DummyOutputScalar){(int *scalingType)};
/*>Returns the scaling type for a field identified by a user number. */
CMISSError CMISSField_ScalingTypeGetNum(const int regionUserNumber /*<The user number of the region containing the field to get the scaling type for. */,
    const int fieldUserNumber /*<The user number of the field to get the scaling type for. */,
    int *scalingType /*<On return, the field scaling type. \see OPENCMISS_FieldScalingTypes */);
%clear (int *scalingType);

%apply (int *DummyOutputScalar){(int *scalingType)};
/*>Returns the scaling type for a field identified by an object. */
CMISSError CMISSField_ScalingTypeGet(const CMISSFieldType field /*<The field to get the scaling type for. */,
    int *scalingType /*<On return, the field scaling type. \see OPENCMISS_FieldScalingTypes */);
%clear (int *scalingType);

/*>Sets/changes the scaling type for a field identified by a user number. */
CMISSError CMISSField_ScalingTypeSetNum(const int regionUserNumber /*<The user number of the region containing the field to set the scaling type for. */,
    const int fieldUserNumber /*<The user number of the field to set the scaling type for. */,
    const int scalingType /*<The field scaling type to set. \see OPENCMISS_FieldScalingTypes */);

/*>Sets/changes the scaling type for a field identified by an object. */
CMISSError CMISSField_ScalingTypeSet(const CMISSFieldType field /*<The field to set the scaling type for. */,
    const int scalingType /*<The field scaling type to set. \see OPENCMISS_FieldScalingTypes */);

%apply (int *DummyOutputScalar){(int *fieldType)};
/*>Returns the field type for a field identified by a user number. */
CMISSError CMISSField_TypeGetNum(const int regionUserNumber /*<The user number of the region containing the field to get the field type for. */,
    const int fieldUserNumber /*<The user number of the field to get the field type for. */,
    int *fieldType /*<On return, the field type. \see OPENCMISS_FieldTypes */);
%clear (int *fieldType);

%apply (int *DummyOutputScalar){(int *fieldType)};
/*>Returns the type for a field identified by an object. */
CMISSError CMISSField_TypeGet(const CMISSFieldType field /*<The field to get the field type for. */,
    int *fieldType /*<On return, the field type. \see OPENCMISS_FieldTypes */);
%clear (int *fieldType);

/*>Sets/changes the field type for a field identified by a user number. */
CMISSError CMISSField_TypeSetNum(const int regionUserNumber /*<The user number of the region containing the field to set the field type for. */,
    const int fieldUserNumber /*<The user number of the field to set the field type for. */,
    const int fieldType /*<The field type to set. \see OPENCMISS_FieldTypes */);

/*>Sets/changes the type for a field identified by an object. */
CMISSError CMISSField_TypeSet(const CMISSFieldType field /*<The field to set the field type for. */,
    const int fieldType /*<The field type to set. \see OPENCMISS_FieldTypes */);

%apply (const int Size, char *DummyOutputString){(const int labelSize, char *label)};
/*>Returns the character string label for a field variable for a field identified by a user number. */
CMISSError CMISSField_VariableLabelGetNum(const int regionUserNumber /*<The user number of the region containing the field to get the label for. */,
    const int fieldUserNumber /*<The user number of the field to get the label for. */,
    const int variableType /*<The variable type of the field to get the field variable label \see OPENCMISS_FieldVariableTypes */,
    const int labelSize /*<Length of label string */,
    char *label /*<On return, the field variable label. */);
%clear (const int labelSize, char *label);

%apply (const int Size, char *DummyOutputString){(const int labelSize, char *label)};
/*>Returns the character string label for a field variable for a field identified by an object. */
CMISSError CMISSField_VariableLabelGet(const CMISSFieldType field /*<The field to get the label for. */,
    const int variableType /*<The variable type of the field to get the field variable label \see OPENCMISS_FieldVariableTypes */,
    const int labelSize /*<Length of label string */,
    char *label /*<On return, the field variable label. */);
%clear (const int labelSize, char *label);

%apply (const int Size, const char *DummyInputString){(const int labelSize, const char *label)};
/*>Sets/changes the character string label for a field variable for a field identified by a user number. */
CMISSError CMISSField_VariableLabelSetNum(const int regionUserNumber /*<The user number of the region containing the field to set the label for. */,
    const int fieldUserNumber /*<The user number of the field to set the label for. */,
    const int variableType /*<The variable type of the field to set the field variable label \see OPENCMISS_FieldVariableTypes */,
    const int labelSize /*<Length of label string */,
    const char *label /*<The field variable label to set. */);
%clear (const int labelSize, const char *label);

%apply (const int Size, const char *DummyInputString){(const int labelSize, const char *label)};
/*>Sets/changes the character string label for a field variable for a field identified by an object. */
CMISSError CMISSField_VariableLabelSet(const CMISSFieldType field /*<The field to set the label for. */,
    const int variableType /*<The variable type of the field to set the field variable label \see OPENCMISS_FieldVariableTypes */,
    const int labelSize /*<Length of label string */,
    const char *label /*<The field variable label to set. */);
%clear (const int labelSize, const char *label);

%apply (const int DIM1, int *ARGOUT_ARRAY1){(const int variableTypesSize, int *variableTypes)};
/*>Returns the field variable types for a field identified by a user number. */
CMISSError CMISSField_VariableTypesGetNum(const int regionUserNumber /*<The user number of the region containing the field to get the field variable types for. */,
    const int fieldUserNumber /*<The user number of the field to get the field variable types for. */,
    const int variableTypesSize /*<Length of variableTypes */,
    int *variableTypes /*<variableTypes(variable_idx). On return, the field variable types for the variable_idx'th field variable. \see OPENCMISS_FieldVariableTypes */);
%clear (const int variableTypesSize, int *variableTypes);

%apply (const int DIM1, int *ARGOUT_ARRAY1){(const int variableTypesSize, int *variableTypes)};
/*>Returns the variable types for a field identified by an object. */
CMISSError CMISSField_VariableTypesGet(const CMISSFieldType field /*<The field to get the field variable types for. */,
    const int variableTypesSize /*<Length of variableTypes */,
    int *variableTypes /*<variableTypes(variable_idx). On return, the field variable types for the variable_idx'th field variable. \see OPENCMISS_FieldVariableTypes */);
%clear (const int variableTypesSize, int *variableTypes);

%apply (const int DIM1, int *IN_ARRAY1){(const int variableTypesSize, const int *variableTypes)};
/*>Sets/changes the field variable types for a field identified by a user number. */
CMISSError CMISSField_VariableTypesSetNum(const int regionUserNumber /*<The user number of the region containing the field to set the field variable types for. */,
    const int fieldUserNumber /*<The user number of the field to set the field variable types for. */,
    const int variableTypesSize /*<Length of variableTypes */,
    const int *variableTypes /*<variableTypes(variable_idx). The field variable types for the variable_idx'th field variable to set. \see OPENCMISS_FieldVariableTypes */);
%clear (const int variableTypesSize, const int *variableTypes);

%apply (const int DIM1, int *IN_ARRAY1){(const int variableTypesSize, const int *variableTypes)};
/*>Sets/changes the variable types for a field identified by an object. */
CMISSError CMISSField_VariableTypesSet(const CMISSFieldType field /*<The field to set the field variable types for. */,
    const int variableTypesSize /*<Length of variableTypes */,
    const int *variableTypes /*<variableTypes(variable_idx). The field variable types for the variable_idx'th field variable to set. \see OPENCMISS_FieldVariableTypes */);
%clear (const int variableTypesSize, const int *variableTypes);

%apply (const int Size, const char *DummyInputString){(const int fileNameSize, const char *fileName)};
%apply (const int Size, const char *DummyInputString){(const int methodSize, const char *method)};
/*>Export element information for fields set identified by an object. \todo number method */
CMISSError CMISSFields_ElementsExport(CMISSFieldsType fields /*<The fields to export the elements for. */,
    const int fileNameSize /*<Length of fileName string */,
    const char *fileName /*<The file name to export the elements to */,
    const int methodSize /*<Length of method string */,
    const char *method /*<The export method to use. */);
%clear (const int fileNameSize, const char *fileName);
%clear (const int methodSize, const char *method);

%apply (const int Size, const char *DummyInputString){(const int fileNameSize, const char *fileName)};
%apply (const int Size, const char *DummyInputString){(const int methodSize, const char *method)};
/*>Export nodal information for fields set identified by an object. \todo number method */
CMISSError CMISSFields_NodesExport(CMISSFieldsType fields /*<The fields to export the nodes for. */,
    const int fileNameSize /*<Length of fileName string */,
    const char *fileName /*<The file name to export the nodes to */,
    const int methodSize /*<Length of method string */,
    const char *method /*<The export method to use. */);
%clear (const int fileNameSize, const char *fileName);
%clear (const int methodSize, const char *method);

%apply (const int DIM1, int *IN_ARRAY1){(const int basisUserNumbersSize, const int *basisUserNumbers)};
/*>Returns the basis for a generated mesh on a region identified by a user number. */
CMISSError CMISSGeneratedMesh_BasisGetNum(const int regionUserNumber /*<The user number of the region containing the generated mesh to get the basis for. */,
    const int generatedMeshUserNumber /*<The user number of the generated mesh to get the basis for. */,
    const int basisUserNumbersSize /*<Length of basisUserNumbers */,
    int *basisUserNumbers /*<On return, the user numbers of the bases. */);
%clear (const int basisUserNumbersSize, const int *basisUserNumbers);

%apply (const int ArraySize, const CMISSDummyType *DummyTypes){(const int basesSize, const CMISSBasisType *bases)};
/*>Returns the basis for a generated mesh identified by an object. */
CMISSError CMISSGeneratedMesh_BasisGet(const CMISSGeneratedMeshType generatedMesh /*<The generated mesh to get the basis for. */,
    const int basesSize /*<Length of bases */,
    CMISSBasisType *bases /*<On return, the array of bases. */);
%clear (const int basesSize, const CMISSBasisType *bases);

%apply (const int DIM1, int *IN_ARRAY1){(const int basisUserNumbersSize, const int *basisUserNumbers)};
/*>Sets/changes the basis for a generated mesh on a region identified by a user number. */
CMISSError CMISSGeneratedMesh_BasisSetNum(const int regionUserNumber /*<The user number of the region containing the generated mesh to set the basis for. */,
    const int generatedMeshUserNumber /*<The user number of the generated mesh to set the basis for. */,
    const int basisUserNumbersSize /*<Length of basisUserNumbers */,
    const int *basisUserNumbers /*<The user numbers of the bases to set. */);
%clear (const int basisUserNumbersSize, const int *basisUserNumbers);

%apply (const int ArraySize, const CMISSDummyType *DummyTypes){(const int basesSize, const CMISSBasisType *bases)};
/*>Sets/changes the basis for a generated mesh identified by an object. */
CMISSError CMISSGeneratedMesh_BasisSet(const CMISSGeneratedMeshType generatedMesh /*<The generated mesh to set the basis for. */,
    const int basesSize /*<Length of bases */,
    const CMISSBasisType *bases /*<The bases to set. */);
%clear (const int basesSize, const CMISSBasisType *bases);

%apply (const int DIM1, const int DIM2, double *IN_FARRAY2){(const int baseVectorsSize1, const int baseVectorsSize2, const double *baseVectors)};
/*>Sets/changes the base vectors for a generated mesh on a region identified by a user number. */
CMISSError CMISSGeneratedMesh_BaseVectorsSetNum(const int regionUserNumber /*<The user number of the region containing the generated mesh to set the base vectors for. */,
    const int generatedMeshUserNumber /*<The user number of the generated mesh to set the base vectors for. */,
    const int baseVectorsSize1 /*<Size of dimension 1 of baseVectors */,
    const int baseVectorsSize2 /*<Size of dimension 2 of baseVectors */,
    const double *baseVectors /*<baseVectors(coordinate_idx,xi_idx). The base vectors to set. */);
%clear (const int baseVectorsSize1, const int baseVectorsSize2, const double *baseVectors);

%apply (const int DIM1, const int DIM2, double *IN_FARRAY2){(const int baseVectorsSize1, const int baseVectorsSize2, const double *baseVectors)};
/*>Sets/changes the base vectors for a generated mesh identified by an object. */
CMISSError CMISSGeneratedMesh_BaseVectorsSet(const CMISSGeneratedMeshType generatedMesh /*<The generated mesh to set the base vectors for. */,
    const int baseVectorsSize1 /*<Size of dimension 1 of baseVectors */,
    const int baseVectorsSize2 /*<Size of dimension 2 of baseVectors */,
    const double *baseVectors /*<baseVectors(coordinate_idx,xi_idx). The base vectors to set. */);
%clear (const int baseVectorsSize1, const int baseVectorsSize2, const double *baseVectors);

/*>Finishes the creation of a generated mesh on a region identified by a user number. */
CMISSError CMISSGeneratedMesh_CreateFinishNum(const int regionUserNumber /*<The user number of the region containing the generated mesh to finish the creation of. */,
    const int generatedMeshUserNumber /*<The user number of the generated mesh to finish the creation of. */,
    const int meshUserNumber /*<The user number of the mesh to generate. */);

/*>Finishes the creation of a generated mesh identified by an object. */
CMISSError CMISSGeneratedMesh_CreateFinish(const CMISSGeneratedMeshType generatedMesh /*<The generated mesh to finish the creation of. */,
    const int meshUserNumber /*<The user number of the mesh to generate. */,
    CMISSMeshType mesh /*<On return, the generated mesh. */);

/*>Starts the creation of a generated mesh on a region identified by a user number. */
CMISSError CMISSGeneratedMesh_CreateStartNum(const int generatedMeshUserNumber /*<The user number of the generated mesh to create. */,
    const int regionUserNumber /*<The user number of the region to create the generated mesh in. */);

/*>Starts the creation of a generated mesh on an interface identified by an object. */
CMISSError CMISSGeneratedMesh_CreateStartInterface(const int generatedMeshUserNumber /*<The user number of the generated mesh to create. */,
    CMISSInterfaceType interface /*<The interface to created generated mesh in. */,
    CMISSGeneratedMeshType generatedMesh /*<On return, the created generated mesh. */);

/*>Starts the creation of a generated mesh on a region identified by an object. */
CMISSError CMISSGeneratedMesh_CreateStart(const int generatedMeshUserNumber /*<The user number of the generated mesh to create. */,
    CMISSRegionType region /*<The region to created generated mesh in. */,
    CMISSGeneratedMeshType generatedMesh /*<On return, the created generated mesh. */);

/*>Destroys a generated mesh on a region identified by a user number. */
CMISSError CMISSGeneratedMesh_DestroyNum(const int regionUserNumber /*<The user number of the region containing the generated mesh to destroy. */,
    const int generatedMeshUserNumber /*<The user number of the generated mesh to destroy. */);

/*>Destroys a generated mesh identified by an object. */
CMISSError CMISSGeneratedMesh_Destroy(CMISSGeneratedMeshType generatedMesh /*<The generated mesh to destroy. */);

%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int extentSize, double *extent)};
/*>Returns the extent for a generated mesh on a region identified by a user number. */
CMISSError CMISSGeneratedMesh_ExtentGetNum(const int regionUserNumber /*<The user number of the region containing the generated mesh to get the extent for. */,
    const int generatedMeshUserNumber /*<The user number of the generated mesh to get the extent for. */,
    const int extentSize /*<Length of extent */,
    double *extent /*<extent(i). On return, the extent for the i'th dimension of the generated mesh. */);
%clear (const int extentSize, double *extent);

%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int extentSize, double *extent)};
/*>Returns the extent for a generated mesh identified by an object. */
CMISSError CMISSGeneratedMesh_ExtentGet(const CMISSGeneratedMeshType generatedMesh /*<The generated mesh to get the extent for. */,
    const int extentSize /*<Length of extent */,
    double *extent /*<extent(i). On return, the extent for the i'th dimension of the generated mesh. */);
%clear (const int extentSize, double *extent);

%apply (const int DIM1, double *IN_ARRAY1){(const int extentSize, const double *extent)};
/*>Sets/changes the extent for a generated mesh on a region identified by a user number. */
CMISSError CMISSGeneratedMesh_ExtentSetNum(const int regionUserNumber /*<The user number of the region containing the generated mesh to set the extent for. */,
    const int generatedMeshUserNumber /*<The user number of the generated mesh to set the extent for. */,
    const int extentSize /*<Length of extent */,
    const double *extent /*<extent(i). The extent for the i'th dimension of the generated mesh to set. */);
%clear (const int extentSize, const double *extent);

%apply (const int DIM1, double *IN_ARRAY1){(const int extentSize, const double *extent)};
/*>Sets/changes the extent for a generated mesh identified by an object. */
CMISSError CMISSGeneratedMesh_ExtentSet(const CMISSGeneratedMeshType generatedMesh /*<The generated mesh to set the extent for. */,
    const int extentSize /*<Length of extent */,
    const double *extent /*<extent(i). the extent for the i'th dimension of the generated mesh to set. */);
%clear (const int extentSize, const double *extent);

%apply (const int DIM1, int *ARGOUT_ARRAY1){(const int numberOfElementsSize, int *numberOfElements)};
/*>Returns the number of elements for a generated mesh on a region identified by a user number. */
CMISSError CMISSGeneratedMesh_NumberOfElementsGetNum(const int regionUserNumber /*<The user number of the region containing the generated mesh to get the number of elements for. */,
    const int generatedMeshUserNumber /*<The user number of the generated mesh to get the number of elements for. */,
    const int numberOfElementsSize /*<Length of numberOfElements */,
    int *numberOfElements /*<numberOfElements(i). On return, the number of elements in the i'th dimension of the generated mesh. */);
%clear (const int numberOfElementsSize, int *numberOfElements);

%apply (const int DIM1, int *ARGOUT_ARRAY1){(const int numberOfElementsSize, int *numberOfElements)};
/*>Returns the number of elements for a generated mesh identified by an object. */
CMISSError CMISSGeneratedMesh_NumberOfElementsGet(const CMISSGeneratedMeshType generatedMesh /*<The generated mesh to get the number of elements for. */,
    const int numberOfElementsSize /*<Length of numberOfElements */,
    int *numberOfElements /*<numberOfElements(i). On return, the number of elements in the i'th dimension of the generated mesh. */);
%clear (const int numberOfElementsSize, int *numberOfElements);

%apply (const int DIM1, int *IN_ARRAY1){(const int numberOfElementsSize, const int *numberOfElements)};
/*>Sets/changes the number of elements for a generated mesh on a region identified by a user number. */
CMISSError CMISSGeneratedMesh_NumberOfElementsSetNum(const int regionUserNumber /*<The user number of the region containing the generated mesh to set the number of elements for. */,
    const int generatedMeshUserNumber /*<The user number of the generated mesh to set the number of elements for. */,
    const int numberOfElementsSize /*<Length of numberOfElements */,
    const int *numberOfElements /*<numberOfElements(i). The number of elements in the i'th dimension of the generated mesh to set. */);
%clear (const int numberOfElementsSize, const int *numberOfElements);

%apply (const int DIM1, int *IN_ARRAY1){(const int numberOfElementsSize, const int *numberOfElements)};
/*>Sets/changes the number of elements for a generated mesh identified by an object. */
CMISSError CMISSGeneratedMesh_NumberOfElementsSet(const CMISSGeneratedMeshType generatedMesh /*<The generated mesh to set the number of elements for. */,
    const int numberOfElementsSize /*<Length of numberOfElements */,
    const int *numberOfElements /*<numberOfElements(i). The number of elements in the i'th dimension of the generated mesh to set. */);
%clear (const int numberOfElementsSize, const int *numberOfElements);

%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int originSize, double *origin)};
/*>Returns the origin of a generated mesh on a region identified by a user number. */
CMISSError CMISSGeneratedMesh_OriginGetNum(const int regionUserNumber /*<The user number of the region containing the generated mesh to get the origin for. */,
    const int generatedMeshUserNumber /*<The user number of the generated mesh to get the origin for. */,
    const int originSize /*<Length of origin */,
    double *origin /*<origin(i). On return, the origin of the i'th dimension of the generated mesh. */);
%clear (const int originSize, double *origin);

%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int originSize, double *origin)};
/*>Returns the origin of a generated mesh identified by an object. */
CMISSError CMISSGeneratedMesh_OriginGet(const CMISSGeneratedMeshType generatedMesh /*<The generated mesh to get the origin for. */,
    const int originSize /*<Length of origin */,
    double *origin /*<origin(i). On return, the origin of the i'th dimension of the generated mesh. */);
%clear (const int originSize, double *origin);

%apply (const int DIM1, double *IN_ARRAY1){(const int originSize, const double *origin)};
/*>Sets/changes the origin of a generated mesh on a region identified by a user number. */
CMISSError CMISSGeneratedMesh_OriginSetNum(const int regionUserNumber /*<The user number of the region containing the generated mesh to set the origin for. */,
    const int generatedMeshUserNumber /*<The user number of the generated mesh to set the origin for. */,
    const int originSize /*<Length of origin */,
    const double *origin /*<origin(i). The origin of the i'th dimension of the generated mesh to set. */);
%clear (const int originSize, const double *origin);

%apply (const int DIM1, double *IN_ARRAY1){(const int originSize, const double *origin)};
/*>Sets/changes the origin of a generated mesh identified by an object. */
CMISSError CMISSGeneratedMesh_OriginSet(const CMISSGeneratedMeshType generatedMesh /*<The generated mesh to set the origin for. */,
    const int originSize /*<Length of origin */,
    const double *origin /*<origin(i). The origin of the i'th dimension of the generated mesh to set. */);
%clear (const int originSize, const double *origin);

%apply (int *DummyOutputScalar){(int *generatedMeshType)};
/*>Returns the type of a generated mesh on a region identified by a user number. */
CMISSError CMISSGeneratedMesh_TypeGetNum(const int regionUserNumber /*<The user number of the region containing the generated mesh to get the type for. */,
    const int generatedMeshUserNumber /*<The user number of the generated mesh to get the type for. */,
    int *generatedMeshType /*<On return, the type of the generated mesh. \see OPENCMISS_GeneratedMeshTypes */);
%clear (int *generatedMeshType);

%apply (int *DummyOutputScalar){(int *generatedMeshType)};
/*>Returns the type of a generated mesh identified by an object. */
CMISSError CMISSGeneratedMesh_TypeGet(const CMISSGeneratedMeshType generatedMesh /*<The generated mesh to get the generated mesh type for. */,
    int *generatedMeshType /*<On return, the type of the generated mesh. \see OPENCMISS_GeneratedMeshTypes */);
%clear (int *generatedMeshType);

/*>Sets/changes the type of a generated mesh on a region identified by a user number. */
CMISSError CMISSGeneratedMesh_TypeSetNum(const int regionUserNumber /*<The user number of the region containing the generated mesh to set the type for. */,
    const int generatedMeshUserNumber /*<The user number of the generated mesh to set the type for. */,
    const int generatedMeshType /*<The type of the generated mesh to set. \see OPENCMISS_GeneratedMeshTypes */);

/*>Sets/changes the type of a generated mesh identified by an object. */
CMISSError CMISSGeneratedMesh_TypeSet(const CMISSGeneratedMeshType generatedMesh /*<The generated mesh to set the generated mesh type for. */,
    const int generatedMeshType /*<The type of the generated mesh to set. \see OPENCMISS_GeneratedMeshTypes */);

/*>Calculates and sets the geometric field parameters for a generated mesh identified by a user number. */
CMISSError CMISSGeneratedMesh_GeometricParametersCalculateNum(const int regionUserNumber /*<The user number of the region containing the field to calculate the geometric parameters for. */,
    const int generatedMeshUserNumber /*<The user number of the generated mesh to calculate the geometric parameters for. */,
    const int fieldUserNumber /*<The user number of the field to calculate the geometric parameters for. */);

/*>Calculates and sets the geometric field parameters for a generated mesh identified by an object. */
CMISSError CMISSGeneratedMesh_GeometricParametersCalculate(const CMISSGeneratedMeshType generatedMesh /*<The generated mesh to calculate the geometric parameters for. */,
    CMISSFieldType field /*<The field to calculate the geometric parameters for */);

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSMeshEmbeddingType *meshEmbedding};
/*>Initialises a EmbeddedMeshType object. */
CMISSError CMISSMeshEmbedding_Initialise(CMISSMeshEmbeddingType *meshEmbedding /*<The  MeshEmbeddingType object to initialise. */);
%clear CMISSMeshEmbeddingType *meshEmbedding;

/*>Creates a mesh embedding */
CMISSError CMISSMeshEmbedding_CreateNum(const int regionOneUserNumber /*<The user number of the region containing the mesh. */,
    const int regionTwoUserNumber /*<The user number of the region containing the mesh. */,
    CMISSMeshEmbeddingType meshEmbedding /*<The embedding */,
    const int parentMeshUserNumber /*<The user number of the mesh. */,
    const int childMeshUserNumber /*<The user number of the mesh. */);

/*>Creates a mesh embedding */
CMISSError CMISSMeshEmbedding_Create(CMISSMeshEmbeddingType meshEmbedding /*<The embedding */,
    const CMISSMeshType parentMesh /*<The parent and child meshes */,
    const CMISSMeshType childMesh /*<The parent and child meshes */);

%apply (const int DIM1, int *IN_ARRAY1){(const int nodeNumbersSize, const int *nodeNumbers)};
%apply (const int DIM1, const int DIM2, double *IN_FARRAY2){(const int xiCoordsSize1, const int xiCoordsSize2, const double *xiCoords)};
/*>Sets the embedded nodes for one parent element */
CMISSError CMISSMeshEmbedding_SetChildNodePosition(CMISSMeshEmbeddingType meshEmbedding /*<The embedding */,
    const int elementNumber /*<Parent element number */,
    const int nodeNumbersSize /*<Length of nodeNumbers */,
    const int *nodeNumbers /*<Node numbers in child mesh */,
    const int xiCoordsSize1 /*<Size of dimension 1 of xiCoords */,
    const int xiCoordsSize2 /*<Size of dimension 2 of xiCoords */,
    const double *xiCoords /*<Xi coordinates of embedded nodes wrt parent element */);
%clear (const int nodeNumbersSize, const int *nodeNumbers);
%clear (const int xiCoordsSize1, const int xiCoordsSize2, const double *xiCoords);

/*>Pushes data to embedded mesh. Will generally be used at library and not API level. /TODO: Parameter set etc, function name? */
CMISSError CMISSMeshEmbedding_PushData(CMISSMeshEmbeddingType meshEmbedding /*<The embedding */,
    const CMISSFieldType parentField /*<Fields associated with parent and child mesh to get/set data from */,
    const int parentComponent /*<Component numbers in respective fields */,
    const CMISSFieldType childField /*<Fields associated with parent and child mesh to get/set data from */,
    const int childComponent /*<Component numbers in respective fields */);

%apply (const int DIM1, double *IN_ARRAY1){(const int parentXiCoordsSize, const double *parentXiCoords)};
%apply (const int DIM1, double *IN_ARRAY1){(const int childXiCoordsSize, const double *childXiCoords)};
/*> */
CMISSError CMISSMeshEmbedding_SetGaussPointData(CMISSMeshEmbeddingType meshEmbedding /*<The embedding */,
    const int parentElementNumber /*<Parent element number */,
    const int gaussPointNumber /*<Gauss point number in this element */,
    const int parentXiCoordsSize /*<Length of parentXiCoords */,
    const double *parentXiCoords /*<Xi coordinates of embedded nodes wrt parent element */,
    const int childElementNumber /*<Child element number */,
    const int childXiCoordsSize /*<Length of childXiCoords */,
    const double *childXiCoords /*<Xi coordinates of embedded nodes wrt Child element */);
%clear (const int parentXiCoordsSize, const double *parentXiCoords);
%clear (const int childXiCoordsSize, const double *childXiCoords);

/*> */
CMISSError CMISSMeshEmbedding_PullGaussPointData(CMISSMeshEmbeddingType meshEmbedding /*<The embedding */,
    const CMISSFieldType parentField /*<Fields associated with parent and child mesh to get/set data from */,
    const int parentComponent /*<Component numbers in respective fields */,
    const CMISSFieldType childField /*<Fields associated with parent and child mesh to get/set data from */,
    const int childComponent /*<Component numbers in respective fields */);

%apply (int *DummyOutputScalar){(int *numberOfGaussPoints)};
%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int coordsSize, double *coords)};
/*> */
CMISSError CMISSField_ParameterSetGetGaussPointCoord(CMISSMeshEmbeddingType meshEmbedding /*<The embedding */,
    const int componentNumber /*< */,
    int *numberOfGaussPoints /*< */,
    const int coordsSize /*<Length of coords */,
    double *coords /*<Xi coordinates of embedded nodes wrt Child element */);
%clear (int *numberOfGaussPoints);
%clear (const int coordsSize, double *coords);

/*>Finishes the creation of an interface identified by a user number. */
CMISSError CMISSInterface_CreateFinishNum(const int regionUserNumber /*<The user number of the region containing the interface to finish the interface for. */,
    const int interfaceUserNumber /*<The user number of the interface to finish creating. */);

/*>Finishes the creation of an interface identified by an object. */
CMISSError CMISSInterface_CreateFinish(const CMISSInterfaceType interface /*<The interface to finish creating. */);

/*>Starts the creation of an interface identified by a user number. */
CMISSError CMISSInterface_CreateStartNum(const int interfaceUserNumber /*<The user number of the interface to start the creation of. */,
    const int regionUserNumber /*<The user number of the region containing the interface to start the creation of. */);

/*>Starts the creation of an interface identified by an object. */
CMISSError CMISSInterface_CreateStart(const int interfaceUserNumber /*<The user number of the field to start the creation of. */,
    const CMISSRegionType region /*<The region to create the interface on. */,
    const CMISSInterfaceType interface /*<On return, the created interface. */);

/*>Sets/changes the coordinate system for an interface identified by an user number. */
CMISSError CMISSInterface_CoordinateSystemSetNum(const int parentRegionUserNumber /*<The user number of the parent region where interface was created. */,
    const int interfaceUserNumber /*<The user number of the interface to set the coordinate system for. */,
    const int coordinateSystemUserNumber /*<The user number of the coordinate system to set. */);

/*>Sets/changes the coordinate system for an interface identified by an object. */
CMISSError CMISSInterface_CoordinateSystemSet(const CMISSInterfaceType interface /*<The interface to set the coordinate system for */,
    const CMISSCoordinateSystemType coordinateSystem /*<The coordinate system to set. */);

%apply (int *DummyOutputScalar){(int *coordinateSystemUserNumber)};
/*>Returns the coordinate system for an interface identified by an user number. */
CMISSError CMISSInterface_CoordinateSystemGetNum(const int parentRegionUserNumber /*<The user number of the region to get the coordinate system for. */,
    const int interfaceUserNumber /*<The user number of the interface to get the coordinate system for. */,
    int *coordinateSystemUserNumber /*<On return, the coordinate system user number. */);
%clear (int *coordinateSystemUserNumber);

/*>Returns the coordinate system for an interface identified by an object. */
CMISSError CMISSInterface_CoordinateSystemGet(const CMISSInterfaceType Interface /*<The interface to get the coordinate system for. */,
    CMISSCoordinateSystemType CoordinateSystem /*<On return, the interface coordinate system. */);

/*>Destroys an interface identified by a user number. */
CMISSError CMISSInterface_DestroyNum(const int regionUserNumber /*<The user number of the region containing the interface to destroy. */,
    const int interfaceUserNumber /*<The user number of the interface to destroy. */);

/*>Destroys an interface identified by an object. */
CMISSError CMISSInterface_Destroy(const CMISSInterfaceType interface /*<The interface to destroy. */);

%apply (const int Size, char *DummyOutputString){(const int labelSize, char *label)};
/*>Returns the character string label for an interface identified by an user number. */
CMISSError CMISSInterface_LabelGetNum(const int parentRegionUserNumber /*<The user number of the parent region containing the interface to get the label for. */,
    const int interfaceUserNumber /*<The user number of the interface to get the label for. */,
    const int labelSize /*<Length of label string */,
    char *label /*<On return, the region label. */);
%clear (const int labelSize, char *label);

%apply (const int Size, char *DummyOutputString){(const int labelSize, char *label)};
/*>Returns the character string label for an interface identified by an object. */
CMISSError CMISSInterface_LabelGet(const CMISSInterfaceType interface /*<The interface to get the label for. */,
    const int labelSize /*<Length of label string */,
    char *label /*<On return, the region label. */);
%clear (const int labelSize, char *label);

%apply (const int Size, const char *DummyInputString){(const int labelSize, const char *label)};
/*>Sets/changes the character string label for an interface identified by an user number. */
CMISSError CMISSInterface_LabelSetNum(const int parentRegionUserNumber /*<The user number of the parent region containing the interface to set the label for. */,
    const int interfaceUserNumber /*<The user number of the interface to set the label for. */,
    const int labelSize /*<Length of label string */,
    const char *label /*<The interface label to set. */);
%clear (const int labelSize, const char *label);

%apply (const int Size, const char *DummyInputString){(const int labelSize, const char *label)};
/*>Sets/changes the character string label for an interface identified by an object. */
CMISSError CMISSInterface_LabelSet(const CMISSInterfaceType interface /*<The interface to set the label for. */,
    const int labelSize /*<Length of label string */,
    const char *label /*<The interface label to set. */);
%clear (const int labelSize, const char *label);

/*>Returns the nodes for a interface identified by an object. */
CMISSError CMISSInterface_NodesGet(const CMISSInterfaceType interface /*<The interface to get the nodes for. */,
    CMISSNodesType nodes /*<On return, the interfaces nodes. */);

%apply (int *DummyOutputScalar){(int *meshIndex)};
/*>Adds a mesh to be coupled in an interface identified by a user number. */
CMISSError CMISSInterface_MeshAddNum(const int interfaceRegionUserNumber /*<The user number of the parent region containing the interface to add a coupled mesh to. */,
    const int interfaceUserNumber /*<The user number of the interface to add a coupled mesh to. */,
    const int meshRegionUserNumber /*<The user number of the region containing the mesh to add to the interface. */,
    const int meshUserNumber /*<The user number of the mesh to add to the interface. */,
    int *meshIndex /*<On return, the mesh index of the mesh in the list of coupled meshes in the interface. */);
%clear (int *meshIndex);

%apply (int *DummyOutputScalar){(int *meshIndex)};
/*>Adds a mesh to be coupled in an interface identified by an object. */
CMISSError CMISSInterface_MeshAdd(const CMISSInterfaceType interface /*<The interface to finish creating. */,
    const CMISSMeshType mesh /*<The mesh to add to the interface. */,
    int *meshIndex /*<On return, the mesh index of the mesh in the list of coupled meshes in the interface. */);
%clear (int *meshIndex);

/*>Finishes the creation of an interface coupled mesh connectivity identified by a user number. */
CMISSError CMISSInterfaceMeshConnectivity_CreateFinishNum(const int regionUserNumber /*<The user number of the region containing the interface to finish the interface meshes connectivity for. */,
    const int interfaceUserNumber /*<The user number of the interface to finish creating the meshes connectivity. */);

/*>Finishes the creation of an interface meshes connectivity identified by an object. */
CMISSError CMISSInterfaceMeshConnectivity_CreateFinish(const CMISSInterfaceMeshConnectivityType interfaceMeshConnectivity /*<The interface meshes connectivity to finish creating. */);

/*>Starts the creation of an interface meshes connectivity identified by a user number. */
CMISSError CMISSInterfaceMeshConnectivity_CreateStartNum(const int regionUserNumber /*<The user number of the region containing the interface to start the creation of the meshes connectivity. */,
    const int interfaceUserNumber /*<The user number of the interface to start the creation of the meshes connectivity for. */,
    const int meshNumber /*<The user number of the interface mesh */);

/*>Starts the creation of an interface meshes connectivity identified by an object. */
CMISSError CMISSInterfaceMeshConnectivity_CreateStart(const CMISSInterfaceType interface /*<The interface to start the creation of the meshes connectivity for */,
    const CMISSMeshType interfaceMesh /*< */,
    CMISSInterfaceMeshConnectivityType interfaceMeshConnectivity /*<On return, the created meshes connectivity */);

/*>Sets the connectivity between an element in a coupled mesh to an element in the interface mesh */
CMISSError CMISSInterfaceMeshConnectivity_ElementNumberSetNum(const int regionUserNumber /*<The user number of the region containing the interface meshe connectivity. */,
    const int interfaceUserNumber /*<The user number of the interface. */,
    const int interfaceElementNumber /*<The interface mesh element number to which the specified coupled mesh element would be connected */,
    const int coupledMeshIndexNumber /*<The index of the coupled mesh at the interface to set the element connectivity for */,
    const int coupledMeshElementNumber /*<The coupled mesh element to be connected to the interface */);

/*>Sets the connectivity between an element in a coupled mesh to an element in the interface mesh */
CMISSError CMISSInterfaceMeshConnectivity_ElementNumberSet(const CMISSInterfaceMeshConnectivityType interfaceMeshConnectivity /*<The interface mesh connectivity for the interface mesh */,
    const int interfaceElementNumber /*<The interface mesh element number to which the specified coupled mesh element would be connected */,
    const int coupledMeshIndexNumber /*<The index of the coupled mesh at the interface to set the element connectivity for */,
    const int coupledMeshElementNumber /*<The coupled mesh element to be connected to the interface */);

/*>Sets the connectivity between an element in a coupled mesh to an element in the interface mesh */
CMISSError CMISSInterfaceMeshConnectivity_NodeNumberSetNum(const int regionUserNumber /*<The user number of the region containing the interface meshe connectivity. */,
    const int interfaceUserNumber /*<The user number of the interface. */,
    const int interfaceElementNumber /*<The interface mesh element number to which the specified coupled mesh element would be connected */,
    const int coupledMeshIndexNumber /*<The index of the coupled mesh at the interface to set the element connectivity for */,
    const int coupledMeshElementNumber /*<The coupled mesh element to be connected to the interface */);

%apply (const int DIM1, int *IN_ARRAY1){(const int interfaceNodeNumbersSize, const int *interfaceNodeNumbers)};
%apply (const int DIM1, int *IN_ARRAY1){(const int firstCoupledMeshNodeNumbersSize, const int *firstCoupledMeshNodeNumbers)};
%apply (const int DIM1, int *IN_ARRAY1){(const int secondCoupledMeshNodeNumbersSize, const int *secondCoupledMeshNodeNumbers)};
/*>Sets the connectivity between nodes in coupled meshes to nodes in the interface mesh */
CMISSError CMISSInterfaceMeshConnectivity_NodeNumberSet(const CMISSInterfaceMeshConnectivityType interfaceMeshConnectivity /*<The interface mesh connectivity for the interface mesh */,
    const int interfaceNodeNumbersSize /*<Length of interfaceNodeNumbers */,
    const int *interfaceNodeNumbers /*<The interface mesh node numbers to which the specified coupled mesh nodes would be connected */,
    const int firstCoupledMeshIndexNumber /*<The index of the coupled meshes at the interface to set the node connectivity for */,
    const int firstCoupledMeshNodeNumbersSize /*<Length of firstCoupledMeshNodeNumbers */,
    const int *firstCoupledMeshNodeNumbers /*<The coupled meshes nodes to be connected to the interface */,
    const int secondCoupledMeshIndexNumber /*<The index of the coupled meshes at the interface to set the node connectivity for */,
    const int secondCoupledMeshNodeNumbersSize /*<Length of secondCoupledMeshNodeNumbers */,
    const int *secondCoupledMeshNodeNumbers /*<The coupled meshes nodes to be connected to the interface */);
%clear (const int interfaceNodeNumbersSize, const int *interfaceNodeNumbers);
%clear (const int firstCoupledMeshNodeNumbersSize, const int *firstCoupledMeshNodeNumbers);
%clear (const int secondCoupledMeshNodeNumbersSize, const int *secondCoupledMeshNodeNumbers);

%apply (const int DIM1, double *IN_ARRAY1){(const int xiSize, const double *xi)};
/*>Sets the mapping from an xi position of a coupled mesh element to a node of an interface mesh element */
CMISSError CMISSInterfaceMeshConnectivity_ElementXiSetNum(const int regionUserNumber /*<The user number of the region containing the interface to start the creation of the meshes connectivity. */,
    const int interfaceUserNumber /*<The user number of the interface to start the creation of the meshes connectivity for. */,
    const int interfaceElementNumber /*<The interface mesh element number to which the specified coupled mesh element would be connected */,
    const int coupledMeshIndexNumber /*<The index of the coupled mesh at the interface to set the element connectivity for */,
    const int coupledMeshElementNumber /*<The coupled mesh element to define the element xi connectivity from */,
    const int interfaceMeshLocalNodeNumber /*<The interface mesh node to assign the coupled mesh element xi to */,
    const int interfaceMeshComponentNodeNumber /*<The interface mesh node's component to assign the coupled mesh element xi to */,
    const int xiSize /*<Length of xi */,
    const double *xi /*<The xi value for the xi_idx'th xi direction in the coupled mesh element. */);
%clear (const int xiSize, const double *xi);

%apply (const int DIM1, double *IN_ARRAY1){(const int xiSize, const double *xi)};
/*>Sets the mapping from an xi position of a coupled mesh element to a node of an interface mesh element */
CMISSError CMISSInterfaceMeshConnectivity_ElementXiSet(const CMISSInterfaceMeshConnectivityType interfaceMeshConnectivity /*<The interface to start the creation of the meshes connectivity for */,
    const int interfaceElementNumber /*<The interface mesh element number to which the specified coupled mesh element would be connected */,
    const int coupledMeshIndexNumber /*<The index of the coupled mesh at the interface to set the element connectivity for */,
    const int coupledMeshElementNumber /*<The coupled mesh element to define the element xi connectivity from */,
    const int interfaceMeshLocalNodeNumber /*<The interface mesh node to assign the coupled mesh element xi to */,
    const int interfaceMeshComponentNodeNumber /*<The interface mesh node's component to assign the coupled mesh element xi to */,
    const int xiSize /*<Length of xi */,
    const double *xi /*<The xi value for the xi_idx'th xi direction in the coupled mesh element. */);
%clear (const int xiSize, const double *xi);

/*> */
CMISSError CMISSInterfaceMeshConnectivity_BasisSetNum(const int regionUserNumber /*<The user number of the region containing the interface and interface condition to destroy the meshes connectivity for. */,
    const int interfaceUserNumber /*<The user number of the interface containing the interface condition to destroy the meshes connectivity for. */,
    const int interfaceBasisNumber /*<The user number of the basis to denote the interface mesh connectivity basis */);

/*>Sets the basis for the mesh connectivity */
CMISSError CMISSInterfaceMeshConnectivity_BasisSet(const CMISSInterfaceMeshConnectivityType interfaceMeshConnectivity /*<The interface to start the creation of the meshes connectivity for */,
    CMISSBasisType interfaceMappingBasis /*<The interface mesh connectivity basis */);

/*>Destroys an interface meshes connectivity identified by a user number. */
CMISSError CMISSInterfaceMeshConnectivity_DestroyNum(const int regionUserNumber /*<The user number of the region containing the interface and interface condition to destroy the meshes connectivity for. */,
    const int interfaceUserNumber /*<The user number of the interface containing the interface condition to destroy the meshes connectivity for. */);

/*>Destroys an interface meshes connectivity identified by an object. */
CMISSError CMISSInterfaceMeshConnectivity_Destroy(const CMISSInterfaceMeshConnectivityType interfaceMeshConnectivity /*<The interface meshes connectivity to destroy. */);

/*>Finishes the creation of an interface coupled mesh points connectivity identified by a user number. */
CMISSError CMISSInterfacePointsConnectivity_CreateFinishNum(const int regionUserNumber /*<The user number of the region containing the interface to finish the interface points connectivity for. */,
    const int interfaceUserNumber /*<The user number of the interface to finish creating the points connectivity. */);

/*>Finishes the creation of an interface meshes connectivity identified by an object. */
CMISSError CMISSInterfacePointsConnectivity_CreateFinish(const CMISSInterfacePointsConnectivityType interfacePointsConnectivity /*<The interface points connectivity to finish creating. */);

/*>Starts the creation of an interface points connectivity identified by a user number. */
CMISSError CMISSInterfacePointsConnectivity_CreateStartNum(const int regionUserNumber /*<The user number of the region containing the interface to start the creation of the meshes connectivity. */,
    const int interfaceUserNumber /*<The user number of the interface to start the creation of the meshes connectivity for. */,
    const int MeshNumber /*<The user number of the interface mesh */);

/*>Starts the creation of an interface points connectivity identified by an object. */
CMISSError CMISSInterfacePointsConnectivity_CreateStart(const CMISSInterfaceType interface /*<The interface to start the creation of the meshes connectivity for */,
    const CMISSMeshType interfaceMesh /*< */,
    CMISSInterfacePointsConnectivityType interfacePointsConnectivity /*<On return, the created meshes connectivity */);

/*>Destroys an interface points connectivity identified by a user number. */
CMISSError CMISSInterfacePointsConnectivity_DestroyNum(const int regionUserNumber /*<The user number of the region containing the interface to destroy the points connectivity for. */,
    const int interfaceUserNumber /*<The user number of the interface to destroy the points connectivity for. */);

/*>Destroys an interface points connectivity identified by an object. */
CMISSError CMISSInterfacePointsConnectivity_Destroy(const CMISSInterfacePointsConnectivityType interfacePointsConnectivity /*<The interface points connectivity to destroy. */);

%apply (int *DummyOutputScalar){(int *coupledMeshElementNumber)};
/*>Gets coupled mesh element number that the data point in the interface is connected to */
CMISSError CMISSInterfacePointsConnectivity_ElementNumberGetNum(const int regionUserNumber /*<The user number of the region containing the interface */,
    const int interfaceUserNumber /*<The user number of the interface */,
    const int interfaceDataPointIndexNumber /*<The index of the interface data point, i.e.user defined global number */,
    const int coupledMeshIndexNumber /*<The index number of the coupled mesh */,
    const int meshComponentNumber /*<The mesh component number of the interface mesh that points connectivity is associated to */,
    int *coupledMeshElementNumber /*<The element number where the data point is connected to. */);
%clear (int *coupledMeshElementNumber);

%apply (int *DummyOutputScalar){(int *coupledMeshElementNumber)};
/*>Gets coupled mesh element number that the data point in the interface is connected to */
CMISSError CMISSInterfacePointsConnectivity_ElementNumberGet(const CMISSInterfacePointsConnectivityType interfacePointsConnectivity /*<The interface points connectivity to set the element number for */,
    const int interfaceDataPointIndexNumber /*<The index of the interface data point, i.e.user defined global number */,
    const int coupledMeshIndexNumber /*<The index number of the coupled mesh */,
    const int meshComponentNumber /*<The mesh component number of the interface mesh that points connectivity is associated to */,
    int *coupledMeshElementNumber /*<The element number where the data point is projected to. */);
%clear (int *coupledMeshElementNumber);

/*>Sets coupled mesh element number that the data point in the interface is connected to */
CMISSError CMISSInterfacePointsConnectivity_ElementNumberSetNum(const int regionUserNumber /*<The user number of the region containing the interface */,
    const int interfaceUserNumber /*<The user number of the interface */,
    const int interfaceDataPointIndexNumber /*<The index of the interface data point, i.e.user defined global number */,
    const int coupledMeshIndexNumber /*<The index number of the coupled mesh */,
    const int coupledMeshElementNumber /*<The element number where the data point is projected to. */,
    const int meshComponentNumber /*<The mesh component number to set the points connectivity element number for */);

/*>Sets coupled mesh element number that the data point in the interface is connected to */
CMISSError CMISSInterfacePointsConnectivity_ElementNumberSet(const CMISSInterfacePointsConnectivityType interfacePointsConnectivity /*<The interface points connectivity to set the element number for */,
    const int interfaceDataPointIndexNumber /*<The index of the interface data point, i.e.user defined global number */,
    const int coupledMeshIndexNumber /*<The index number of the coupled mesh */,
    const int coupledMeshElementNumber /*<The element number where the data point is projected to. */,
    const int meshComponentNumber /*<The mesh component number to set the points connectivity element number for */);

%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int xiSize, double *xi)};
/*>Gets the xi coordinate mapping between the data points in interface and xi coordinates in a coupled region mesh */
CMISSError CMISSInterfacePointsConnectivity_PointXiGetNum(const int regionUserNumber /*<The user number of the region containing the interface */,
    const int interfaceUserNumber /*<The user number of the interface */,
    const int interfaceDataPointIndexNumber /*<The index of the interface data point, i.e.user defined global number */,
    const int coupledMeshIndexNumber /*<The index number of the coupled mesh */,
    const int xiSize /*<Length of xi */,
    double *xi /*<xi(xiIdx). The full xi location in the coupled mesh that the data point is connected to */);
%clear (const int xiSize, double *xi);

%apply (const int DIM1, double *ARGOUT_ARRAY1){(const int xiSize, double *xi)};
/*>Gets the xi coordinate mapping between the interface data points and xi coordinates in a coupled region mesh */
CMISSError CMISSInterfacePointsConnectivity_PointXiGet(const CMISSInterfacePointsConnectivityType interfacePointsConnectivity /*<The interface to start the creation of the meshes connectivity for */,
    const int interfaceDataPointIndexNumber /*<The index of the interface data point, i.e.user defined global number */,
    const int coupledMeshIndexNumber /*<The index number of the coupled mesh */,
    const int xiSize /*<Length of xi */,
    double *xi /*<xi(xiIdx). The full xi location in the coupled mesh that the data point is connected to */);
%clear (const int xiSize, double *xi);

%apply (const int DIM1, double *IN_ARRAY1){(const int xiSize, const double *xi)};
/*>Sets the xi coordinate mapping between the data points in interface and xi coordinates in a coupled region mesh */
CMISSError CMISSInterfacePointsConnectivity_PointXiSetNum(const int regionUserNumber /*<The user number of the region containing the interface */,
    const int interfaceUserNumber /*<The user number of the interface */,
    const int interfaceDataPointIndexNumber /*<The index of the interface data point, i.e.user defined global number */,
    const int coupledMeshIndexNumber /*<The index number of the coupled mesh */,
    const int xiSize /*<Length of xi */,
    const double *xi /*<xi(xiIdx). The full xi location in the coupled mesh that the data point is connected to */);
%clear (const int xiSize, const double *xi);

%apply (const int DIM1, double *IN_ARRAY1){(const int xiSize, const double *xi)};
/*>Sets the xi coordinate mapping between the interface data points and xi coordinates in a coupled region mesh */
CMISSError CMISSInterfacePointsConnectivity_PointXiSet(const CMISSInterfacePointsConnectivityType interfacePointsConnectivity /*<The interface to start the creation of the meshes connectivity for */,
    const int interfaceDataPointIndexNumber /*<The index of the interface data point, i.e.user defined global number */,
    const int coupledMeshIndexNumber /*<The index number of the coupled mesh */,
    const int xiSize /*<Length of xi */,
    const double *xi /*<xi(xiIdx). The full xi location in the coupled mesh that the data point is connected to */);
%clear (const int xiSize, const double *xi);

/*>Update points connectivity with projection results, data projection identified by region user number */
CMISSError CMISSInterfacePointsConnectivity_UpdateFromProjectionRNum(const int regionUserNumber /*<The user number of the region containing the interface */,
    const int interfaceUserNumber /*<The user number of the interface */,
    const int dataPointsRegionUserNumber /*<The region number of the data points which the data projection is associated with */,
    const int dataProjectionUserNumber /*<The data projection user number of the data projection to update points connectivity with */,
    const int coupledMeshIndex /*<The index number of the coupled mesh */);

/*>Update points connectivity with projection results, data projection identified by interface user number */
CMISSError CMISSInterfacePointsConnectivity_UpdateFromProjectionINum(const int regionUserNumber /*<The user number of the region containing the interface */,
    const int interfaceUserNumber /*<The user number of the interface */,
    const int dataPointsRegionUserNumber /*<The parent region number of the interface for the data points which the data projection is associated with */,
    const int dataPointsInterfaceUserNumber /*<The interface number of the data points which the data projection is associated with */,
    const int dataProjectionUserNumber /*<The data projection user number of the data projection to update points connectivity with */,
    const int coupledMeshIndex /*<The index number of the coupled mesh */);

/*>Update points connectivity with projection results, data projection identified by object */
CMISSError CMISSInterfacePointsConnectivity_UpdateFromProjection(const CMISSInterfacePointsConnectivityType pointsConnectivity /*<A pointer to the interface points connectivity to finish creating */,
    const CMISSDataProjectionType dataProjection /*<The data projection to update points connectivity with */,
    const int coupledMeshIndex /*<The mesh index of the the points connectivity to be updated */);

/*>Finishes the creation of an interface condition identified by an user number. */
CMISSError CMISSInterfaceCondition_CreateFinishNum(const int regionUserNumber /*<The user number of the region containing the interface to finish the interface condition for. */,
    const int interfaceUserNumber /*<The user number of the interface containg the interface condition to finish creating for. */,
    const int interfaceConditionUserNumber /*<The user number of the interface condition to finish creating. */);

/*>Finishes the creation of an interface condition identified by an object. */
CMISSError CMISSInterfaceCondition_CreateFinish(const CMISSInterfaceConditionType interfaceCondition /*<The interface condition to finish creating. */);

/*>Starts the creation of an interface condition identified by a user number. */
CMISSError CMISSInterfaceCondition_CreateStartNum(const int interfaceConditionUserNumber /*<The user number of the interface condition to start the creation of. */,
    const int regionUserNumber /*<The user number of the region containing the interface to start the creation of the interface condition for. */,
    const int interfaceUserNumber /*<The user number of the interface containing the interface condition to start the creation of. */,
    const int geometricFieldUserNumber /*<The user number of the geometric field on the interface for the interface condition. */);

/*>Starts the creation of an interface condition identified by an object. */
CMISSError CMISSInterfaceCondition_CreateStart(const int interfaceConditionUserNumber /*<The user number of the interface conditon to start the creation of. */,
    const CMISSInterfaceType interface /*<The interface to create the interface on. */,
    const CMISSFieldType geometricField /*<The geometric field for the interface condition. */,
    const CMISSInterfaceConditionType interfaceCondition /*<On return, the created interface condition. */);

/*>Adds a dependent variable to an interface condition identified by a user number. */
CMISSError CMISSInterfaceCondition_DependentVariableAddNum(const int interfaceRegionUserNumber /*<The user number of the region containing the interface containing the interface condition to add the dependent variable for. */,
    const int interfaceUserNumber /*<The user number of the interface containing the interface condition to add the dependent variable for. */,
    const int interfaceConditionUserNumber /*<The user number of the interface condition to add the dependent variable for. */,
    const int meshIndex /*<The mesh index of the interface condition interface for which the dependent variable is added. */,
    const int equationsSetRegionUserNumber /*<The user number of the region containing the equations set containing the dependent field varible to add. */,
    const int equationsSetUserNumber /*<The user number of the equations set containing the dependent field to add the variable for. */,
    const int variableType /*<The variable type of the dependent variable to add. */);

/*>Adds a dependent field variable to an interface condition identified by an object. */
CMISSError CMISSInterfaceCondition_DependentVariableAdd(const CMISSInterfaceConditionType interfaceCondition /*<The interface condition to add the dependent variable to. */,
    const int meshIndex /*<The mesh index of the interface condition interface for which the dependent variable is added. */,
    const CMISSEquationsSetType equationsSet /*<The equations set containg the dependent variable to add. */,
    const int variableType /*<The variable type of the dependent variable to add. */);

/*>Destroys an interface condition identified by a user number. */
CMISSError CMISSInterfaceCondition_DestroyNum(const int regionUserNumber /*<The user number of the region containing the interface containing the interface condition to destroy. */,
    const int interfaceUserNumber /*<The user number of the interface containing the interface condition to destroy. */,
    const int interfaceConditionUserNumber /*<The user number of the interface condition to destroy. */);

/*>Destroys an interface condition identified by an object. */
CMISSError CMISSInterfaceCondition_Destroy(const CMISSInterfaceConditionType interfaceCondition /*<The interface condition to destroy. */);

/*>Finishes the creation of equations for an interface condition identified by an user number. */
CMISSError CMISSInterfaceCondition_EquationsCreateFinishNum(const int regionUserNumber /*<The user number of the region containing the interface to finish the interface equations for. */,
    const int interfaceUserNumber /*<The user number of the interface containg the interface condition to finish the interface equations for. */,
    const int interfaceConditionUserNumber /*<The user number of the interface condition to finish creating the interface equations for. */);

/*>Finishes the creation of interface equations for an interface condition identified by an object. */
CMISSError CMISSInterfaceCondition_EquationsCreateFinish(const CMISSInterfaceConditionType interfaceCondition /*<The interface condition to finish creating the interface equations for. */);

/*>Starts the creation of interface equations for an interface condition identified by a user number. */
CMISSError CMISSInterfaceCondition_EquationsCreateStartNum(const int regionUserNumber /*<The user number of the region containing the interface and interface condition to start the creation of the interface equations for. */,
    const int interfaceUserNumber /*<The user number of the interface containing the interface condition to start the creation of the interface equations for. */,
    const int interfaceConditionUserNumber /*<The user number of the interface condition to start the creation of the interface equations for. */);

/*>Starts the creation of interface equations for an interface condition identified by an object. */
CMISSError CMISSInterfaceCondition_EquationsCreateStart(const CMISSInterfaceConditionType interfaceCondition /*<The interface condition to start the creation of interface equations for */,
    const CMISSInterfaceEquationsType interfaceEquations /*<On return, the created interface equations. */);

/*>Destroys interface equations for an interface condition identified by a user number. */
CMISSError CMISSInterfaceCondition_EquationsDestroyNum(const int regionUserNumber /*<The user number of the region containing the interface and interface condition to destroy the interface equations for. */,
    const int interfaceUserNumber /*<The user number of the interface containing the interface condition to destroy the interface equations for. */,
    const int interfaceConditionUserNumber /*<The user number of the interface condition to destroy the interface equations for. */);

/*>Destroys the interface equations for an interface condition identified by an object. */
CMISSError CMISSInterfaceCondition_EquationsDestroy(const CMISSInterfaceConditionType interfaceCondition /*<The interface condition to destroy the interface equations for. */);

%apply (int *DummyOutputScalar){(int *interfaceConditionIntegrationType)};
/*>Returns the integration type for an interface condition identified by a user number. */
CMISSError CMISSInterfaceCondition_IntegrationTypeGetNum(const int regionUserNumber /*<The user number of the region containing the interface containing the interface condition to get the method for. */,
    const int interfaceUserNumber /*<The user number of the interface containing the interface condition to get the method for. */,
    const int interfaceConditionUserNumber /*<The user number of the interface condition to get the method for. */,
    int *interfaceConditionIntegrationType /*<On return, the interface condition integration type. \see OPENCMISS_InterfaceConditionIntegrationTypes,OPENCMISS */);
%clear (int *interfaceConditionIntegrationType);

%apply (int *DummyOutputScalar){(int *interfaceConditionIntegrationType)};
/*>Gets the integration type for an interface condition identified by an object. */
CMISSError CMISSInterfaceCondition_IntegrationTypeGet(const CMISSInterfaceConditionType interfaceCondition /*<The interface condition to get the method for. */,
    int *interfaceConditionIntegrationType /*<On return, the interface condition integration type. \see OPENCMISS_InterfaceConditionIntegrationTypes,OPENCMISS */);
%clear (int *interfaceConditionIntegrationType);

/*>Sets/changes the integration type for an interface condition identified by a user number. */
CMISSError CMISSInterfaceCondition_IntegrationTypeSetNum(const int regionUserNumber /*<The user number of the region containing the interface containing the interface condition to set the method for. */,
    const int interfaceUserNumber /*<The user number of the interface containing the interface condition to set the method for. */,
    const int interfaceConditionUserNumber /*<The user number of the interface condition to set the method for. */,
    const int interfaceConditionIntegrationType /*<On return, the interface condition integration type. \see OPENCMISS_InterfaceConditionIntegrationTypes,OPENCMISS */);

/*>Sets/changes the integration type for an interface condition identified by an object. */
CMISSError CMISSInterfaceCondition_IntegrationTypeSet(const CMISSInterfaceConditionType interfaceCondition /*<The interface condition to set the method for. */,
    const int interfaceConditionIntegrationType /*<On return, the interface condition integration type. \see OPENCMISS_InterfaceConditionIntegrationTypes,OPENCMISS */);

/*>Finishes the creation of a Lagrange Multiplier Field for an interface condition identified by an user number. */
CMISSError CMISSInterfaceCondition_LagrangeFieldCreateFinishNum(const int regionUserNumber /*<The user number of the region containing the interface and interface condition to finish the Lagrange multiplier field for. */,
    const int interfaceUserNumber /*<The user number of the interface containg the interface condition to finish the Lagrange multiplier field for. */,
    const int interfaceConditionUserNumber /*<The user number of the interface condition to finish creating the Lagrange multiplier field for. */);

/*>Finishes the creation of a Lagrange multiplier field for an interface condition identified by an object. */
CMISSError CMISSInterfaceCondition_LagrangeFieldCreateFinish(const CMISSInterfaceConditionType interfaceCondition /*<The interface condition to finish creating the Lagrange multiplier field for. */);

/*>Starts the creation of a Lagrange multiplier field for an interface condition identified by a user number. */
CMISSError CMISSInterfaceCondition_LagrangeFieldCreateStartNum(const int regionUserNumber /*<The user number of the region containing the interface and interface condition to start the creation of the Lagrange multiplier field for. */,
    const int interfaceUserNumber /*<The user number of the interface containing the interface condition to start the creation of the Lagrange multiplier field for. */,
    const int interfaceConditionUserNumber /*<The user number of the interface condition to start the creation of the Lagrange multiplier field for. */,
    const int lagrangeFieldUserNumber /*<The user number of the Lagrange field. */);

/*>Starts the creation of a Lagrange multiplier field for an interface condition identified by an object. */
CMISSError CMISSInterfaceCondition_LagrangeFieldCreateStart(const CMISSInterfaceConditionType interfaceCondition /*<The interface condition to start the creation of the Lagrange multiplier field for. */,
    const int lagrangeFieldUserNumber /*<The user number of the Lagrange field. */,
    CMISSFieldType lagrangeField /*<If associated on entry, the user created Lagrange field which has the same user number as the specified Lagrange field user number. If not associated on entry, on return, the created Lagrange field for the interface condition. */);

/*>Finishes the creation of a penalty Field for an interface condition identified by an user number. */
CMISSError CMISSInterfaceCondition_PenaltyFieldCreateFinishNum(const int RegionUserNumber /*<The user number of the region containing the interface and interface condition to finish the penalty field for. */,
    const int InterfaceUserNumber /*<The user number of the interface containg the interface condition to finish the penalty  field for. */,
    const int InterfaceConditionUserNumber /*<The user number of the interface condition to finish creating the penalty field for. */);

/*>Finishes the creation of a penalty field for an interface condition identified by an object. */
CMISSError CMISSInterfaceCondition_PenaltyFieldCreateFinish(const CMISSInterfaceConditionType InterfaceCondition /*<The interface condition to finish creating the penalty field for. */);

/*>Starts the creation of a penalty field for an interface condition identified by a user number. */
CMISSError CMISSInterfaceCondition_PenaltyFieldCreateStartNum(const int RegionUserNumber /*<The user number of the region containing the interface and interface condition to start the creation of the penalty field for. */,
    const int InterfaceUserNumber /*<The user number of the interface containing the interface condition to start the creation of the penalty field for. */,
    const int InterfaceConditionUserNumber /*<The user number of the interface condition to start the creation of the penalty field for. */,
    const int PenaltyFieldUserNumber /*<The user number of the penalty field. */);

/*>Starts the creation of a penalty field for an interface condition identified by an object. */
CMISSError CMISSInterfaceCondition_PenaltyFieldCreateStart(const CMISSInterfaceConditionType InterfaceCondition /*<The interface condition to start the creation of the penalty field for. */,
    const int PenaltyFieldUserNumber /*<The user number of the penalty field. */,
    CMISSFieldType PenaltyField /*<If associated on entry, the user created penalty field which has the same user number as the specified penalty field user number. If not associated on entry, on return, the created penalty field for the interface condition. */);

%apply (int *DummyOutputScalar){(int *interfaceConditionMethod)};
/*>Returns the method for an interface condition identified by a user number. */
CMISSError CMISSInterfaceCondition_MethodGetNum(const int regionUserNumber /*<The user number of the region containing the interface containing the interface condition to get the method for. */,
    const int interfaceUserNumber /*<The user number of the interface containing the interface condition to get the method for. */,
    const int interfaceConditionUserNumber /*<The user number of the interface condition to get the method for. */,
    int *interfaceConditionMethod /*<On return, the interface condition method. \see OPENCMISS_InterfaceConditionMethods,OPENCMISS */);
%clear (int *interfaceConditionMethod);

%apply (int *DummyOutputScalar){(int *interfaceConditionMethod)};
/*>Gets the method for an interface condition identified by an object. */
CMISSError CMISSInterfaceCondition_MethodGet(const CMISSInterfaceConditionType interfaceCondition /*<The interface condition to get the method for. */,
    int *interfaceConditionMethod /*<On return, the interface condition method. \see OPENCMISS_InterfaceConditionMethods,OPENCMISS */);
%clear (int *interfaceConditionMethod);

/*>Sets/changes the method for an interface condition identified by a user number. */
CMISSError CMISSInterfaceCondition_MethodSetNum(const int regionUserNumber /*<The user number of the region containing the interface containing the interface condition to set the method for. */,
    const int interfaceUserNumber /*<The user number of the interface containing the interface condition to set the method for. */,
    const int interfaceConditionUserNumber /*<The user number of the interface condition to set the method for. */,
    const int interfaceConditionMethod /*<The interface condition method to set. \see OPENCMISS_InterfaceConditionMethods,OPENCMISS */);

/*>Sets/changes the method for an interface condition identified by an object. */
CMISSError CMISSInterfaceCondition_MethodSet(const CMISSInterfaceConditionType interfaceCondition /*<The interface condition to set the method for. */,
    const int interfaceConditionMethod /*<The interface condition method to set. \see OPENCMISS_InterfaceConditionMethods,OPENCMISS */);

%apply (int *DummyOutputScalar){(int *interfaceConditionOperator)};
/*>Returns the operator for an interface condition identified by a user number. */
CMISSError CMISSInterfaceCondition_OperatorGetNum(const int regionUserNumber /*<The user number of the region containing the interface containing the interface condition to get the operator for. */,
    const int interfaceUserNumber /*<The user number of the interface containing the interface condition to get the operator for. */,
    const int interfaceConditionUserNumber /*<The user number of the interface condition to get the operator for. */,
    int *interfaceConditionOperator /*<On return, the interface condition operator. \see OPENCMISS_InterfaceConditionOperators,OPENCMISS */);
%clear (int *interfaceConditionOperator);

%apply (int *DummyOutputScalar){(int *interfaceConditionOperator)};
/*>Gets the operator for an interface condition identified by an object. */
CMISSError CMISSInterfaceCondition_OperatorGet(const CMISSInterfaceConditionType interfaceCondition /*<The interface condition to get the operator for. */,
    int *interfaceConditionOperator /*<On return, the interface condition operator. \see OPENCMISS_InterfaceConditionOperator,OPENCMISS */);
%clear (int *interfaceConditionOperator);

/*>Sets/changes the operator for an interface condition identified by a user number. */
CMISSError CMISSInterfaceCondition_OperatorSetNum(const int regionUserNumber /*<The user number of the region containing the interface containing the interface condition to set the operator for. */,
    const int interfaceUserNumber /*<The user number of the interface containing the interface condition to set the operator for. */,
    const int interfaceConditionUserNumber /*<The user number of the interface condition to set the operator for. */,
    const int interfaceConditionOperator /*<The interface condition operator to set. \see OPENCMISS_InterfaceConditionOperators,OPENCMISS */);

/*>Sets/changes the operator for an interface condition identified by an object. */
CMISSError CMISSInterfaceCondition_OperatorSet(const CMISSInterfaceConditionType interfaceCondition /*<The interface condition to set the operator for. */,
    const int interfaceConditionOperator /*<The interface condition operator to set. \see OPENCMISS_InterfaceConditionOperator,OPENCMISS */);

%apply (int *DummyOutputScalar){(int *outputType)};
/*>Returns the output type for an interface equations identified by a user number. */
CMISSError CMISSInterfaceEquations_OutputTypeGetNum(const int regionUserNumber /*<The user number of the region containing the interface, interface condition and interface equations to get the output type for. */,
    const int interfaceUserNumber /*<The user number of the interface, interface condition and interface equations to get the ouput type for. */,
    const int interfaceConditionUserNumber /*<The user number of the interface condition and interface equation to get the output type for. */,
    int *outputType /*<On return, the interface equations output type. \see OPENCMISS_EquationsOutputType,OPENCMISS */);
%clear (int *outputType);

%apply (int *DummyOutputScalar){(int *outputType)};
/*>Gets the output type for an interface equations identified by an object. */
CMISSError CMISSInterfaceEquations_OutputTypeGet(const CMISSInterfaceEquationsType interfaceEquations /*<The interface equations to get the output type for. */,
    int *outputType /*<On return, the interface equations output type. \see OPENCMISS_EquationsOutputType,OPENCMISS */);
%clear (int *outputType);

/*>Sets/changes the output type for an interface equations identified by a user number. */
CMISSError CMISSInterfaceEquations_OutputTypeSetNum(const int regionUserNumber /*<The user number of the region containing the interface, interface condition and interface equations to set the output type for. */,
    const int interfaceUserNumber /*<The user number of the interface, interface condition and interface equations to set the output type for. */,
    const int interfaceConditionUserNumber /*<The user number of the interface condition and interface equations to set the output type for. */,
    const int outputType /*<The interface equations output type to set. \see OPENCMISS_EquationsOutputTypes,OPENCMISS */);

/*>Sets/changes the output type for an interface equations identified by an object. */
CMISSError CMISSInterfaceEquations_OutputTypeSet(const CMISSInterfaceEquationsType interfaceEquations /*<The interface equations to set the output type for. */,
    const int outputType /*<The interface equations output type to set. \see OPENCMISS_EquationsOutputTypes,OPENCMISS */);

%apply (int *DummyOutputScalar){(int *sparsityType)};
/*>Returns the sparsity type for an interface equations identified by a user number. */
CMISSError CMISSInterfaceEquations_SparsityGetNum(const int regionUserNumber /*<The user number of the region containing the interface, interface condition and interface equations to get the sparsity type for. */,
    const int interfaceUserNumber /*<The user number of the interface, interface condition and interface equations to get the sparsity type for. */,
    const int interfaceConditionUserNumber /*<The user number of the interface condition and interface equation to get the sparsity type for. */,
    int *sparsityType /*<On return, the interface equations sparsity type. \see OPENCMISS_EquationsSparsityType,OPENCMISS */);
%clear (int *sparsityType);

%apply (int *DummyOutputScalar){(int *sparsityType)};
/*>Gets the sparsity type for an interface equations identified by an object. */
CMISSError CMISSInterfaceEquations_SparsityGet(const CMISSInterfaceEquationsType interfaceEquations /*<The interface equations to get the sparsity type for. */,
    int *sparsityType /*<On return, the interface equations sparsity type. \see OPENCMISS_EquationsSparsityType,OPENCMISS */);
%clear (int *sparsityType);

/*>Sets/changes the sparsity type for an interface equations identified by a user number. */
CMISSError CMISSInterfaceEquations_SparsitySetNum(const int regionUserNumber /*<The user number of the region containing the interface, interface condition and interface equations to set the sparsity type for. */,
    const int interfaceUserNumber /*<The user number of the interface, interface condition and interface equations to set the sparsity type for. */,
    const int interfaceConditionUserNumber /*<The user number of the interface condition and interface equations to set the sparsity type for. */,
    const int sparsityType /*<The interface equations sparsity type to set. \see OPENCMISS_EquationsSparsityTypes,OPENCMISS */);

/*>Sets/changes the sparsity type for an interface equations identified by an object. */
CMISSError CMISSInterfaceEquations_SparsitySet(const CMISSInterfaceEquationsType interfaceEquations /*<The interface equations to set the sparsity type for. */,
    const int sparsityType /*<The interface equations sparsity type to set. \see OPENCMISS_EquationsSparsityTypes,OPENCMISS */);

/*>Finishes the creation of a domain decomposition for a decomposition identified by a user number. */
CMISSError CMISSDecomposition_CreateFinishNum(const int regionUserNumber /*<The user number of the region containing the mesh to finish the decomposition for. */,
    const int meshUserNumber /*<The user number of the mesh to finish the decomposition for. */,
    const int decompositionUserNumber /*<The user number of the decomposition to finish. */);

/*>Finishes the creation of a domain decomposition for a decomposition identified by an object. */
CMISSError CMISSDecomposition_CreateFinish(const CMISSDecompositionType decomposition /*<The decomposition to finish creating. */);

/*>Calculates the decomposition topology for data points */
CMISSError CMISSDecomposition_TopologyDataProjectionCalculate(const CMISSDecompositionType decomposition /*<The decomposition to finish creating. */);

%apply (int *DummyOutputScalar){(int *dataPointLocalNumber)};
/*>Gets the local data point number for data points projected on an element */
CMISSError CMISSDecomposition_TopologyElementDataPointLocalNumberGet(const CMISSDecompositionType decomposition /*<The decomposition to finish creating. */,
    const int elementNumber /*<The element number to get the data point for */,
    const int dataPointIndex /*<The data point index to get the number for */,
    int *dataPointLocalNumber /*<The data point local number to retu */);
%clear (int *dataPointLocalNumber);

%apply (int *DummyOutputScalar){(int *dataPointUserNumber)};
/*>Gets the user data point number for data points projected on an element */
CMISSError CMISSDecomposition_TopologyElementDataPointUserNumberGet(const CMISSDecompositionType decomposition /*<The decomposition to finish creating. */,
    const int elementNumber /*<The element number to get the data point for */,
    const int dataPointIndex /*<The data point index to get the number for */,
    int *dataPointUserNumber /*<The data point user number to retu */);
%clear (int *dataPointUserNumber);

%apply (int *DummyOutputScalar){(int *numberOfDataPoints)};
/*>Gets the number of data points projected on an element */
CMISSError CMISSDecomposition_TopologyNumberOfElementDataPointsGet(const CMISSDecompositionType decomposition /*<The decomposition to finish creating. */,
    const int elementNumber /*<The element number to get the data point for */,
    int *numberOfDataPoints /*<The data point local number to return */);
%clear (int *numberOfDataPoints);

/*>Starts the creation of a domain decomposition for a decomposition identified by a user number. */
CMISSError CMISSDecomposition_CreateStartNum(const int decompositionUserNumber /*<The user number of the decomposition to create. */,
    const int regionUserNumber /*<The user number of the region containing the mesh to create the decomposition for. */,
    const int meshUserNumber /*<The user number of the mesh to create the decomposition for. */);

/*>Starts the creation of a domain decomposition for a decomposition identified by an object. */
CMISSError CMISSDecomposition_CreateStart(const int decompositionUserNumber /*<The user number of the decomposition to create. */,
    const CMISSMeshType mesh /*<The mesh to create the decomposition for. */,
    CMISSDecompositionType decomposition /*<On return, the created decomposition. */);

/*>Destroys a decomposition identified by a user number. */
CMISSError CMISSDecomposition_DestroyNum(const int regionUserNumber /*<The user number of the region containing the mesh to destroy the decomposition for. */,
    const int meshUserNumber /*<The user number of the mesh to destroy the decomposition for. */,
    const int decompositionUserNumber /*<The user number of the decomposition to destroy. */);

/*>Destroys a decomposition identified by an object. */
CMISSError CMISSDecomposition_Destroy(const CMISSDecompositionType decomposition /*<The decomposition to destroy. */);

/*>Calculates the element domains for a decomposition identified by a user number. */
CMISSError CMISSDecomposition_ElementDomainCalculateNum(const int regionUserNumber /*<The user number of the region containing the mesh to calculate the element domains for. */,
    const int meshUserNumber /*<The user number of the mesh to calculate the element domains for. */,
    const int decompositionUserNumber /*<The user number of the decomposition to calculate the element domains for. */);

/*>Calculates the element domains for a decomposition identified by an object. */
CMISSError CMISSDecomposition_ElementDomainCalculate(const CMISSDecompositionType decomposition /*<The decomposition to calcualte the element domains for. */);

%apply (int *DummyOutputScalar){(int *domain)};
/*>Returns the domain for a given element in a decomposition identified by a user number. */
CMISSError CMISSDecomposition_ElementDomainGetNum(const int regionUserNumber /*<The user number of the region containing the mesh to get the element domain for. */,
    const int meshUserNumber /*<The user number of the mesh to get the element domain for. */,
    const int decompositionUserNumber /*<The user number of the decomposition to get the element domain for. */,
    const int elementUserNumber /*<The user number of the element to get the domain for. */,
    int *domain /*<On return, the computational domain of the element. */);
%clear (int *domain);

%apply (int *DummyOutputScalar){(int *domain)};
/*>Returns the domain for a given element in a decomposition identified by an object. */
CMISSError CMISSDecomposition_ElementDomainGet(const CMISSDecompositionType decomposition /*<The decomposition to get the domain for. */,
    const int elementUserNumber /*<The user number of the element to get the domain for. */,
    int *domain /*<On return, the computational domain of the element. */);
%clear (int *domain);

/*>Sets/changes the domain for a given element in a decomposition identified by a user number. */
CMISSError CMISSDecomposition_ElementDomainSetNum(const int regionUserNumber /*<The user number of the region containing the mesh to set the element domain for. */,
    const int meshUserNumber /*<The user number of the mesh to set the element domain for. */,
    const int decompositionUserNumber /*<The user number of the decomposition to set the element domain for. */,
    const int elementUserNumber /*<The user number of the element to set the domain for. */,
    const int domain /*<The computational domain of the element to set. */);

/*>Sets/changes the domain for a given element in a decomposition identified by an object. */
CMISSError CMISSDecomposition_ElementDomainSet(const CMISSDecompositionType decomposition /*<The decomposition to set the element domain for. */,
    const int elementUserNumber /*<The user number of the element to set the domain for. */,
    const int domain /*<The computational domain of the element to set. */);

%apply (int *DummyOutputScalar){(int *meshComponentNumber)};
/*>Returns the mesh component number used for the decomposition of a mesh for a decomposition identified by a user number. */
CMISSError CMISSDecomposition_MeshComponentGetNum(const int regionUserNumber /*<The user number of the region containing the mesh to get the decomposition mesh component for. */,
    const int meshUserNumber /*<The user number of the mesh to get the decomposition mesh component for. */,
    const int decompositionUserNumber /*<The user number of the decomposition to get the mesh component for. */,
    int *meshComponentNumber /*<On return, the mesh component number for the decomposition. */);
%clear (int *meshComponentNumber);

%apply (int *DummyOutputScalar){(int *meshComponentNumber)};
/*>Returns the mesh component number used for the decomposition of a mesh for a decomposition identified by an object. */
CMISSError CMISSDecomposition_MeshComponentGet(const CMISSDecompositionType decomposition /*<The decomposition to get the mesh component for. */,
    int *meshComponentNumber /*<On return, the mesh component number for the decomposition. */);
%clear (int *meshComponentNumber);

/*>Sets/changes the mesh component number used for the decomposition of a mesh for a decomposition identified by a user number. */
CMISSError CMISSDecomposition_MeshComponentSetNum(const int regionUserNumber /*<The user number of the region containing the mesh to set the decomposition mesh component for. */,
    const int meshUserNumber /*<The user number of the mesh to set the decomposition mesh component for. */,
    const int decompositionUserNumber /*<The user number of the decomposition to set the mesh component for. */,
    const int meshComponentNumber /*<The mesh component number for the decomposition to set. */);

/*>Sets/changes the mesh component number used for the decomposition of a mesh for a decomposition identified by an object. */
CMISSError CMISSDecomposition_MeshComponentSet(const CMISSDecompositionType decomposition /*<The decomposition to Set the mesh component for. */,
    const int meshComponentNumber /*<The mesh component number for the decomposition to set. */);

%apply (int *DummyOutputScalar){(int *numberOfDomains)};
/*>Returns the number of domains for a decomposition identified by a user number. */
CMISSError CMISSDecomposition_NumberOfDomainsGetNum(const int regionUserNumber /*<The user number of the region containing the mesh to get the number of domains for. */,
    const int meshUserNumber /*<The user number of the mesh to get the number of domains for. */,
    const int decompositionUserNumber /*<The user number of the decomposition to get the number of domains for. */,
    int *numberOfDomains /*<On return, the number of domains in the decomposition. */);
%clear (int *numberOfDomains);

%apply (int *DummyOutputScalar){(int *numberOfDomains)};
/*>Returns the number of domains for a decomposition identified by an object. */
CMISSError CMISSDecomposition_NumberOfDomainsGet(const CMISSDecompositionType decomposition /*<The decomposition to get the number of domains for. */,
    int *numberOfDomains /*<On return, the number of domains in the decomposition. */);
%clear (int *numberOfDomains);

/*>Sets/changes the number of domains for a decomposition identified by a user number. */
CMISSError CMISSDecomposition_NumberOfDomainsSetNum(const int regionUserNumber /*<The user number of the region containing the mesh to set the number of domains for. */,
    const int meshUserNumber /*<The user number of the mesh to set the number of domains for. */,
    const int decompositionUserNumber /*<The user number of the decomposition to set the number of domains for. */,
    const int numberOfDomains /*<The number of domains in the decomposition to set. */);

/*>Sets/changes the number of domains for a decomposition identified by an object. */
CMISSError CMISSDecomposition_NumberOfDomainsSet(const CMISSDecompositionType decomposition /*<The decomposition to set the number of domains for. */,
    const int numberOfDomains /*<The number of domains in the decomposition to set. */);

%apply (int *DummyOutputScalar){(int *decompositionType)};
/*>Returns the type of a decomposition identified by a user number. */
CMISSError CMISSDecomposition_TypeGetNum(const int regionUserNumber /*<The user number of the region containing the mesh to get the decomposition type for. */,
    const int meshUserNumber /*<The user number of the mesh to get the decomposition type for. */,
    const int decompositionUserNumber /*<The user number of the decomposition to get the decomposition type for. */,
    int *decompositionType /*<On return, the type of the decomposition. */);
%clear (int *decompositionType);

%apply (int *DummyOutputScalar){(int *decompositionType)};
/*>Returns the type of a decomposition identified by an object. */
CMISSError CMISSDecomposition_TypeGet(const CMISSDecompositionType decomposition /*<The decomposition to get the type for. */,
    int *decompositionType /*<On return, the type of the decomposition. */);
%clear (int *decompositionType);

/*>Sets/changes the type of a decomposition identified by a user number. */
CMISSError CMISSDecomposition_TypeSetNum(const int regionUserNumber /*<The user number of the region containing the mesh to set the decomposition type for. */,
    const int meshUserNumber /*<The user number of the mesh to set the decomposition type for. */,
    const int decompositionUserNumber /*<The user number of the decomposition to set the decomposition type for. */,
    const int decompositionType /*<The type of the decomposition to set. */);

/*>Sets/changes the type of a decomposition identified by an object. */
CMISSError CMISSDecomposition_TypeSet(const CMISSDecompositionType decomposition /*<The decomposition to Set the type for. */,
    const int decompositionType /*<The type of the decomposition to set. */);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *calculateLinesFlag)};
/*>Sets whether lines should be calculated */
CMISSError CMISSDecomposition_CalculateLinesSetNum(const int regionUserNumber /*<The user number of the region. */,
    const int meshUserNumber /*<The user number of the mesh. */,
    const int decompositionUserNumber /*<The user number of the decomposition to set the calculate lines flag for. */,
    const CMISSBool calculateLinesFlag /*<Boolean to determine whether to set lines to be calculated. */);
%clear (const CMISSBool *calculateLinesFlag);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *calculateLinesFlag)};
/*>Sets whether lines should be calculated */
CMISSError CMISSDecomposition_CalculateLinesSet(const CMISSDecompositionType decomposition /*<The decomposition to set the calculate lines flag for. */,
    const CMISSBool calculateLinesFlag /*<Boolean to determine whether to set lines to be calculated. */);
%clear (const CMISSBool *calculateLinesFlag);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *calculateFacesFlag)};
/*>Sets whether faces should be calculated */
CMISSError CMISSDecomposition_CalculateFacesSetNum(const int regionUserNumber /*<The user number of the region. */,
    const int meshUserNumber /*<The user number of the mesh. */,
    const int decompositionUserNumber /*<The user number of the decomposition to set the decomposition type for. */,
    const CMISSBool calculateFacesFlag /*<Boolean to determine whether to set faces to be calculated. */);
%clear (const CMISSBool *calculateFacesFlag);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *calculateFacesFlag)};
/*>Sets whether faces should be calculated */
CMISSError CMISSDecomposition_CalculateFacesSet(const CMISSDecompositionType decomposition /*<The decomposition to set the calculate faces flag for. */,
    const CMISSBool calculateFacesFlag /*<Boolean to determine whether to set faces to be calculated. */);
%clear (const CMISSBool *calculateFacesFlag);

%apply (int *DummyOutputScalar){(int *domain)};
/*>Returns the domain for a given node in a decomposition identified by a user number. */
CMISSError CMISSDecomposition_NodeDomainGetNum(const int regionUserNumber /*<The user number of the region containing the mesh to get the node domain for. */,
    const int meshUserNumber /*<The user number of the mesh to get the node domain for. */,
    const int decompositionUserNumber /*<The user number of the decomposition to get the node domain for. */,
    const int nodeUserNumber /*<The user number of the node to get the domain for. */,
    const int meshComponentNumber /*<The user number of the mesh component to get the domain for. */,
    int *domain /*<On return, the computational domain of the node. */);
%clear (int *domain);

%apply (int *DummyOutputScalar){(int *domain)};
/*>Returns the domain for a given node in a decomposition identified by an object. \todo Maybe swap Node and MeshComponent? */
CMISSError CMISSDecomposition_NodeDomainGet(const CMISSDecompositionType decomposition /*<The decomposition to get the domain for. */,
    const int nodeUserNumber /*<The user number of the node to get the domain for. */,
    const int meshComponentNumber /*<The user number of the mesh component to get the domain for. */,
    int *domain /*<On return, the computational domain of the node. */);
%clear (int *domain);

/*>Finishes the creation of a mesh for a mesh identified by a user number. */
CMISSError CMISSMesh_CreateFinishNum(const int regionUserNumber /*<The user number of the region containing the mesh to finish the creation of. */,
    const int meshUserNumber /*<The user number of the mesh to finish the creation of. */);

/*>Finishes the creation of a mesh for a mesh identified by an object. */
CMISSError CMISSMesh_CreateFinish(const CMISSMeshType mesh /*<The mesh to finish creating. */);

/*>Starts the creation of a mesh for a mesh identified by a user number. */
CMISSError CMISSMesh_CreateStartNum(const int meshUserNumber /*<The user number of the mesh to start the creation of. */,
    const int regionUserNumber /*<The user number of the region containing the mesh to start the creation of. */,
    const int numberOfDimensions /*<The number of dimensions for the mesh. */);

/*>Starts the creation of a mesh for a mesh identified by an object. */
CMISSError CMISSMesh_CreateStart(const int meshUserNumber /*<The user number of the mesh to start the creation of. */,
    const CMISSRegionType region /*<The region containing the mesh to start the creation of. */,
    const int numberOfDimensions /*<The number of dimensions for the mesh. */,
    CMISSMeshType mesh /*<On return, the created mesh. */);

/*>Starts the creation of a mesh for a mesh identified by an object. */
CMISSError CMISSMesh_CreateStartInterface(const int meshUserNumber /*<The user number of the mesh to start the creation of. */,
    const CMISSInterfaceType interface /*<The interface containing the mesh to start the creation of. */,
    const int numberOfDimensions /*<The number of dimensions for the mesh. */,
    CMISSMeshType mesh /*<On return, the created mesh. */);

/*>Destroys a mesh identified by a user number. */
CMISSError CMISSMesh_DestroyNum(const int regionUserNumber /*<The user number of the region containing the mesh to destroy. */,
    const int meshUserNumber /*<The user number of the mesh to destroy. */);

/*>Destroys a mesh identified by an object. */
CMISSError CMISSMesh_Destroy(const CMISSMeshType mesh /*<The mesh to destroy. */);

%apply (int *DummyOutputScalar){(int *numberOfComponents)};
/*>Returns the number of components in a mesh identified by a user number. */
CMISSError CMISSMesh_NumberOfComponentsGetNum(const int regionUserNumber /*<The user number of the region containing the mesh to get the number of components for. */,
    const int meshUserNumber /*<The user number of the mesh to get the number of components for. */,
    int *numberOfComponents /*<On return, the number of components in the mesh. */);
%clear (int *numberOfComponents);

%apply (int *DummyOutputScalar){(int *numberOfComponents)};
/*>Returns the number of components in a mesh identified by an object. */
CMISSError CMISSMesh_NumberOfComponentsGet(const CMISSMeshType mesh /*<The mesh to get the number of components for. */,
    int *numberOfComponents /*<On return, the number of components in the mesh. */);
%clear (int *numberOfComponents);

/*>Sets/changes the number of components in a mesh identified by a user number. */
CMISSError CMISSMesh_NumberOfComponentsSetNum(const int regionUserNumber /*<The user number of the region containing the mesh to set the number of components for. */,
    const int meshUserNumber /*<The user number of the mesh to set the number of components for. */,
    const int numberOfComponents /*<The number of components in the mesh to set. */);

/*>Sets/changes the number of components in a mesh identified by an object. */
CMISSError CMISSMesh_NumberOfComponentsSet(const CMISSMeshType mesh /*<The mesh to set the number of components for. */,
    const int numberOfComponents /*<The number of components in the mesh to set. */);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *surroundingElementsCalculateFlag)};
/*>Sets/changes the surrounding elements calculate flag. */
CMISSError CMISSMesh_SurroundingElementsCalculateSetNum(const int regionUserNumber /*<The user number of the region containing the mesh to set the surrounding elements calculate flag for. */,
    const int meshUserNumber /*<The user number of the mesh to set the surrounding elements calculate flag for. */,
    const CMISSBool surroundingElementsCalculateFlag /*<Boolean flag to determine whether to calculate surrounding elements. */);
%clear (const CMISSBool *surroundingElementsCalculateFlag);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *surroundingElementsCalculateFlag)};
/*>Sets/changes the surrounding elements calculate flag. */
CMISSError CMISSMesh_SurroundingElementsCalculateSet(const CMISSMeshType mesh /*<The mesh to set the surrounding elements calculate flag for. */,
    const CMISSBool surroundingElementsCalculateFlag /*<Boolean flag to determine whether to calculate surrounding elements. */);
%clear (const CMISSBool *surroundingElementsCalculateFlag);

%apply (int *DummyOutputScalar){(int *numberOfElements)};
/*>Returns the number of elements in a mesh identified by a user number. */
CMISSError CMISSMesh_NumberOfElementsGetNum(const int regionUserNumber /*<The user number of the region containing the mesh to get the number of elements for. */,
    const int meshUserNumber /*<The user number of the mesh to get the number of elements for. */,
    int *numberOfElements /*<On return, the number of elements in the mesh. */);
%clear (int *numberOfElements);

%apply (int *DummyOutputScalar){(int *numberOfElements)};
/*>Returns the number of elements in a mesh identified by an object. */
CMISSError CMISSMesh_NumberOfElementsGet(const CMISSMeshType mesh /*<The mesh to get the number of elements for. */,
    int *numberOfElements /*<On return, the number of elements in the mesh. */);
%clear (int *numberOfElements);

/*>Sets/changes the number of elements in a mesh identified by a user number. */
CMISSError CMISSMesh_NumberOfElementsSetNum(const int regionUserNumber /*<The user number of the region containing the mesh to set the number of elements for. */,
    const int meshUserNumber /*<The user number of the mesh to set the number of elements for. */,
    const int numberOfElements /*<The number of elements in the mesh to set. */);

/*>Sets/changes the number of elements in a mesh identified by an object. */
CMISSError CMISSMesh_NumberOfElementsSet(const CMISSMeshType mesh /*<The mesh to set the number of elements for. */,
    const int numberOfElements /*<The number of elements in the mesh to set. */);

/*>Calculate mesh data points topology in a region identified by a user number based on projection */
CMISSError CMISSMesh_TopologyDataPointsCalculateProjectionRegionNum(const int regionUserNumber /*<The user number of the region. */,
    const int MeshUserNumber /*< */,
    const CMISSDataProjectionType DataProjection /*<The data projection */);

/*>Calculate mesh data points topology in an interface identified by a user number based on projection */
CMISSError CMISSMesh_TopologyDataPointsCalculateProjectionInterfaceNum(const int parentRegionUserNumber /*<The user number of the region. */,
    const int interfaceUserNumber /*<The user number of the region. */,
    const int MeshUserNumber /*< */,
    const CMISSDataProjectionType DataProjection /*<The data projection */);

/*>Calculate mesh data points topology identified by object based on projection */
CMISSError CMISSMesh_TopologyDataPointsCalculateProjection(const CMISSMeshType Mesh /*<The mesh to calculate data points topology for */,
    const CMISSDataProjectionType DataProjection /*<The data projection */);

/*>Finishes creating elements for a mesh component of a mesh identified by a user number. */
CMISSError CMISSMeshElements_CreateFinishNum(const int regionUserNumber /*<The user number of the region containing the mesh to finish creating the elements for. */,
    const int meshUserNumber /*<The user number of the mesh to finish creating the elements for. */,
    const int meshComponentNumber /*<The mesh component number of the mesh to finish creating the elements for. */);

/*>Finishes creating elements for a mesh component of a mesh identified by an object. */
CMISSError CMISSMeshElements_CreateFinish(const CMISSMeshElementsType meshElements /*<The mesh elements to finish creating. */);

/*>Starts creating elements for a mesh component of a mesh identified by a user number. */
CMISSError CMISSMeshElements_CreateStartNum(const int regionUserNumber /*<The user number of the region containing the mesh to start creating the elements for. */,
    const int meshUserNumber /*<The user number of the mesh to start creating the elements for. */,
    const int meshComponentNumber /*<The mesh component number of the mesh to start creating the elements for. */,
    const int basisUserNumber /*<The user number of the default basis to use for the elements. */);

/*>Starts creating elements for a mesh component of a mesh identified by an object. */
CMISSError CMISSMeshElements_CreateStart(CMISSMeshType mesh /*<The mesh to start the creation of elements for. */,
    const int meshComponentNumber /*<The mesh component number of the mesh to start creating the elements for. */,
    const CMISSBasisType basis /*<The default basis to use for the elements. */,
    CMISSMeshElementsType meshElements /*<On return, the created mesh elements. */);

/*>Returns the mesh elements for a mesh component on a mesh identified by an user number. */
CMISSError CMISSMesh_ElementsGetNum(const int regionUserNumber /*<The user number of the region containing the mesh to get the elements for. */,
    const int meshUserNumber /*<The user number of the mesh to get the elements for. */,
    const int meshComponentNumber /*<The mesh component number to get the elements for. */,
    CMISSMeshElementsType meshElements /*<The mesh elements. */);

/*> */
CMISSError CMISSMesh_ElementsGet(const CMISSMeshType mesh /*<The mesh to get the elements for. */,
    const int meshComponentNumber /*<The mesh component number to get the elements for. */,
    CMISSMeshElementsType meshElements /*<The mesh elements. */);

%apply (int *DummyOutputScalar){(int *basisUserNumber)};
/*>Returns the basis for an element in a mesh identified by an user number. \todo should the global element number be a user number? */
CMISSError CMISSMeshElements_BasisGetNum(const int regionUserNumber /*<The user number of the region containing the mesh to get the basis for. */,
    const int meshUserNumber /*<The user number of the mesh to get the basis for. */,
    const int meshComponentNumber /*<The mesh component number to get the basis for. */,
    const int globalElementNumber /*<The global element number to get the basis for. */,
    int *basisUserNumber /*<On return, the user number of the basis for the element. */);
%clear (int *basisUserNumber);

/*>Returns the basis for an element in a mesh identified by an object. \todo should the global element number be a user number? */
CMISSError CMISSMeshElements_BasisGet(const CMISSMeshElementsType meshElements /*<The mesh elements to get the basis for. */,
    const int globalElementNumber /*<The global element number to get the basis for. */,
    CMISSBasisType basis /*<On return, the basis for the element. */);

/*>Sets/changes the basis for an element in a mesh identified by an user number. \todo should the global element number be a user number? */
CMISSError CMISSMeshElements_BasisSetNum(const int regionUserNumber /*<The user number of the region containing the mesh to set the basis for. */,
    const int meshUserNumber /*<The user number of the mesh to set the basis for. */,
    const int meshComponentNumber /*<The mesh component number to set the basis for. */,
    const int globalElementNumber /*<The global element number to set the basis for. */,
    const int basisUserNumber /*<The user number of the basis for the element to set. */);

/*>Sets/changes the basis for an element in a mesh identified by an object. \todo should the global element number be a user number? */
CMISSError CMISSMeshElements_BasisSet(const CMISSMeshElementsType meshElements /*<The mesh elements to set the basis for. */,
    const int globalElementNumber /*<The global element number to set the basis for. */,
    const CMISSBasisType basis /*<The basis for the element to set. */);

%apply (int *DummyOutputScalar){(int *adjacentElement)};
/*>Returns the adjacent element number of a mesh identified by a user number */
CMISSError CMISSMeshElements_AdjacentElementGetNum(const int regionUserNumber /*<The user number of the region containing the mesh from which to get the adjacent element from. */,
    const int meshUserNumber /*<The user number of the mesh from which to get the adjacent element from. */,
    const int meshComponentNumber /*<The mesh component number from which to get adjacent element number from. */,
    const int globalElementNumber /*<The global element number to get the adjacent element number for. !\todo this should be a user number */,
    const int adjacentElementXi /*<The xi coordinate direction to get the adjacent element for. Note that -xiCoordinateDirection gives the adjacent element before the element in the xiCoordinateDirection'th direction and +xiCoordinateDirection gives the adjacent element after the element in the xiCoordinateDirection'th direction. The xiCoordinateDirection=0 index will give the information on the current element. */,
    int *adjacentElement /*<On return, the adjacent element number in the specified xi coordinate direction. Return 0 if the specified element has no adjacent elements in the specified xi coordinate direction. */);
%clear (int *adjacentElement);

%apply (int *DummyOutputScalar){(int *adjacentElement)};
/*>Returns the adjacent element number of a mesh identified by an object. */
CMISSError CMISSMeshElements_AdjacentElementGet(const CMISSMeshElementsType meshElements /*<The mesh elements from which to get the adjacent element for. */,
    const int globalElementNumber /*<The global element number to get the adjacent element for !\todo this should be a user number */,
    const int adjacentElementXi /*<The xi coordinate direction to get the adjacent element for  Note that -xiCoordinateDirection gives the adjacent element before the element in the xiCoordinateDirection'th direction and +xiCoordinateDirection gives the adjacent element after the element in the xiCoordinateDirection'th direction. The xiCoordinateDirection=0 index will give the information on the current element. */,
    int *adjacentElement /*<On return, the adjacent element number in the specified xi coordinate direction. Return 0 if the specified element has no adjacent elements in the specified xi coordinate direction. */);
%clear (int *adjacentElement);

%apply (const int DIM1, int *ARGOUT_ARRAY1){(const int elementUserNodesSize, int *elementUserNodes)};
/*>Returns the element nodes for an element in a mesh identified by an user number. \todo should the global element number be a user number? */
CMISSError CMISSMeshElements_NodesGetNum(const int regionUserNumber /*<The user number of the region containing the mesh to get the element nodes for. */,
    const int meshUserNumber /*<The user number of the mesh to get the element nodes for. */,
    const int meshComponentNumber /*<The mesh component number to get the element nodes for. */,
    const int globalElementNumber /*<The global element number to get the element nodes for. */,
    const int elementUserNodesSize /*<Length of elementUserNodes */,
    int *elementUserNodes /*<elementUserNodes(i). On return, the user node number number of the i'th element node. */);
%clear (const int elementUserNodesSize, int *elementUserNodes);

%apply (const int DIM1, int *ARGOUT_ARRAY1){(const int elementUserNodesSize, int *elementUserNodes)};
/*>Returns the element nodes for an element in a mesh identified by an object. \todo should the global element number be a user number? */
CMISSError CMISSMeshElements_NodesGet(const CMISSMeshElementsType meshElements /*<The mesh elements to get the element nodes for. */,
    const int globalElementNumber /*<The global element number to get the element nodes for. */,
    const int elementUserNodesSize /*<Length of elementUserNodes */,
    int *elementUserNodes /*<elementUserNodes(i). On return, the user node number number of the i'th element node. */);
%clear (const int elementUserNodesSize, int *elementUserNodes);

%apply (const int DIM1, int *IN_ARRAY1){(const int elementUserNodesSize, const int *elementUserNodes)};
/*>Sets/changes the element nodes for an element in a mesh identified by an user number. \todo should the global element number be a user number? */
CMISSError CMISSMeshElements_NodesSetNum(const int regionUserNumber /*<The user number of the region containing the mesh to set the element nodes for. */,
    const int meshUserNumber /*<The user number of the mesh to set the element nodes for. */,
    const int meshComponentNumber /*<The mesh component number to set the element nodes for. */,
    const int globalElementNumber /*<The global element number to set the element nodes for. */,
    const int elementUserNodesSize /*<Length of elementUserNodes */,
    const int *elementUserNodes /*<elementUserNodes(i). The user node number number of the i'th element node to set. */);
%clear (const int elementUserNodesSize, const int *elementUserNodes);

%apply (const int DIM1, int *IN_ARRAY1){(const int elementUserNodesSize, const int *elementUserNodes)};
/*>Sets/changes the element nodes for an element in a mesh identified by an object. \todo should the global element number be a user number? */
CMISSError CMISSMeshElements_NodesSet(const CMISSMeshElementsType meshElements /*<The mesh elements to set the element nodes for. */,
    const int globalElementNumber /*<The global element number to set the element nodes for. */,
    const int elementUserNodesSize /*<Length of elementUserNodes */,
    const int *elementUserNodes /*<elementUserNodes(i). The user node number number of the i'th element node to set. */);
%clear (const int elementUserNodesSize, const int *elementUserNodes);

/*>Sets/changes the element nodes for an element in a mesh identified by an user number. \todo should the global element number be a user number? */
CMISSError CMISSMeshElements_UserNodeVersionSetNum(const int regionUserNumber /*<The user number of the region containing the mesh to set the element nodes for. */,
    const int meshUserNumber /*<The user number of the mesh to set the element nodes for. */,
    const int globalElementNumber /*<The global element number to set the element nodes for. */,
    const int versionNumber /*<The version number of the specified element node to set. */,
    const int derivativeNumber /*<The derivative number of the specified element node to set. */,
    const int userNodeNumber /*<The user node number to set a version for. */,
    const int meshComponentNumber /*<The mesh component number to set the element nodes for. */);

/*>Sets/changes the element nodes for an element in a mesh identified by an object. \todo should the global element number be a user number? */
CMISSError CMISSMeshElements_UserNodeVersionSet(const CMISSMeshElementsType meshElements /*<The mesh elements to set the element nodes for. */,
    const int globalElementNumber /*<The global element number to set the element nodes for. */,
    const int versionNumber /*<The version number of the specified element node to set. */,
    const int derivativeNumber /*<The derivative number of the specified element node to set. */,
    const int userNodeNumber /*<The user node number to set a version for. */);

/*>Sets/changes the element nodes for an element in a mesh identified by an user number. \todo should the global element number be a user number? */
CMISSError CMISSMeshElements_LocalElementNodeVersionSetNum(const int regionUserNumber /*<The user number of the region containing the mesh to set the element nodes for. */,
    const int meshUserNumber /*<The user number of the mesh to set the element nodes for. */,
    const int globalElementNumber /*<The global element number to set the element nodes for. */,
    const int versionNumber /*<The version number of the specified element node to set. */,
    const int derivativeNumber /*<The derivative number of the specified element node to set. */,
    const int localElementNodeNumber /*<The local element node to set a version for. */,
    const int meshComponentNumber /*<The mesh component number to set the element nodes for. */);

/*>Sets/changes the element nodes for an element in a mesh identified by an object. \todo should the global element number be a user number? */
CMISSError CMISSMeshElements_LocalElementNodeVersionSet(const CMISSMeshElementsType meshElements /*<The mesh elements to set the element nodes for. */,
    const int globalElementNumber /*<The global element number to set the element nodes for. */,
    const int versionNumber /*<The version number of the specified element node to set. */,
    const int derivativeNumber /*<The derivative number of the specified element node to set. */,
    const int localElementNodeNumber /*<The local element node to set a version for. */);

%apply (int *DummyOutputScalar){(int *elementUserNumber)};
/*>Returns the user number for an element in a mesh identified by an user number. */
CMISSError CMISSMeshElements_UserNumberGetNum(const int regionUserNumber /*<The user number of the region containing the mesh to get the element user number for. */,
    const int meshUserNumber /*<The user number of the mesh to get the element user number for. */,
    const int meshComponentNumber /*<The mesh component number to get the element user number for. */,
    const int elementGlobalNumber /*<The global element number to get the element user number for. */,
    int *elementUserNumber /*<On return, the element user number. */);
%clear (int *elementUserNumber);

%apply (int *DummyOutputScalar){(int *elementUserNumber)};
/*>Returns the element user number for an element in a mesh identified by an object. */
CMISSError CMISSMeshElements_UserNumberGet(const CMISSMeshElementsType meshElements /*<The mesh elements to get the element nodes for. */,
    const int elementGlobalNumber /*<The global element number to get the element user number for. */,
    int *elementUserNumber /*<On return, the element user number. */);
%clear (int *elementUserNumber);

/*>Sets/changes the user number for an element in a mesh identified by an user number. */
CMISSError CMISSMeshElements_UserNumberSetNum(const int regionUserNumber /*<The user number of the region containing the mesh to set the element user number for. */,
    const int meshUserNumber /*<The user number of the mesh to set the element user number for. */,
    const int meshComponentNumber /*<The mesh component number to set the element user number for. */,
    const int elementGlobalNumber /*<The global element number to set the element user number for. */,
    const int elementUserNumber /*<The element user number to set. */);

/*>Sets/changes the element user number for an element in a mesh identified by an object. */
CMISSError CMISSMeshElements_UserNumberSet(const CMISSMeshElementsType meshElements /*<The mesh elements to set the element nodes for. */,
    const int elementGlobalNumber /*<The global element number to set the element user number for. */,
    const int elementUserNumber /*<The element user number to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int elementUserNumbersSize, const int *elementUserNumbers)};
/*>Sets/changes the user numbers for all elements in a mesh identified by an user number. */
CMISSError CMISSMeshElements_UserNumbersAllSetNum(const int regionUserNumber /*<The user number of the region containing the mesh to set the element user numbers for. */,
    const int meshUserNumber /*<The user number of the mesh to set the element user numbers for. */,
    const int meshComponentNumber /*<The mesh component number to set the element user numbers for. */,
    const int elementUserNumbersSize /*<Length of elementUserNumbers */,
    const int *elementUserNumbers /*<The element user numbers to set. */);
%clear (const int elementUserNumbersSize, const int *elementUserNumbers);

%apply (const int DIM1, int *IN_ARRAY1){(const int elementUserNumbersSize, const int *elementUserNumbers)};
/*>Sets/changes the element user numbers for all elements in a mesh identified by an object. */
CMISSError CMISSMeshElements_UserNumbersAllSet(const CMISSMeshElementsType meshElements /*<The mesh elements to set the element user numbers for */,
    const int elementUserNumbersSize /*<Length of elementUserNumbers */,
    const int *elementUserNumbers /*<The element user numbers to set. */);
%clear (const int elementUserNumbersSize, const int *elementUserNumbers);

%apply (CMISSBool *DummyOutputScalar){(CMISSBool *nodeExists)};
/*>Checks if the given node exists on the given mesh component. */
CMISSError CMISSMesh_NodeExistsNum(const int regionUserNumber /*<The user number of the region containing the mesh to check the node for. */,
    const int meshUserNumber /*<The user number of the mesh tocheck the node for. */,
    const int meshComponentNumber /*<The mesh component number to check the node for. */,
    const int nodeUserNumber /*<The user number of the node to check. */,
    CMISSBool *nodeExists /*<True if the node exists, false otherwise. */);
%clear (CMISSBool *nodeExists);

%apply (CMISSBool *DummyOutputScalar){(CMISSBool *nodeExists)};
/*>Checks if the given node exists on the given mesh component. */
CMISSError CMISSMesh_NodeExists(const CMISSMeshType mesh /*<The mesh to check the node for. */,
    const int meshComponentNumber /*<The mesh component number to check the node for. */,
    const int nodeUserNumber /*<The user number of the node to check. */,
    CMISSBool *nodeExists /*<True if the node exists, false otherwise. */);
%clear (CMISSBool *nodeExists);

%apply (CMISSBool *DummyOutputScalar){(CMISSBool *elementExists)};
/*>Checks if the given element exists on the given mesh component. */
CMISSError CMISSMesh_ElementExistsNum(const int regionUserNumber /*<The user number of the region containing the mesh to check the element for. */,
    const int meshUserNumber /*<The user number of the mesh to check the element for. */,
    const int meshComponentNumber /*<The mesh component number to check the element for. */,
    const int elementUserNumber /*<The user number of the element to check. */,
    CMISSBool *elementExists /*<True if the element exists, false otherwise. */);
%clear (CMISSBool *elementExists);

%apply (CMISSBool *DummyOutputScalar){(CMISSBool *elementExists)};
/*>Checks if the given element exists on the given mesh component. */
CMISSError CMISSMesh_ElementExists(const CMISSMeshType mesh /*<The mesh to check the node for. */,
    const int meshComponentNumber /*<The mesh component number to check the element for. */,
    const int elementUserNumber /*<The user number of the element to check. */,
    CMISSBool *elementExists /*<True if the element exists, false otherwise. */);
%clear (CMISSBool *elementExists);

/*>Returns the mesh nodes for a mesh component on a mesh identified by an user number. */
CMISSError CMISSMesh_NodesGetNum(const int regionUserNumber /*<The user number of the region containing the mesh to get the nodes for. */,
    const int meshUserNumber /*<The user number of the mesh to get the nodes for. */,
    const int meshComponentNumber /*<The mesh component number to get the nodes for. */,
    CMISSMeshNodesType meshNodes /*<On return, the mesh nodes. */);

/*>Returns the mesh nodes for a mesh component on a mesh identified by an object. */
CMISSError CMISSMesh_NodesGet(const CMISSMeshType mesh /*<The mesh to get the nodes for. */,
    const int meshComponentNumber /*<The mesh component number to get the nodes for. */,
    CMISSMeshNodesType meshNodes /*<On return, the mesh nodes. */);

%apply (int *DummyOutputScalar){(int *numberOfNodes)};
/*>Returns the number of nodes at a node in a mesh identified by an user number. */
CMISSError CMISSMeshNodes_NumberOfNodesGetNum(const int regionUserNumber /*<The user number of the region containing the mesh to get the number of dervatives for. */,
    const int meshUserNumber /*<The user number of the mesh to get the number of nodes for. */,
    const int meshComponentNumber /*<The mesh component number to get the number of nodes for. */,
    int *numberOfNodes /*<On return, the number of nodes in the mesh. */);
%clear (int *numberOfNodes);

%apply (int *DummyOutputScalar){(int *numberOfNodes)};
/*>Returns the number of derivatives for a node in a mesh identified by an object. */
CMISSError CMISSMeshNodes_NumberOfNodesGet(const CMISSMeshNodesType meshNodes /*<The mesh nodes to get the number of derivatives at a node for. */,
    int *numberOfNodes /*<On return, the number of nodes in a mesh. */);
%clear (int *numberOfNodes);

%apply (int *DummyOutputScalar){(int *numberOfDerivatives)};
/*>Returns the number of derivatives at a node in a mesh identified by an user number. */
CMISSError CMISSMeshNodes_NumberOfDerivativesGetNum(const int regionUserNumber /*<The user number of the region containing the mesh to get the number of dervatives for. */,
    const int meshUserNumber /*<The user number of the mesh to get the number of derivatives for. */,
    const int meshComponentNumber /*<The mesh component number to get the number of derivatives for. */,
    const int userNodeNumber /*<The user node number to get the number of derivatives for. */,
    int *numberOfDerivatives /*<On return, the number of derivatives in the mesh for the user node number. */);
%clear (int *numberOfDerivatives);

%apply (int *DummyOutputScalar){(int *numberOfDerivatives)};
/*>Returns the number of derivatives for a node in a mesh identified by an object. */
CMISSError CMISSMeshNodes_NumberOfDerivativesGet(const CMISSMeshNodesType meshNodes /*<The mesh nodes to get the number of derivatives at a node for. */,
    const int userNodeNumber /*<The user node number to get the number of derivatives at a node for. */,
    int *numberOfDerivatives /*<On return, the number of derivatives at a node in a mesh. */);
%clear (int *numberOfDerivatives);

%apply (const int DIM1, int *ARGOUT_ARRAY1){(const int derivativesSize, int *derivatives)};
/*>Returns the derivatives at a node in a mesh identified by an user number. */
CMISSError CMISSMeshNodes_DerivativesGetNum(const int regionUserNumber /*<The user number of the region containing the mesh to get the derivatives for. */,
    const int meshUserNumber /*<The user number of the mesh to get the derivatives for. */,
    const int meshComponentNumber /*<The mesh component number to get the derivatives for. */,
    const int userNodeNumber /*<The user node number to get the derivatives for. */,
    const int derivativesSize /*<Length of derivatives */,
    int *derivatives /*<On return, the derivatives in the mesh for the user node number. */);
%clear (const int derivativesSize, int *derivatives);

%apply (const int DIM1, int *ARGOUT_ARRAY1){(const int derivativesSize, int *derivatives)};
/*>Returns the derivatives for a node in a mesh identified by an object. */
CMISSError CMISSMeshNodes_DerivativesGet(const CMISSMeshNodesType meshNodes /*<The mesh nodes to get the derivatives at a node for. */,
    const int userNodeNumber /*<The user node number to get the derivatives at a node for. */,
    const int derivativesSize /*<Length of derivatives */,
    int *derivatives /*<On return, the derivatives at a node in a mesh. */);
%clear (const int derivativesSize, int *derivatives);

%apply (int *DummyOutputScalar){(int *numberOfVersions)};
/*>Returns the number of version at a derivative for a node in a mesh identified by an user number. */
CMISSError CMISSMeshNodes_NumberOfVersionsGetNum(const int regionUserNumber /*<The user number of the region containing the mesh to get the number of versions. */,
    const int meshUserNumber /*<The user number of the mesh to get the number of versions for. */,
    const int meshComponentNumber /*<The mesh component number to get the number of versions for. */,
    const int derivativeNumber /*<The derivative number of the node to get the number of versions for. */,
    const int userNodeNumber /*<The user node number to get the number of versions for. */,
    int *numberOfVersions /*<On return, the number of versions in the mesh for the derivative index of the user node number. */);
%clear (int *numberOfVersions);

%apply (int *DummyOutputScalar){(int *numberOfVersions)};
/*>Returns the number of versions for an node in a mesh identified by an object. */
CMISSError CMISSMeshNodes_NumberOfVersionsGet(const CMISSMeshNodesType meshNodes /*<The mesh nodes to get the number of versions at a node for. */,
    const int derivativeNumber /*<The derivative number of a node to get the number of versions for. */,
    const int userNodeNumber /*<The user node number to get the number of versions at a node for. */,
    int *numberOfVersions /*<On return, the number of derivatives at the specified node and derivative in a mesh. */);
%clear (int *numberOfVersions);

%apply (int *DummyOutputScalar){(int *storageType)};
/*>Get the storage type for a distributed matrix */
CMISSError CMISSDistributedMatrix_StorageTypeGet(const CMISSDistributedMatrixType matrix /*<The matrix to get the storage type for */,
    int *storageType /*<On return, the matrix storage type. \see OPENCMISS_MatrixStorageTypes */);
%clear (int *storageType);

%apply (int *DummyOutputScalar){(int *dataType)};
/*>Get the data type of a distributed matrix */
CMISSError CMISSDistributedMatrix_DataTypeGet(const CMISSDistributedMatrixType matrix /*<The matrix to get the data type for */,
    int *dataType /*<On return, the matrix data type. \see OPENCMISS_MatrixVectorDataTypes */);
%clear (int *dataType);

%apply (int *DummyOutputScalar){(int *m)};
%apply (int *DummyOutputScalar){(int *n)};
/*>Get the dimensions of a distributed matrix on this computational node */
CMISSError CMISSDistributedMatrix_DimensionsGet(const CMISSDistributedMatrixType matrix /*<The matrix to get the data type for */,
    int *m /*<On return, the number of rows for this computational node */,
    int *n /*<On return, the number of columns */);
%clear (int *m);
%clear (int *n);

%apply (int *DIM1, int **ARGOUTVIEW_ARRAY1){(int *rowIndicesSize, int **rowIndices)};
%apply (int *DIM1, int **ARGOUTVIEW_ARRAY1){(int *columnIndicesSize, int **columnIndices)};
/*>Get the row indices and column indices for a sparse matrix */
CMISSError CMISSDistributedMatrix_StorageLocationsGet(const CMISSDistributedMatrixType matrix /*<The matrix to get the storage locations for */,
    int *rowIndicesSize /*<Length of rowIndices */,
    int **rowIndices /*<On return, the matrix storage row indices */,
    int *columnIndicesSize /*<Length of columnIndices */,
    int **columnIndices /*<On return, the matrix storage column indices */);
%clear (int *rowIndicesSize, int **rowIndices);
%clear (int *columnIndicesSize, int **columnIndices);

%apply (int *DIM1, int **ARGOUTVIEW_ARRAY1){(int *dataSize, int **data)};
/*>Get the data array for this matrix on this computational node */
CMISSError CMISSDistributedMatrix_DataGetIntg(const CMISSDistributedMatrixType matrix /*<The matrix to get the data for */,
    int *dataSize /*<Length of data */,
    int **data /*<On return, the matrix data */);
%clear (int *dataSize, int **data);

%apply (int *DIM1, int **ARGINOUTVIEW_ARRAY1){(int *dataSize, int **data)};
/*>Restore the data array for this matrix once it has finished being used */
CMISSError CMISSDistributedMatrix_DataRestoreIntg(const CMISSDistributedMatrixType matrix /*<The matrix to restore the data for */,
    int *dataSize /*<Length of data */,
    int **data /*<On entry, a pointer to the matrix data. On return, a nullified pointer. */);
%clear (int *dataSize, int **data);

%apply (int *DIM1, double **ARGOUTVIEW_ARRAY1){(int *dataSize, double **data)};
/*>Get the data array for this matrix on this computational node */
CMISSError CMISSDistributedMatrix_DataGetDP(const CMISSDistributedMatrixType matrix /*<The matrix to get the data for */,
    int *dataSize /*<Length of data */,
    double **data /*<On return, the matrix data */);
%clear (int *dataSize, double **data);

%apply (int *DIM1, double **ARGINOUTVIEW_ARRAY1){(int *dataSize, double **data)};
/*>Restore the data array for this matrix once it has finished being used */
CMISSError CMISSDistributedMatrix_DataRestoreDP(const CMISSDistributedMatrixType matrix /*<The matrix to restore the data for */,
    int *dataSize /*<Length of data */,
    double **data /*<On entry, a pointer to the matrix data. On return, a nullified pointer. */);
%clear (int *dataSize, double **data);

%apply (int *DIM1, float **ARGOUTVIEW_ARRAY1){(int *dataSize, float **data)};
/*>Get the data array for this matrix on this computational node */
CMISSError CMISSDistributedMatrix_DataGetSP(const CMISSDistributedMatrixType matrix /*<The matrix to get the data for */,
    int *dataSize /*<Length of data */,
    float **data /*<On return, the matrix data */);
%clear (int *dataSize, float **data);

%apply (int *DIM1, float **ARGINOUTVIEW_ARRAY1){(int *dataSize, float **data)};
/*>Restore the data array for this matrix once it has finished being used */
CMISSError CMISSDistributedMatrix_DataRestoreSP(const CMISSDistributedMatrixType matrix /*<The matrix to restore the data for */,
    int *dataSize /*<Length of data */,
    float **data /*<On entry, a pointer to the matrix data. On return, a nullified pointer. */);
%clear (int *dataSize, float **data);

%apply (int *DIM1, CMISSBool **ARGOUTVIEW_ARRAY1){(int *dataSize, CMISSBool **data)};
/*>Get the data array for this matrix on this computational node */
CMISSError CMISSDistributedMatrix_DataGetL(const CMISSDistributedMatrixType matrix /*<The matrix to get the data for */,
    int *dataSize /*<Length of data */,
    CMISSBool **data /*<On return, the matrix data */);
%clear (int *dataSize, CMISSBool **data);

%apply (int *DIM1, CMISSBool **ARGINOUTVIEW_ARRAY1){(int *dataSize, CMISSBool **data)};
/*>Restore the data array for this matrix once it has finished being used */
CMISSError CMISSDistributedMatrix_DataRestoreL(const CMISSDistributedMatrixType matrix /*<The matrix to restore the data for */,
    int *dataSize /*<Length of data */,
    CMISSBool **data /*<On entry, a pointer to the matrix data. On return, a nullified pointer. */);
%clear (int *dataSize, CMISSBool **data);

%apply (int *DummyOutputScalar){(int *dataType)};
/*>Get the data type of a distributed vector */
CMISSError CMISSDistributedVector_DataTypeGet(const CMISSDistributedVectorType vector /*<The vector to get the data type for */,
    int *dataType /*<On return, the vector data type. \see OPENCMISS_MatrixVectorDataTypes */);
%clear (int *dataType);

%apply (int *DIM1, int **ARGOUTVIEW_ARRAY1){(int *dataSize, int **data)};
/*>Get the data array for this vector on this computational node */
CMISSError CMISSDistributedVector_DataGetIntg(const CMISSDistributedVectorType vector /*<The vector to get the data for */,
    int *dataSize /*<Length of data */,
    int **data /*<On return, the vector data */);
%clear (int *dataSize, int **data);

%apply (int *DIM1, int **ARGINOUTVIEW_ARRAY1){(int *dataSize, int **data)};
/*>Restore the data array for this vector once it has finished being used */
CMISSError CMISSDistributedVector_DataRestoreIntg(const CMISSDistributedVectorType vector /*<The vector to restore the data for */,
    int *dataSize /*<Length of data */,
    int **data /*<On entry, a pointer to the vector data. On return, a nullified pointer. */);
%clear (int *dataSize, int **data);

%apply (int *DIM1, double **ARGOUTVIEW_ARRAY1){(int *dataSize, double **data)};
/*>Get the data array for this vector on this computational node */
CMISSError CMISSDistributedVector_DataGetDP(const CMISSDistributedVectorType vector /*<The vector to get the data for */,
    int *dataSize /*<Length of data */,
    double **data /*<On return, the vector data */);
%clear (int *dataSize, double **data);

%apply (int *DIM1, double **ARGINOUTVIEW_ARRAY1){(int *dataSize, double **data)};
/*>Restore the data array for this vector once it has finished being used */
CMISSError CMISSDistributedVector_DataRestoreDP(const CMISSDistributedVectorType vector /*<The vector to restore the data for */,
    int *dataSize /*<Length of data */,
    double **data /*<On entry, a pointer to the vector data. On return, a nullified pointer. */);
%clear (int *dataSize, double **data);

%apply (int *DIM1, float **ARGOUTVIEW_ARRAY1){(int *dataSize, float **data)};
/*>Get the data array for this vector on this computational node */
CMISSError CMISSDistributedVector_DataGetSP(const CMISSDistributedVectorType vector /*<The vector to get the data for */,
    int *dataSize /*<Length of data */,
    float **data /*<On return, the vector data */);
%clear (int *dataSize, float **data);

%apply (int *DIM1, float **ARGINOUTVIEW_ARRAY1){(int *dataSize, float **data)};
/*>Restore the data array for this vector once it has finished being used */
CMISSError CMISSDistributedVector_DataRestoreSP(const CMISSDistributedVectorType vector /*<The vector to restore the data for */,
    int *dataSize /*<Length of data */,
    float **data /*<On entry, a pointer to the vector data. On return, a nullified pointer. */);
%clear (int *dataSize, float **data);

%apply (int *DIM1, CMISSBool **ARGOUTVIEW_ARRAY1){(int *dataSize, CMISSBool **data)};
/*>Get the data array for this vector on this computational node */
CMISSError CMISSDistributedVector_DataGetL(const CMISSDistributedVectorType vector /*<The vector to get the data for */,
    int *dataSize /*<Length of data */,
    CMISSBool **data /*<On return, the vector data */);
%clear (int *dataSize, CMISSBool **data);

%apply (int *DIM1, CMISSBool **ARGINOUTVIEW_ARRAY1){(int *dataSize, CMISSBool **data)};
/*>Restore the data array for this vector once it has finished being used */
CMISSError CMISSDistributedVector_DataRestoreL(const CMISSDistributedVectorType vector /*<The vector to restore the data for */,
    int *dataSize /*<Length of data */,
    CMISSBool **data /*<On entry, a pointer to the vector data. On return, a nullified pointer. */);
%clear (int *dataSize, CMISSBool **data);

/*>Finishes the process of creating nodes in a region for nodes identified by user number. */
CMISSError CMISSNodes_CreateFinishNum(const int regionUserNumber /*<The user number of the region containing the nodes to finish the creation of. */);

/*>Finishes the creation of a nodes in a region for nodes identified by an object. */
CMISSError CMISSNodes_CreateFinish(const CMISSNodesType nodes /*<The nodes to finish creating. */);

/*>Starts the process of creating nodes in a region for nodes identified by user number. */
CMISSError CMISSNodes_CreateStartNum(const int regionUserNumber /*<The user number of the region containing the nodes to start the creation of. */,
    const int numberOfNodes /*<The number of nodes to create. */);

/*>Starts the creation of a nodes in a region for nodes identified by an object. */
CMISSError CMISSNodes_CreateStart(const CMISSRegionType region /*<The region to start the creation of nodes on. */,
    const int numberOfNodes /*<The number of nodes to create. */,
    const CMISSNodesType nodes /*<On return, the created nodes. */);

/*>Starts the creation of a nodes in a region for nodes identified by an object. */
CMISSError CMISSNodes_CreateStartInterface(const CMISSInterfaceType interface /*<The interface to start the creation of nodes on. */,
    const int numberOfNodes /*<The number of nodes to create. */,
    const CMISSNodesType nodes /*<On return, the created nodes. */);

/*>Destroys the nodes in a region for nodes identified by user number. */
CMISSError CMISSNodes_DestroyNum(const int regionUserNumber /*<The user number of the region containing the nodes to destroy. */);

/*>Destroys the nodes in a region for nodes identified by an object. */
CMISSError CMISSNodes_Destroy(const CMISSNodesType nodes /*<The nodes to destroy. */);

%apply (int *DummyOutputScalar){(int *numberOfNodes)};
/*>Returns the number of nodes */
CMISSError CMISSNodes_NumberOfNodesGetNum(const int regionUserNumber /*<The user number of the region containing the nodes to get node count for. */,
    int *numberOfNodes /*<On return, the number of nodes */);
%clear (int *numberOfNodes);

%apply (int *DummyOutputScalar){(int *numberOfNodes)};
/*>Returns the number of nodes */
CMISSError CMISSNodes_NumberOfNodesGet(const CMISSNodesType nodes /*<The nodes get node count for. */,
    int *numberOfNodes /*<The number of nodes */);
%clear (int *numberOfNodes);

%apply (const int Size, char *DummyOutputString){(const int labelSize, char *label)};
/*>Returns the character label for a node in a set of nodes identified by user number. \todo should this be user number?? */
CMISSError CMISSNodes_LabelGetNum(const int regionUserNumber /*<The user number of the region containing the nodes to get the label for. */,
    const int nodeGlobalNumber /*<The global number of the nodes to get the label for. */,
    const int labelSize /*<Length of label string */,
    char *label /*<On return, the label for the node. */);
%clear (const int labelSize, char *label);

%apply (const int Size, char *DummyOutputString){(const int labelSize, char *label)};
/*>Returns the character label for a node in a set of nodes identified by an object. \todo should this be user number?? */
CMISSError CMISSNodes_LabelGet(const CMISSNodesType nodes /*<The nodes to get the label for. */,
    const int nodeGlobalNumber /*<The global number of the nodes to get the label for. */,
    const int labelSize /*<Length of label string */,
    char *label /*<On return, the label for the node. */);
%clear (const int labelSize, char *label);

%apply (const int Size, const char *DummyInputString){(const int labelSize, const char *label)};
/*>Sets/changes the character label for a node in a set of nodes identified by user number. \todo should this be user number?? */
CMISSError CMISSNodes_LabelSetNum(const int regionUserNumber /*<The user number of the region containing the nodes to set the label for. */,
    const int nodeGlobalNumber /*<The global number of the nodes to set the label for. */,
    const int labelSize /*<Length of label string */,
    const char *label /*<The label for the node to set. */);
%clear (const int labelSize, const char *label);

%apply (const int Size, const char *DummyInputString){(const int labelSize, const char *label)};
/*>Sets/changes the character label for a node in a set of nodes identified by an object. \todo should this be user number?? */
CMISSError CMISSNodes_LabelSet(const CMISSNodesType nodes /*<The nodes to set the label for. */,
    const int nodeGlobalNumber /*<The global number of the nodes to set the label for. */,
    const int labelSize /*<Length of label string */,
    const char *label /*<The label for the node to set. */);
%clear (const int labelSize, const char *label);

%apply (int *DummyOutputScalar){(int *nodeUserNumber)};
/*>Returns the user number for a node in a set of nodes identified by user number. */
CMISSError CMISSNodes_UserNumberGetNum(const int regionUserNumber /*<The user number of the region containing the nodes to get the node user number for. */,
    const int nodeGlobalNumber /*<The global number of the nodes to get the node user number for. */,
    int *nodeUserNumber /*<On return, the user number for the node. */);
%clear (int *nodeUserNumber);

%apply (int *DummyOutputScalar){(int *nodeUserNumber)};
/*>Returns the user number for a node in a set of nodes identified by an object. \todo should this be user number?? */
CMISSError CMISSNodes_UserNumberGet(const CMISSNodesType nodes /*<The nodes to get the node user number for. */,
    const int nodeGlobalNumber /*<The global number of the nodes to get the node user number for. */,
    int *nodeUserNumber /*<On return, the user number for the node. */);
%clear (int *nodeUserNumber);

/*>Sets/changes the user number for a node in a set of nodes identified by user number. */
CMISSError CMISSNodes_UserNumberSetNum(const int regionUserNumber /*<The user number of the region containing the nodes to set the node user number for. */,
    const int nodeGlobalNumber /*<The global number of the nodes to set the node user number for. */,
    const int nodeUserNumber /*<The user number for the node to set. */);

/*>Sets/changes the user number for a node in a set of nodes identified by an object. \todo should this be user number?? */
CMISSError CMISSNodes_UserNumberSet(const CMISSNodesType nodes /*<The nodes to set the node user number for. */,
    const int nodeGlobalNumber /*<The global number of the nodes to set the node user number for. */,
    const int nodeUserNumber /*<The user number for the node to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int nodeUserNumbersSize, const int *nodeUserNumbers)};
/*>Sets/changes the user numbers for a set of nodes identified by user number. */
CMISSError CMISSNodes_UserNumbersAllSetNum(const int regionUserNumber /*<The user number of the region containing the nodes to set the node user numbers for. */,
    const int nodeUserNumbersSize /*<Length of nodeUserNumbers */,
    const int *nodeUserNumbers /*<The user numbers for the nodes to set. */);
%clear (const int nodeUserNumbersSize, const int *nodeUserNumbers);

%apply (const int DIM1, int *IN_ARRAY1){(const int nodeUserNumbersSize, const int *nodeUserNumbers)};
/*>Sets/changes the user numbers for a set of nodes identified by an object. */
CMISSError CMISSNodes_UserNumbersAllSet(const CMISSNodesType nodes /*<The nodes to set the node user number for. */,
    const int nodeUserNumbersSize /*<Length of nodeUserNumbers */,
    const int *nodeUserNumbers /*<The user numbers for the nodes to set. */);
%clear (const int nodeUserNumbersSize, const int *nodeUserNumbers);

/*>Finishes the process of creating CellML equations for a problem identified by user number. */
CMISSError CMISSProblem_CellMLEquationsCreateFinishNum(const int problemUserNumber /*<The user number of the problem to finish the creation of CellML equations for. */);

/*>Finishes the creation of CellML equations for problem identified by an object. */
CMISSError CMISSProblem_CellMLEquationsCreateFinish(const CMISSProblemType problem /*<The problem to finish creating the CellML equations for. */);

/*>Starts the process of creating CellML equations for a problem identified by user number. */
CMISSError CMISSProblem_CellMLEquationsCreateStartNum(const int problemUserNumber /*<The user number of the problem to start the creation of CellML equations for. */);

/*>Starts the creation of CellML equations for problem identified by an object. */
CMISSError CMISSProblem_CellMLEquationsCreateStart(const CMISSProblemType problem /*<The problem to start creating the CellML equations for. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Returns the CellML equations from a problem identified by an user number. */
CMISSError CMISSProblem_CellMLEquationsGetNum(const int problemUserNumber /*<The user number of the problem to get the CellML equations for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the CellML equations for. */,
    const int solverIndex /*<The solver index to get the CellML equations for. */,
    CMISSCellMLEquationsType CellMLEquations /*<On return, the specified CellML equations. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Returns the CellML equations from a problem identified by an object. */
CMISSError CMISSProblem_CellMLEquationsGet(const CMISSProblemType problem /*<The problem to get the CellML equations for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the CellML equations for. */,
    const int solverIndex /*<The solver index to get the CellML equations for. */,
    CMISSCellMLEquationsType CellMLEquations /*<On return, the specified CellML equations. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Finishes the process of a problem identified by user number. */
CMISSError CMISSProblem_CreateFinishNum(const int problemUserNumber /*<The user number of the problem to finish the creation of. */);

/*>Finishes the creation of a problem identified by an object. */
CMISSError CMISSProblem_CreateFinish(const CMISSProblemType problem /*<The problem to finish creating. */);

/*>Starts the process of a problem identified by user number. */
CMISSError CMISSProblem_CreateStartNum(const int problemUserNumber /*<The user number of the problem to start the creation of. */);

/*>Starts the creation of a problem identified by an object. */
CMISSError CMISSProblem_CreateStart(const int problemUserNumber /*<The user number of the problem to start the creation of. */,
    CMISSProblemType problem /*<On return, the created problem. */);

/*>Finishes the process of creating a control loop for a problem identified by user number. */
CMISSError CMISSProblem_ControlLoopCreateFinishNum(const int problemUserNumber /*<The user number of the problem to finish creating the control loop for. */);

/*>Finishes the creation of a control loop on a problem identified by an object. */
CMISSError CMISSProblem_ControlLoopCreateFinish(const CMISSProblemType problem /*<The problem to finish creating the control loop for. */);

/*>Starts the process of creating a control loop for a problem identified by user number. */
CMISSError CMISSProblem_ControlLoopCreateStartNum(const int problemUserNumber /*<The user number of the problem to start creating the control loop for. */);

/*>Starts the creation of a control loop on a problem identified by an object. */
CMISSError CMISSProblem_ControlLoopCreateStart(const CMISSProblemType problem /*<The problem to start creating the control loop for. */);

/*>Destroys the control loops for a problem identified by user number. */
CMISSError CMISSProblem_ControlLoopDestroyNum(const int problemUserNumber /*<The user number of the problem to destroy the control loops for. */);

/*>Destroys the control loops on a problem identified by an object. */
CMISSError CMISSProblem_ControlLoopDestroy(const CMISSProblemType problem /*<The problem to destroy the control loops for. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Returns a control loop from a problem identified by an user number. */
CMISSError CMISSProblem_ControlLoopGetNum(const int problemUserNumber /*<The user number of the problem to get the control loop for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the control loop for. */,
    CMISSControlLoopType controlLoop /*<On return, the specified problem control loop. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Returns a control loop from a problem identified by an object. */
CMISSError CMISSProblem_ControlLoopGet(const CMISSProblemType problem /*<The problem to get the control loop for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the control loop for. */,
    CMISSControlLoopType controlLoop /*<On return, the specified problem control loop. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Destroys a problem identified by an user number. */
CMISSError CMISSProblem_DestroyNum(const int problemUserNumber /*<The user number of the problem to destroy. */);

/*>Destroys a problem identified by an object. */
CMISSError CMISSProblem_Destroy(const CMISSProblemType problem /*<The problem to destroy. */);

/*>Solves a problem identified by an user number. */
CMISSError CMISSProblem_SolveNum(const int problemUserNumber /*<The user number of the problem to solve. */);

/*>Solves a problem identified by an object. */
CMISSError CMISSProblem_Solve(const CMISSProblemType problem /*<The problem to solve. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Returns a solver from a problem identified by an user number. */
CMISSError CMISSProblem_SolverGetNum(const int problemUserNumber /*<The user number of the problem to get the solver for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the solver for. */,
    const int solverIndex /*<The solver index to get the solver for. */,
    CMISSSolverType solver /*<On return, the specified solver. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Returns a solver from a problem identified by an object. */
CMISSError CMISSProblem_SolverGet(const CMISSProblemType problem /*<The problem to get the solver for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the solver for. */,
    const int solverIndex /*<The solver index to get the solver for. */,
    CMISSSolverType solver /*<On return, the specified solver. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Set boundary conditions for solver equations according to the analytic equations for solver equations identified by user numbers. */
CMISSError CMISSSolverEquations_BoundaryConditionsAnalyticNum(const int problemUserNumber /*<The user number of the problem containing the solver equations to calculate the boundary conditions for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to calculate the solver equations boundary conditions for. */,
    const int solverIndex /*<The solver index to calculate the solver equations boundary conditions for. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Set boundary conditions for solver equations according to the analytic equations. */
CMISSError CMISSSolverEquations_BoundaryConditionsAnalytic(const CMISSSolverEquationsType solverEquations /*<The solver equations to get the boundary conditions for. */);

/*>Finishes the process of creating solver equations for a problem identified by user number. */
CMISSError CMISSProblem_SolverEquationsCreateFinishNum(const int problemUserNumber /*<The user number of the problem to finish the creation of solver equations for. */);

/*>Finishes the creation of solver equations for problem identified by an object. */
CMISSError CMISSProblem_SolverEquationsCreateFinish(const CMISSProblemType problem /*<The problem to finish creating the solver equations for. */);

/*>Starts the process of creating solver equations for a problem identified by user number. */
CMISSError CMISSProblem_SolverEquationsCreateStartNum(const int problemUserNumber /*<The user number of the problem to start the creation of solver equations for. */);

/*>Starts the creation of solver equations for problem identified by an object. */
CMISSError CMISSProblem_SolverEquationsCreateStart(const CMISSProblemType problem /*<The problem to start creating the solver equations for. */);

/*>Destroys the solver equations for a problem identified by an user number. */
CMISSError CMISSProblem_SolverEquationsDestroyNum(const int problemUserNumber /*<The user number of the problem to destroy solver equations for. */);

/*>Destroys the solver equations for problem identified by an object. */
CMISSError CMISSProblem_SolverEquationsDestroy(const CMISSProblemType problem /*<The problem to destroy the solver equations for. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Returns the solver equations from a problem identified by an user number. */
CMISSError CMISSProblem_SolverEquationsGetNum(const int problemUserNumber /*<The user number of the problem to get the solver equations for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the solver equations for. */,
    const int solverIndex /*<The solver index to get the solver equations for. */,
    CMISSSolverEquationsType solverEquations /*<On return, the specified solver equations. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Returns the solver equations from a problem identified by an object. */
CMISSError CMISSProblem_SolverEquationsGet(const CMISSProblemType problem /*<The problem to get the solver equations for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the solver equations for. */,
    const int solverIndex /*<The solver index to get the solver equations for. */,
    CMISSSolverEquationsType solverEquations /*<On return, the specified solver equations. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Finishes the process of creating solvers for a problem identified by user number. */
CMISSError CMISSProblem_SolversCreateFinishNum(const int problemUserNumber /*<The user number of the problem to finish the creation of solvers for. */);

/*>Finishes the creation of solvers for problem identified by an object. */
CMISSError CMISSProblem_SolversCreateFinish(const CMISSProblemType problem /*<The problem to finish creating the solvers for. */);

/*>Starts the process of creating solvers for a problem identified by user number. */
CMISSError CMISSProblem_SolversCreateStartNum(const int problemUserNumber /*<The user number of the problem to start the creation of solvers for. */);

/*>Starts the creation of solvers for problem identified by an object. */
CMISSError CMISSProblem_SolversCreateStart(const CMISSProblemType problem /*<The problem to start creating the solvers for. */);

/*>Destroys the solvers for a problem identified by an user number. */
CMISSError CMISSProblem_SolversDestroyNum(const int problemUserNumber /*<The user number of the problem to destroy the solvers for. */);

/*>Destroys the solvers for problem identified by an object. */
CMISSError CMISSProblem_SolversDestroy(const CMISSProblemType problem /*<The problem to destroy the solvers for. */);

%apply (int *DummyOutputScalar){(int *problemClass)};
%apply (int *DummyOutputScalar){(int *problemType)};
%apply (int *DummyOutputScalar){(int *problemSubtype)};
/*>Returns the specification i.e., problem class, type and subtype for a problem identified by an user number. */
CMISSError CMISSProblem_SpecificationGetNum(const int problemUserNumber /*<The user number of the problem to get the specification for. */,
    int *problemClass /*<On return, the problem class. \see OPENCMISS_ProblemClasses */,
    int *problemType /*<On return, the problem type. \see OPENCMISS_ProblemTypes */,
    int *problemSubtype /*<On return, the problem subtype. \see OPENCMISS_ProblemSubTypes */);
%clear (int *problemClass);
%clear (int *problemType);
%clear (int *problemSubtype);

%apply (int *DummyOutputScalar){(int *problemClass)};
%apply (int *DummyOutputScalar){(int *problemType)};
%apply (int *DummyOutputScalar){(int *problemSubtype)};
/*>Returns the specification i.e., problem class, type and subtype for a problem identified by an object. */
CMISSError CMISSProblem_SpecificationGet(const CMISSProblemType problem /*<The problem to get the specification for. */,
    int *problemClass /*<On return, the problem class. \see OPENCMISS_ProblemClasses */,
    int *problemType /*<On return, the problem type. \see OPENCMISS_ProblemTypes */,
    int *problemSubtype /*<On return, the problem subtype. \see OPENCMISS_ProblemSubTypes */);
%clear (int *problemClass);
%clear (int *problemType);
%clear (int *problemSubtype);

/*>Sets/changes the specification i.e., problem class, type and subtype for a problem identified by an user number. */
CMISSError CMISSProblem_SpecificationSetNum(const int problemUserNumber /*<The user number of the problem to set the specification for. */,
    const int problemClass /*<The problem class to set. \see OPENCMISS_ProblemClasses */,
    const int problemType /*<The problem type to set. \see OPENCMISS_ProblemTypes */,
    const int problemSubtype /*<The problem subtype to set. \see OPENCMISS_ProblemSubTypes */);

/*>Sets/changes the specification i.e., problem class, type and subtype for a problem identified by an object. */
CMISSError CMISSProblem_SpecificationSet(const CMISSProblemType problem /*<The problem to get the specification for. */,
    const int problemClass /*<The problem class to set. \see OPENCMISS_ProblemClasses */,
    const int problemType /*<The problem type to set. \see OPENCMISS_ProblemTypes */,
    const int problemSubtype /*<The problem subtype to set. \see OPENCMISS_ProblemSubTypes */);

%apply (int *DummyOutputScalar){(int *coordinateSystemUserNumber)};
/*>Returns the coordinate system for a region identified by an user number. */
CMISSError CMISSRegion_CoordinateSystemGetNum(const int regionUserNumber /*<The user number of the region to get the coordinate system for. */,
    int *coordinateSystemUserNumber /*<On return, the coordinate system user number. */);
%clear (int *coordinateSystemUserNumber);

/*>Returns the coordinate system for a region identified by an object. */
CMISSError CMISSRegion_CoordinateSystemGet(const CMISSRegionType region /*<The region to get the coordinate system for. */,
    CMISSCoordinateSystemType coordinateSystem /*<On return, the regions coordinate system. */);

/*>Sets/changes the coordinate system for a region identified by an user number. */
CMISSError CMISSRegion_CoordinateSystemSetNum(const int regionUserNumber /*<The user number of the region to set the coordinate system for. */,
    const int coordinateSystemUserNumber /*<The user number of the coordinate system to set. */);

/*>Sets/changes the coordinate system for a region identified by an object. */
CMISSError CMISSRegion_CoordinateSystemSet(const CMISSRegionType region /*<The region to set the coordinate system for. */,
    const CMISSCoordinateSystemType coordinateSystem /*<The coordinate system to set. */);

/*>Finishes the process of creating a region identified by user number. */
CMISSError CMISSRegion_CreateFinishNum(const int regionUserNumber /*<The user number of the region to finish the creation of. */);

/*>Finishes the creation of a region identified by an object. */
CMISSError CMISSRegion_CreateFinish(const CMISSRegionType region /*<The region to finish creating. */);

/*>Starts the process creating a region identified by user number. */
CMISSError CMISSRegion_CreateStartNum(const int regionUserNumber /*<The user number of the region to start the creation of. */,
    const int parentRegionUserNumber /*<The user number of the parent region to start the creation of the region in. */);

/*>Starts the creation of a region identified by an object. */
CMISSError CMISSRegion_CreateStart(const int regionUserNumber /*<The user number of the region to start the creation of. */,
    const CMISSRegionType parentRegion /*<The parent region to  to start the creation of the region in. */,
    CMISSRegionType region /*<On return, the created region. */);

/*>Destroys a region identified by an user number. */
CMISSError CMISSRegion_DestroyNum(const int regionUserNumber /*<The user number of the region to destroy. */);

/*>Returns the data points for a region identified by an object. */
CMISSError CMISSRegion_DataPointsGet(const CMISSRegionType region /*<The region to get the data points for. */,
    CMISSDataPointsType dataPoints /*<On return, the regions data points. */);

/*>Destroys a region identified by an object. */
CMISSError CMISSRegion_Destroy(CMISSRegionType region /*<The region to destroy */);

%apply (const int Size, char *DummyOutputString){(const int labelSize, char *label)};
/*>Returns the character string label for a region identified by an user number. */
CMISSError CMISSRegion_LabelGetNum(const int regionUserNumber /*<The user number of the region to get the label for. */,
    const int labelSize /*<Length of label string */,
    char *label /*<On return, the region label. */);
%clear (const int labelSize, char *label);

%apply (const int Size, char *DummyOutputString){(const int labelSize, char *label)};
/*>Returns the character string label for a region identified by an object. */
CMISSError CMISSRegion_LabelGet(const CMISSRegionType region /*<The region to get the label for. */,
    const int labelSize /*<Length of label string */,
    char *label /*<On return, the region label. */);
%clear (const int labelSize, char *label);

%apply (const int Size, const char *DummyInputString){(const int labelSize, const char *label)};
/*>Sets/changes the character string label for a region identified by an user number. */
CMISSError CMISSRegion_LabelSetNum(const int regionUserNumber /*<The user number of the region to set the label for. */,
    const int labelSize /*<Length of label string */,
    const char *label /*<The region label to set. */);
%clear (const int labelSize, const char *label);

%apply (const int Size, const char *DummyInputString){(const int labelSize, const char *label)};
/*>Sets/changes the character string label for a region identified by an object. */
CMISSError CMISSRegion_LabelSet(const CMISSRegionType region /*<The region to set the label for. */,
    const int labelSize /*<Length of label string */,
    const char *label /*<The region label to set. */);
%clear (const int labelSize, const char *label);

/*>Returns the nodes for a region identified by an object. */
CMISSError CMISSRegion_NodesGet(const CMISSRegionType region /*<The region to get the nodes for. */,
    CMISSNodesType nodes /*<On return, the regions nodes. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (int *DummyOutputScalar){(int *CellMLIndex)};
/*>Adds a CellML environment to CellML equations identified by an user number. */
CMISSError CMISSCellMLEquations_CellMLAddNum(const int problemUserNumber /*<The user number of the problem number with the solver to add the CellML environment for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to add the CellML environment for. */,
    const int solverIndex /*<The solver index to add the CellML environment for. */,
    const int regionUserNumber /*<The user number of the region containing the CellML environment. */,
    const int CellMLUserNumber /*<The user number of the CellML environment to add. */,
    int *CellMLIndex /*<On return, the index of the added CellML environment. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (int *CellMLIndex);

%apply (int *DummyOutputScalar){(int *CellMLIndex)};
/*>Adds a CellML environment to CellML equations identified by an object. */
CMISSError CMISSCellMLEquations_CellMLAdd(const CMISSCellMLEquationsType CellMLEquations /*<The CellML equations to add the CellML environment for. */,
    const CMISSCellMLType CellML /*<The CellML environment to add. */,
    int *CellMLIndex /*<On return, the index of the added CellML environment. */);
%clear (int *CellMLIndex);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Returns the CellML equations for a solver identified by an user number. */
CMISSError CMISSSolver_CellMLEquationsGetNum(const int problemUserNumber /*<The user number of the problem number with the solver to get the CellML equations for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the CellML equations for. */,
    const int solverIndex /*<The solver index to get the CellML equations for. */,
    CMISSCellMLEquationsType CellMLEquations /*<On return, the CelllML equations for the solver. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Returns the CellML equations for a solver identified by an object. */
CMISSError CMISSSolver_CellMLEquationsGet(const CMISSSolverType solver /*<The solver to get the CellML equations for. */,
    CMISSCellMLEquationsType CellMLEquations /*<On return, the CellML equations for the solver. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (int *DummyOutputScalar){(int *DAEEulerSolverType)};
/*>Returns the solve type for an Euler differential-algebraic equation solver identified by an user number. */
CMISSError CMISSSolver_DAEEulerSolverTypeGetNum(const int problemUserNumber /*<The user number of the problem number with the solver to get the DAE Euler solver type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the DAE Euler solver type for. */,
    const int solverIndex /*<The solver index to get the DAE Euler solver type for */,
    int *DAEEulerSolverType /*<On return, the DAE Euler solver type. \see OPENCMISS_EulerDAESolverTypes,OPENCMISS */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (int *DAEEulerSolverType);

%apply (int *DummyOutputScalar){(int *DAEEulerSolverType)};
/*>Returns the solve type for an Euler differential-algebraic equation solver identified by an object. */
CMISSError CMISSSolver_DAEEulerSolverTypeGet(const CMISSSolverType solver /*<The solver to get the DAE Euler solver type for. */,
    int *DAEEulerSolverType /*<On return, the DAE Euler solver type. \see OPENCMISS_EulerDAESolverTypes,OPENCMISS */);
%clear (int *DAEEulerSolverType);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the solve type for an Euler differential-algebraic equation solver identified by an user number. */
CMISSError CMISSSolver_DAEEulerSolverTypeSetNum(const int problemUserNumber /*<The user number of the problem number with the solver to set the DAE Euler solver type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the DAE Euler solver type for. */,
    const int solverIndex /*<The solver index to set the DAE Euler solver type for */,
    const int DAEEulerSolverType /*<The DAE Euler solver type to set. \see OPENCMISS_EulerDAESolverTypes,OPENCMISS */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the solve type for an Euler differential-algebraic equation solver identified by an object. */
CMISSError CMISSSolver_DAEEulerSolverTypeSet(const CMISSSolverType solver /*<The solver to set the DAE Euler solver type for. */,
    const int DAEEulerSolverType /*<The DAE Euler solver type to set. \see OPENCMISS_EulerDAESolverTypes,OPENCMISS */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (int *DummyOutputScalar){(int *DAESolverType)};
/*>Returns the solve type for an differential-algebraic equation solver identified by an user number. */
CMISSError CMISSSolver_DAESolverTypeGetNum(const int problemUserNumber /*<The user number of the problem number with the solver to get the DAE solver type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the DAE solver type for. */,
    const int solverIndex /*<The solver index to get the DAE solver type for */,
    int *DAESolverType /*<On return, the DAE solver type. \see OPENCMISS_DAESolverTypes,OPENCMISS */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (int *DAESolverType);

%apply (int *DummyOutputScalar){(int *DAESolverType)};
/*>Returns the solve type for an differential-algebraic equation solver identified by an object. */
CMISSError CMISSSolver_DAESolverTypeGet(const CMISSSolverType solver /*<The solver to get the DAE solver type for. */,
    int *DAESolverType /*<On return, the DAE solver type. \see OPENCMISS_DAESolverTypes,OPENCMISS */);
%clear (int *DAESolverType);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the solve type for an differential-algebraic equation solver identified by an user number. */
CMISSError CMISSSolver_DAESolverTypeSetNum(const int problemUserNumber /*<The user number of the problem number with the solver to set the DAE solver type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the DAE solver type for. */,
    const int solverIndex /*<The solver index to set the DAE solver type for */,
    const int DAESolverType /*<The DAE solver type to set. \see OPENCMISS_DAESolverTypes,OPENCMISS */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the solve type for an differential-algebraic equation solver identified by an object. */
CMISSError CMISSSolver_DAESolverTypeSet(const CMISSSolverType solver /*<The solver to set the DAE solver type for. */,
    const int DAESolverType /*<The DAE solver type to set. \see OPENCMISS_DAESolverTypes,OPENCMISS */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the times for an differential-algebraic equation solver identified by an user number. */
CMISSError CMISSSolver_DAETimesSetNum(const int problemUserNumber /*<The user number of the problem number with the solver to set the DAE times for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the DAE times for. */,
    const int solverIndex /*<The solver index to set the DAE times for. */,
    const double startTime /*<The start time for the differential-algebraic solver. */,
    const double endTime /*<The end time for the differential-algebraic solver. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the times for an differential-algebraic equation solver identified by an object. */
CMISSError CMISSSolver_DAETimesSet(const CMISSSolverType solver /*<The solver to set the DAE times for. */,
    const double startTime /*<The start time for the differential-algebraic solver. */,
    const double endTime /*<The end time for the differential-algebraic solver. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the (initial) time step for an differential-algebraic equation solver identified by an user number. */
CMISSError CMISSSolver_DAETimeStepSetNum(const int problemUserNumber /*<The user number of the problem number with the solver to set the DAE times for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the DAE times for. */,
    const int solverIndex /*<The solver index to set the DAE times for. */,
    const double timeStep /*<The (initial) time step for the differential-algebraic solver. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the (initial) time step for an differential-algebraic equation solver identified by an object. */
CMISSError CMISSSolver_DAETimeStepSet(const CMISSSolverType solver /*<The solver to set the DAE times for. */,
    const double timeStep /*<The (initial) time step for the differential-algebraic solver. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (int *DummyOutputScalar){(int *degree)};
/*>Returns the degree of the polynomial used to interpolate time for a dynamic solver identified by an user number. */
CMISSError CMISSSolver_DynamicDegreeGetNum(const int problemUserNumber /*<The user number of the problem number with the solver to get the dynamic degree for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the dynamic degree for. */,
    const int solverIndex /*<The solver index to get the dynamic degree for */,
    int *degree /*<On return, the dynamic degree. \see OPENCMISS_DynamicDegreeTypes,OPENCMISS */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (int *degree);

%apply (int *DummyOutputScalar){(int *degree)};
/*>Returns the degree of the polynomial used to interpolate time for a dynamic solver identified by an object. */
CMISSError CMISSSolver_DynamicDegreeGet(const CMISSSolverType solver /*<The solver to get the dynamic degree for. */,
    int *degree /*<On return, the dynamic degree. \see OPENCMISS_DynamicDegreeTypes,OPENCMISS */);
%clear (int *degree);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the degree of the polynomial used to interpolate time for a dynamic solver identified by an user number. */
CMISSError CMISSSolver_DynamicDegreeSetNum(const int problemUserNumber /*<The user number of the problem number with the solver to set the dynamic degree for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the dynamic degree for. */,
    const int solverIndex /*<The solver index to set the dynamic degree for */,
    const int degree /*<The dynamic degree to set. \see OPENCMISS_DynamicDegreeTypes,OPENCMISS */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the degree of the polynomial used to interpolate time for a dynamic solver identified by an object. */
CMISSError CMISSSolver_DynamicDegreeSet(const CMISSSolverType solver /*<The solver to set the dynamic degree for. */,
    const int degree /*<The dynamic degree to set. \see OPENCMISS_DynamicDegreeTypes,OPENCMISS */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (int *DummyOutputScalar){(int *linearityType)};
/*>Returns the linearity type for a dynamic solver identified by an user number. */
CMISSError CMISSSolver_DynamicLinearityTypeGetNum(const int problemUserNumber /*<The user number of the problem number with the solver to get the dynamic linearity type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the dynamic linearity type for. */,
    const int solverIndex /*<The solver index to get the dynamic linearity type for. */,
    int *linearityType /*<On return, the dynamic linearity type. \see OPENCMISS_DynamicLinearityTypes,OPENCMISS */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (int *linearityType);

%apply (int *DummyOutputScalar){(int *linearityType)};
/*>Returns the linearity type for a dynamic solver identified by an object. */
CMISSError CMISSSolver_DynamicLinearityTypeGet(const CMISSSolverType solver /*<The solver to get the dynamic linearity type for. */,
    int *linearityType /*<On return, the dynamic linearity type. \see OPENCMISS_DynamicLinearityTypes,OPENCMISS */);
%clear (int *linearityType);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (int *DummyOutputScalar){(int *nonlinearSolverIndex)};
/*>Returns the nonlinear solver associated with a nonlinear dynamic solver identified by an user number. */
CMISSError CMISSSolver_DynamicNonlinearSolverGetNum(const int problemUserNumber /*<The user number of the problem number with the solver to get the dynamic nonlinear solver for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the dynamic nonlinear solver for. */,
    const int solverIndex /*<The solver index to get the dynamic nonlinear solver for. */,
    int *nonlinearSolverIndex /*<On return, the dynamic nonlinear solver index. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (int *nonlinearSolverIndex);

/*>Returns the nonlinear solver associated with a nonlinear dynamic solver identified by an object. */
CMISSError CMISSSolver_DynamicNonlinearSolverGet(const CMISSSolverType solver /*<The solver to get the dynamic nonlinear solver for. */,
    CMISSSolverType nonlinearSolver /*<On return, the dynamic nonlinear solver. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (int *DummyOutputScalar){(int *linearSolverIndex)};
/*>Returns the linear solver associated with a linear dynamic solver identified by an user number. */
CMISSError CMISSSolver_DynamicLinearSolverGetNum(const int problemUserNumber /*<The user number of the problem number with the solver to get the dynamic linear solver for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the dynamic linear solver for. */,
    const int solverIndex /*<The solver index to get the dynamic linear solver for. */,
    int *linearSolverIndex /*<On return, the dynamic linear solver index. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (int *linearSolverIndex);

/*>Returns the linear solver associated with a linear dynamic solver identified by an object. */
CMISSError CMISSSolver_DynamicLinearSolverGet(const CMISSSolverType solver /*<The solver to get the dynamic linear solver for. */,
    CMISSSolverType linearSolver /*<On return, the dynamic linear solver. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the scheme for a dynamic solver identified by an user number. */
CMISSError CMISSSolver_DynamicSchemeSetNum(const int problemUserNumber /*<The user number of the problem number with the solver to set the scheme for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the scheme for. */,
    const int solverIndex /*<The solver index to set the scheme for. */,
    const int scheme /*<The dynamic scheme to set. \see OPENCMISS_DynamicSchemeTypes */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the scheme for a dynamic solver identified by an object. */
CMISSError CMISSSolver_DynamicSchemeSet(const CMISSSolverType solver /*<The solver to set the scheme for. */,
    const int scheme /*<The dynamic scheme to set. \see OPENCMISS_DynamicSchemeTypes */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (const int DIM1, double *IN_ARRAY1){(const int thetasSize, const double *thetas)};
/*>Sets/changes the theta for a dynamic solver identified by an user number. */
CMISSError CMISSSolver_DynamicThetaSetNum(const int problemUserNumber /*<The user number of the problem number with the solver to set the theta for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the theta for. */,
    const int solverIndex /*<The solver index to set the theta for. */,
    const int thetasSize /*<Length of thetas */,
    const double *thetas /*<thetas(i). The i'th dynamic theta to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (const int thetasSize, const double *thetas);

%apply (const int DIM1, double *IN_ARRAY1){(const int thetasSize, const double *thetas)};
/*>Sets/changes the theta for a dynamic solver identified by an object. */
CMISSError CMISSSolver_DynamicThetaSet(const CMISSSolverType solver /*<The solver to set the theta for. */,
    const int thetasSize /*<Length of thetas */,
    const double *thetas /*<thetas(i). The i'th dynamic theta to set. */);
%clear (const int thetasSize, const double *thetas);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the times for a dynamic solver identified by an user number. */
CMISSError CMISSSolver_DynamicTimesSetNum(const int problemUserNumber /*<The user number of the problem number with the solver to set the times for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the times for. */,
    const int solverIndex /*<The solver index to set the times for. */,
    const double currentTime /*<The current time to set. */,
    const double timeIncrement /*<The time increment to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the times for a dynamic solver identified by an object. */
CMISSError CMISSSolver_DynamicTimesSet(const CMISSSolverType solver /*<The solver to set the times for. */,
    const double currentTime /*<The current time to set. */,
    const double timeIncrement /*<The time increment to set. */);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *arbitraryPath)};
/*>Sets the arbitrary path logical for a geometric transformation identified by an user number. */
CMISSError CMISSSolver_GeometricTransformationArbitraryPathSetNum(const int problemUserNumber /*<The user number of the problem number with the solver to set the arbitrary path for. */,
    const int controlLoopIdentifier /*<The control loop identifier with the solver to set the arbitrary path for. */,
    const int solverIndex /*<The solver index for the geometric transformation solver. */,
    const CMISSBool arbitraryPath /*<.TRUE. if the the transformation has an arbitrary path, .FALSE. if the path is uni-directional */);
%clear (const CMISSBool *arbitraryPath);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *arbitraryPath)};
/*>Sets the arbitrary path logical for a geometric transformation solver identified by an object. */
CMISSError CMISSSolver_GeometricTransformationArbitraryPathSet(const CMISSSolverType solver /*<The geometric transformation solver to set the arbitrary path for. */,
    const CMISSBool arbitraryPath /*<.TRUE. if the the transformation has an arbitrary path, .FALSE. if the path is uni-directional */);
%clear (const CMISSBool *arbitraryPath);

/*>Clear transformation a geometric transformation identified by an user number. */
CMISSError CMISSSolver_GeometricTransformationClearNum(const int problemUserNumber /*<The user number of the problem number with the solver to clear. */,
    const int controlLoopIdentifier /*<The control loop identifier with the solver to clear. */,
    const int solverIndex /*<The solver index for the geometric transformation solver. */);

/*>Clear transformation for a geometric transformation solver identified by an object. */
CMISSError CMISSSolver_GeometricTransformationClear(const CMISSSolverType solver /*<The geometric transformation solver to clear */);

/*>Sets the field for a geometric transformation identified by an user number. */
CMISSError CMISSSolver_GeometricTransformationFieldSetNum(const int problemUserNumber /*<The user number of the problem number with the solver to set the field for. */,
    const int controlLoopIdentifier /*<The control loop identifier with the solver to set the field for. */,
    const int solverIndex /*<The solver index for the geometric transformation solver. */,
    const int regionUserNumber /*<The region user number for the field */,
    const int fieldUserNumber /*<The field user number */,
    const int variableType /*<The field variable type to set the transformation for */);

/*>Sets the field for a geometric transformation solver identified by an object. */
CMISSError CMISSSolver_GeometricTransformationFieldSet(const CMISSSolverType solver /*<The geometric transformation solver to set the field for. */,
    const CMISSFieldType field /*<The field for the solver to set. */,
    const int variableType /*<The field variable type to set the transformation for */);

%apply (const int DIM1, const int DIM2, double *IN_FARRAY2){(const int matrixSize1, const int matrixSize2, const double *matrix)};
/*>Sets the full transformation matrix at a specific increment for a geometric transformation identified by an user number. */
CMISSError CMISSSolver_GeometricTransformationMatrixSetNum(const int problemUserNumber /*<The user number of the problem number with the solver to set the matrix for. */,
    const int controlLoopIdentifier /*<The control loop identifier with the solver to set the matrix for. */,
    const int solverIndex /*<The solver index to set the matrix for. */,
    const int matrixSize1 /*<Size of dimension 1 of matrix */,
    const int matrixSize2 /*<Size of dimension 2 of matrix */,
    const double *matrix /*<The full transformation matrix to set */,
    const int loadIncrementIdx /*<The load increment index to set the matrix for. */);
%clear (const int matrixSize1, const int matrixSize2, const double *matrix);

%apply (const int DIM1, const int DIM2, double *IN_FARRAY2){(const int matrixSize1, const int matrixSize2, const double *matrix)};
/*>Sets the full transformation matrix vector at a specific load increment for a geometric transformation solver identified by an object. */
CMISSError CMISSSolver_GeometricTransformationMatrixSet(const CMISSSolverType solver /*<The geometric transformation solver to set the matrix for. */,
    const int matrixSize1 /*<Size of dimension 1 of matrix */,
    const int matrixSize2 /*<Size of dimension 2 of matrix */,
    const double *matrix /*<The full transformation matrix to set */,
    const int loadIncrementIdx /*<The load increment index to set the matrix for. */);
%clear (const int matrixSize1, const int matrixSize2, const double *matrix);

/*>Sets the arbitrary path logical for a geometric transformation identified by an user number. */
CMISSError CMISSSolver_GeometricTransformationNoLoadIncrementsSetNum(const int problemUserNumber /*<The user number of the problem number with the solver to set the field for. */,
    const int controlLoopIdentifier /*<The control loop identifier with the solver to set the field for. */,
    const int solverIndex /*<The solver index for the geometric transformation solver. */,
    const int numberOfIncrements /*<The number of load increments to apply the transformation */);

/*>Sets the arbitrary path logical for a geometric transformation solver identified by an object. */
CMISSError CMISSSolver_GeometricTransformationNoLoadIncrementsSet(const CMISSSolverType solver /*<The geometric transformation solver to set the field for. */,
    const int numberOfIncrements /*<The number of load increments to apply the transformation */);

%apply (const int DIM1, double *IN_ARRAY1){(const int pivotPointSize, const double *pivotPoint)};
%apply (const int DIM1, double *IN_ARRAY1){(const int axisSize, const double *axis)};
/*>Sets the rotation at a specific increment for a geometric transformation identified by an user number. */
CMISSError CMISSSolver_GeometricTransformationRotationSetNum(const int problemUserNumber /*<The user number of the problem number with the solver to set the rotation for. */,
    const int controlLoopIdentifier /*<The control loop identifier with the solver to set the rotation for. */,
    const int solverIndex /*<The solver index to set the rotation for. */,
    const int pivotPointSize /*<Length of pivotPoint */,
    const double *pivotPoint /*<The pivot point to rotate about */,
    const int axisSize /*<Length of axis */,
    const double *axis /*<The axis to  to rotate around */,
    const double angle /*<The angle to rotate */,
    const int loadIncrementIdx /*<The load increment index to set the rotation for. */);
%clear (const int pivotPointSize, const double *pivotPoint);
%clear (const int axisSize, const double *axis);

%apply (const int DIM1, double *IN_ARRAY1){(const int pivotPointSize, const double *pivotPoint)};
%apply (const int DIM1, double *IN_ARRAY1){(const int axisSize, const double *axis)};
/*>Sets the rotation at a specific load increment for a geometric transformation solver identified by an object. */
CMISSError CMISSSolver_GeometricTransformationRotationSet(const CMISSSolverType solver /*<The geometric transformation solver to set the rotation for. */,
    const int pivotPointSize /*<Length of pivotPoint */,
    const double *pivotPoint /*<The pivot point to rotate about */,
    const int axisSize /*<Length of axis */,
    const double *axis /*<The axis to  to rotate around */,
    const double angle /*<The angle to rotate */,
    const int loadIncrementIdx /*<The load increment index to set the rotation for. */);
%clear (const int pivotPointSize, const double *pivotPoint);
%clear (const int axisSize, const double *axis);

%apply (const int DIM1, double *IN_ARRAY1){(const int scalingsSize, const double *scalings)};
/*>Sets the scalings for a geometric transformation identified by an user number. */
CMISSError CMISSSolver_GeometricTransformationScalingsSetNum(const int problemUserNumber /*<The user number of the problem number with the solver to set the scalings for. */,
    const int controlLoopIdentifier /*<The control loop identifier with the solver to set the scalings for. */,
    const int solverIndex /*<The solver index to set the scalings for. */,
    const int scalingsSize /*<Length of scalings */,
    const double *scalings /*<The scalings to set */);
%clear (const int scalingsSize, const double *scalings);

%apply (const int DIM1, double *IN_ARRAY1){(const int scalingsSize, const double *scalings)};
/*>Sets the scalings for a geometric transformation solver identified by an object. */
CMISSError CMISSSolver_GeometricTransformationScalingsSet(const CMISSSolverType solver /*<The geometric transformation solver to set the scalings for. */,
    const int scalingsSize /*<Length of scalings */,
    const double *scalings /*<The scalings to set */);
%clear (const int scalingsSize, const double *scalings);

%apply (const int DIM1, double *IN_ARRAY1){(const int translationSize, const double *translation)};
/*>Sets the translation at a specific increment for a geometric transformation identified by an user number. */
CMISSError CMISSSolver_GeometricTransformationTranslationSetNum(const int problemUserNumber /*<The user number of the problem number with the solver to set the translation for. */,
    const int controlLoopIdentifier /*<The control loop identifier with the solver to set the translation for. */,
    const int solverIndex /*<The solver index to set the translation for. */,
    const int translationSize /*<Length of translation */,
    const double *translation /*<The translation components to set */,
    const int loadIncrementIdx /*<The load increment index to set the translation for. */);
%clear (const int translationSize, const double *translation);

%apply (const int DIM1, double *IN_ARRAY1){(const int translationSize, const double *translation)};
/*>Sets the translation vector at a specific load increment for a geometric transformation solver identified by an object. */
CMISSError CMISSSolver_GeometricTransformationTranslationSet(const CMISSSolverType solver /*<The geometric transformation solver to set the translation for. */,
    const int translationSize /*<Length of translation */,
    const double *translation /*<The translation components to set */,
    const int loadIncrementIdx /*<The load increment index to set the translation for. */);
%clear (const int translationSize, const double *translation);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (const int Size, char *DummyOutputString){(const int labelSize, char *label)};
/*>Returns the character string label for a solver identified by an user number. */
CMISSError CMISSSolver_LabelGetNum(const int problemUserNumber /*<The user number of the problem to set the label for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<The control loop identifiers. */,
    const int solverIndex /*<The solver index to set the label for. */,
    const int labelSize /*<Length of label string */,
    char *label /*<On return, the solver label. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (const int labelSize, char *label);

%apply (const int Size, char *DummyOutputString){(const int labelSize, char *label)};
/*>Returns the character string label for a solver identified by an object. */
CMISSError CMISSSolver_LabelGet(const CMISSSolverType solver /*<The solver to get the label for. */,
    const int labelSize /*<Length of label string */,
    char *label /*<On return, the solver label. */);
%clear (const int labelSize, char *label);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (const int Size, const char *DummyInputString){(const int labelSize, const char *label)};
/*>Sets/changes the character string label for a solver identified by an user number. */
CMISSError CMISSSolver_LabelSetNum(const int problemUserNumber /*<The user number of the problem to set the label for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<The solver identifiers. */,
    const int solverIndex /*<The solver index to set the label for. */,
    const int labelSize /*<Length of label string */,
    const char *label /*<The region label to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (const int labelSize, const char *label);

%apply (const int Size, const char *DummyInputString){(const int labelSize, const char *label)};
/*>Sets/changes the character string label for a solver identified by an object. */
CMISSError CMISSSolver_LabelSet(const CMISSSolverType solver /*<The solver to set the label for. */,
    const int labelSize /*<Length of label string */,
    const char *label /*<The solver label to set. */);
%clear (const int labelSize, const char *label);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (int *DummyOutputScalar){(int *libraryType)};
/*>Returns the library type for a solver identified by an user number. */
CMISSError CMISSSolver_LibraryTypeGetNum(const int problemUserNumber /*<The user number of the problem number with the solver to get the library type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the library type for. */,
    const int solverIndex /*<The solver index to get the library type for. */,
    int *libraryType /*<On return, the library type for the solver. \see OPENCMISS_SolverLibraries */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (int *libraryType);

%apply (int *DummyOutputScalar){(int *libraryType)};
/*>Returns the library type for a solver identified by an object. */
CMISSError CMISSSolver_LibraryTypeGet(const CMISSSolverType solver /*<The solver to get the library type for. */,
    int *libraryType /*<On return, the library type for the solver. \see OPENCMISS_SolverLibraries */);
%clear (int *libraryType);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the library type for a solver identified by an user number. */
CMISSError CMISSSolver_LibraryTypeSetNum(const int problemUserNumber /*<The user number of the problem number with the solver to set the library type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the library type for. */,
    const int solverIndex /*<The solver index to set the library type for. */,
    const int libraryType /*<The library type for the solver to set. \see OPENCMISS_SolverLibraries */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the library type for a solver identified by an object. */
CMISSError CMISSSolver_LibraryTypeSet(const CMISSSolverType solver /*<The solver to set the library type for. */,
    const int libraryType /*<The library type for the solver to set. \see OPENCMISS_SolverLibraries */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the type of direct linear solver for a solver identified by an user number. */
CMISSError CMISSSolver_LinearDirectTypeSetNum(const int problemUserNumber /*<The user number of the problem number with the direct linear solver to set the direct type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the direct type for. */,
    const int solverIndex /*<The solver index to set the direct type for. */,
    const int directSolverType /*<The type of the direct linear solver to set. \see OPENCMISS_DirectLinearSolverTypes */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the type of direct linear solver for a solver identified by an object. */
CMISSError CMISSSolver_LinearDirectTypeSet(const CMISSSolverType solver /*<The solver to set the library type for. */,
    const int directSolverType /*<The type of the direct linear solver to set. \see OPENCMISS_DirectLinearSolverTypes */);

/*>Sets/changes the MUMPS ICNTL(icntl)=ivalue integer control parameters through the PETSc-MUMPS interface. Must be called after the boundary conditions have been set up. */
CMISSError CMISSSolver_MumpsSetIcntl(const CMISSSolverType solver /*<The solver to set the library type for. */,
    const int icntl /*<The MUMPS ICNTL integer control parameter */,
    const int ivalue /*<The MUMPS ICNTL integer value to set: ICNTL(icntl)=ivalue */);

/*>Sets/changes the MUMPS CNTL(icntl)=val real/complex control parameters through the PETSc-MUMPS interface. Must be called after the boundary conditions have been set up. */
CMISSError CMISSSolver_MumpsSetCntl(const CMISSSolverType solver /*<The solver to set the library type for. */,
    const int icntl /*<The MUMPS CNTL integer control parameter */,
    const double val /*<The MUMPS CNTL real value to set: CNTL(icntl)=val */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the maximum absolute tolerance for an iterative linear solver identified by an user number. */
CMISSError CMISSSolver_LinearIterativeAbsoluteToleranceSetNum(const int problemUserNumber /*<The user number of the problem number with the iterative linear solver to set the absolute tolerance for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the absolute tolerance for. */,
    const int solverIndex /*<The solver index to set the absolute tolerance for. */,
    const double absoluteTolerance /*<The absolute tolerance for the iterative linear solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the maximum absolute tolerance for an iterative linear solver identified by an object. */
CMISSError CMISSSolver_LinearIterativeAbsoluteToleranceSet(const CMISSSolverType solver /*<The iterative linear solver to set the absolute tolerance for. */,
    const double absoluteTolerance /*<The absolute tolerance for the iterative linear solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the maximum divergence tolerance for an iterative linear solver identified by an user number. */
CMISSError CMISSSolver_LinearIterativeDivergenceToleranceSetNum(const int problemUserNumber /*<The user number of the problem number with the iterative linear solver to set the divergence tolerance for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the divergence tolerance for. */,
    const int solverIndex /*<The solver index to set the divergence tolerance for. */,
    const double divergenceTolerance /*<The divergence tolerance for the iterative linear solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the maximum divergence tolerance for an iterative linear solver identified by an object. */
CMISSError CMISSSolver_LinearIterativeDivergenceToleranceSet(const CMISSSolverType solver /*<The iterative linear solver to set the divergence tolerance for. */,
    const double divergenceTolerance /*<The divergence tolerance for the iterative linear solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the GMRES restart value for a GMRES iterative linear solver identified by an user number. */
CMISSError CMISSSolver_LinearIterativeGMRESRestartSetNum(const int problemUserNumber /*<The user number of the problem number with the GMRES iterative linear solver to set the restart value for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the restart value for. */,
    const int solverIndex /*<The solver index to set the restart value for. */,
    const int GMRESRestart /*<The GMRES restart value to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the GMRES restart value for a GMRES iterative linear solver identified by an object. */
CMISSError CMISSSolver_LinearIterativeGMRESRestartSet(const CMISSSolverType solver /*<The GMRES iterative linear solver to set the restart value for. */,
    const int GMRESRestart /*<The GMRES restart value to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the maximum number of iterations for an iterative linear solver identified by an user number. */
CMISSError CMISSSolver_LinearIterativeMaximumIterationsSetNum(const int problemUserNumber /*<The user number of the problem number with the iterative linear solver to set the maximum iterations for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the maximum iterations for. */,
    const int solverIndex /*<The solver index to set the maximum iterations for. */,
    const int maximumIterations /*<The maximum iterations to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the maximum number of iterations for an iterative linear solver identified by an object. */
CMISSError CMISSSolver_LinearIterativeMaximumIterationsSet(const CMISSSolverType solver /*<The iterative linear solver to set the maximum iterations for. */,
    const int maximumIterations /*<The maximum iterations to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the preconditioner type for an iterative linear solver identified by an user number. */
CMISSError CMISSSolver_LinearIterativePreconditionerTypeSetNum(const int problemUserNumber /*<The user number of the problem number with the iterative linear solver to set the preconditioner type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the preconditioner type for. */,
    const int solverIndex /*<The solver index to set the preconditioner type for. */,
    const int preconditionerType /*<The preconditioner type to set. \see OPENCMISS_IterativePreconditionerTypes */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the preconditioner type for an iterative linear solver identified by an object. */
CMISSError CMISSSolver_LinearIterativePreconditionerTypeSet(const CMISSSolverType solver /*<The iterative linear solver to set the preconditioner type for. */,
    const int preconditionerType /*<The preconditioner type to set. \see OPENCMISS_IterativePreconditionerTypes */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the maximum relative tolerance for an iterative linear solver identified by an user number. */
CMISSError CMISSSolver_LinearIterativeRelativeToleranceSetNum(const int problemUserNumber /*<The user number of the problem number with the iterative linear solver to set the relative tolerance for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the relative tolerance for. */,
    const int solverIndex /*<The solver index to set the relative tolerance for. */,
    const double relativeTolerance /*<The relative tolerance for the iterative linear solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the maximum relative tolerance for an iterative linear solver identified by an object. */
CMISSError CMISSSolver_LinearIterativeRelativeToleranceSet(const CMISSSolverType solver /*<The iterative linear solver to set the relative tolerance for. */,
    const double relativeTolerance /*<The relative tolerance for the iterative linear solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the type for an iterative linear solver identified by an user number. */
CMISSError CMISSSolver_LinearIterativeTypeSetNum(const int problemUserNumber /*<The user number of the problem number with the iterative linear solver to set the type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the type for. */,
    const int solverIndex /*<The solver index to set the type for. */,
    const int iterativeSolverType /*<The iterative solver type to set. \see OPENCMISS_IterativeLinearSolverTypes */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the type for an iterative linear solver identified by an object. */
CMISSError CMISSSolver_LinearIterativeTypeSet(const CMISSSolverType solver /*<The iterative linear solver to set the type for. */,
    const int iterativeSolverType /*<The iterative solver type to set. \see OPENCMISS_IterativeLinearSolverTypes */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the type for a linear solver identified by an user number. */
CMISSError CMISSSolver_LinearTypeSetNum(const int problemUserNumber /*<The user number of the problem number with the linear solver to set the type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the type for. */,
    const int solverIndex /*<The solver index to set the type for. */,
    const int linearSolverType /*<The linear solver type to set. \see OPENCMISS_LinearSolverTypes */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the type for a linear solver identified by an object. */
CMISSError CMISSSolver_LinearTypeSet(const CMISSSolverType solver /*<The linear solver to set the type for. */,
    const int linearSolverType /*<The linear solver type to set. \see OPENCMISS_LinearSolverTypes */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the absolute tolerance for a Newton solver identified by an user number. */
CMISSError CMISSSolver_NewtonAbsoluteToleranceSetNum(const int problemUserNumber /*<The user number of the problem number with the Newton solver to set the absolute tolerance for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the absolute tolerance for. */,
    const int solverIndex /*<The solver index to set the absolute tolerance for. */,
    const double absoluteTolerance /*<The absolute tolerance for the Newton solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the absolute tolerance for a Newton solver identified by an object. */
CMISSError CMISSSolver_NewtonAbsoluteToleranceSet(const CMISSSolverType solver /*<The Newton solver to set the absolute tolerance for. */,
    const double absoluteTolerance /*<The absolute tolerance for the Newton solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (const CMISSBool DummyInputBool){(const CMISSBool *monitorLinesearchFlag)};
/*>Enables/disables output monitoring for a nonlinear Newton line search solver identified by an user number. */
CMISSError CMISSSolver_NewtonLineSearchMonitorOutputSetNum(const int problemUserNumber /*<The user number of the problem number with the Newton solver to set the linesearch monitoring for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the linesearch monitoring for. */,
    const int solverIndex /*<The solver index to set the absolute tolerance for. */,
    const CMISSBool monitorLinesearchFlag /*<Flag to determine whether to enable/disable linsearch monitor output. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (const CMISSBool *monitorLinesearchFlag);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *monitorLinesearchFlag)};
/*>Enables/disables output monitoring for a nonlinear Newton line search solver identified by an object. */
CMISSError CMISSSolver_NewtonLineSearchMonitorOutputSet(const CMISSSolverType solver /*<The Newton solver to set the linesearch monitoring for. */,
    const CMISSBool monitorLinesearchFlag /*<Flag to determine whether to enable/disable linsearch monitor output. */);
%clear (const CMISSBool *monitorLinesearchFlag);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the Jacobian calculation type for a Newton solver identified by an user number. */
CMISSError CMISSSolver_NewtonJacobianCalculationTypeSetNum(const int problemUserNumber /*<The user number of the problem number with the Newton solver to set the Jacobian calculation type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the Jacobian calculation type for. */,
    const int solverIndex /*<The solver index to set the Jacobian calculation type for. */,
    const int jacobianCalculationType /*<The Jacobian calculation type for the Newton solver to set. \see OPENCMISS_JacobianCalculationTypes */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the Jacobian calculation type for a Newton solver identified by an object. */
CMISSError CMISSSolver_NewtonJacobianCalculationTypeSet(const CMISSSolverType solver /*<The Newton solver to set the Jacobian calculation type for. */,
    const int jacobianCalculationType /*<The Jacobian calculation type for the Newton solver to set. \see OPENCMISS_JacobianCalculationTypes */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (int *DummyOutputScalar){(int *linearSolverIndex)};
/*>Returns the linear solver associated with a Newton solver identified by an user number. */
CMISSError CMISSSolver_NewtonLinearSolverGetNum(const int problemUserNumber /*<The user number of the problem number with the solver to get the Newton linear solver for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the Newton linear solver for. */,
    const int solverIndex /*<The solver index to get the Newton linear solver for. */,
    int *linearSolverIndex /*<On return, the Newton linear solver index. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (int *linearSolverIndex);

/*>Returns the linear solver associated with a Newton solver identified by an object. */
CMISSError CMISSSolver_NewtonLinearSolverGet(const CMISSSolverType solver /*<The solver to get the Newton linear solver for. */,
    CMISSSolverType linearSolver /*<On return, the Newton linear solver. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (int *DummyOutputScalar){(int *CellMLSolverIndex)};
/*>Returns the CellML solver associated with a Newton solver identified by an user number. */
CMISSError CMISSSolver_NewtonCellMLSolverGetNum(const int problemUserNumber /*<The user number of the problem number with the solver to get the Newton CellML solver for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the Newton CellML solver for. */,
    const int solverIndex /*<The solver index to get the Newton CellML solver for. */,
    int *CellMLSolverIndex /*<On return, the Newton CellML solver index. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (int *CellMLSolverIndex);

/*>Returns the CellML solver associated with a Newton solver identified by an object. */
CMISSError CMISSSolver_NewtonCellMLSolverGet(const CMISSSolverType solver /*<The solver to get the Newton CellML solver for. */,
    CMISSSolverType CellMLSolver /*<On return, the Newton CellML solver. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the convergence test type for a Newton solver identified by an user number. */
CMISSError CMISSSolver_NewtonConvergenceTestTypeSetNum(const int problemUserNumber /*<The user number of the problem number with the Newton solver to set the convergence test type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the convergence test type for. */,
    const int solverIndex /*<The solver index to set the convergence test type for. */,
    const int convergenceTestType /*<The convergence test type for the Newton solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the convergence test type for a Newton solver identified by an object. */
CMISSError CMISSSolver_NewtonConvergenceTestTypeSet(const CMISSSolverType solver /*<The Newton solver to set the convergence test type for. */,
    const int convergenceTestType /*<The convergence test type for the Newton solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the line search alpha for a Newton line search solver identified by an user number. */
CMISSError CMISSSolver_NewtonLineSearchAlphaSetNum(const int problemUserNumber /*<The user number of the problem number with the Newton line search solver to set the alpha for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the alpha for. */,
    const int solverIndex /*<The solver index to set the alpha for. */,
    const double alpha /*<The alpha for the Newton line search solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the line search alpha for a Newton line search solver identified by an object. */
CMISSError CMISSSolver_NewtonLineSearchAlphaSet(const CMISSSolverType solver /*<The Newton line search solver to set the alpha for. */,
    const double alpha /*<The alpha for the Newton line search solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the line search maximum step for a Newton line search solver identified by an user number. */
CMISSError CMISSSolver_NewtonLineSearchMaxStepSetNum(const int problemUserNumber /*<The user number of the problem number with the Newton line search solver to set the maximum step for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the maximum step for. */,
    const int solverIndex /*<The solver index to set the maximum step for. */,
    const double maxStep /*<The maximum step for the Newton line search solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the line search maximum step for a Newton line search solver identified by an object. */
CMISSError CMISSSolver_NewtonLineSearchMaxStepSet(const CMISSSolverType solver /*<The Newton line search solver to set the maximum step for. */,
    const double maxStep /*<The maximum step for the Newton line search solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the line search step tolerance for a Newton line search solver identified by an user number. */
CMISSError CMISSSolver_NewtonLineSearchStepTolSetNum(const int problemUserNumber /*<The user number of the problem number with the Newton line search solver to set the step tolerance for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the step tolerance for. */,
    const int solverIndex /*<The solver index to set the step tolerance for. */,
    const double stepTol /*<The step tolerance for the Newton line search solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the line search step tolerance for a Newton line search solver identified by an object. */
CMISSError CMISSSolver_NewtonLineSearchStepTolSet(const CMISSSolverType solver /*<The Newton line search solver to set the step tolerance for. */,
    const double stepTol /*<The step tolerance for the Newton line search solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the type of line search for a Newton line search solver identified by an user number. */
CMISSError CMISSSolver_NewtonLineSearchTypeSetNum(const int problemUserNumber /*<The user number of the problem number with the Newton line search solver to set the line search type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the line search type for. */,
    const int solverIndex /*<The solver index to set the line search type for. */,
    const int lineSearchType /*<The type of line search for the Newton line search solver to set. \see OPENCMISS_NewtonLineSearchTypes */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the type of line search for a Newton line search solver identified by an object. */
CMISSError CMISSSolver_NewtonLineSearchTypeSet(const CMISSSolverType solver /*<The Newton line search solver to set the line search type for. */,
    const int lineSearchType /*<The type of line search for the Newton line search solver to set. \see OPENCMISS_NewtonLineSearchTypes */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the maximum number of function evaluations for a Newton solver identified by an user number. */
CMISSError CMISSSolver_NewtonMaximumFunctionEvaluationsSetNum(const int problemUserNumber /*<The user number of the problem number with the Newton solver to set the maximum function evaluations for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the maximum function evaluations for. */,
    const int solverIndex /*<The solver index to set the maximum function evaluations for. */,
    const int maximumFunctionEvaluations /*<The maximum number of function evaluations for the Newton solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the maximum number of function evaluations for a Newton solver identified by an object. */
CMISSError CMISSSolver_NewtonMaximumFunctionEvaluationsSet(const CMISSSolverType solver /*<The Newton solver to set the maximum number of function evaluations for. */,
    const int maximumFunctionEvaluations /*<The maximum number of function evaluations for the Newton solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the maximum number of iterations for a Newton solver identified by an user number. */
CMISSError CMISSSolver_NewtonMaximumIterationsSetNum(const int problemUserNumber /*<The user number of the problem number with the Newton solver to set the maximum iterations for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the maximum iterations for. */,
    const int solverIndex /*<The solver index to set the maximum iterations for. */,
    const int maximumIterations /*<The maximum number of iterations for the Newton solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the maximum number of iterations for a Newton solver identified by an object. */
CMISSError CMISSSolver_NewtonMaximumIterationsSet(const CMISSSolverType solver /*<The Newton solver to set the maximum number of iterations for. */,
    const int maximumIterations /*<The maximum number of iterations for the Newton solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the relative tolerance for a Newton solver identified by an user number. */
CMISSError CMISSSolver_NewtonRelativeToleranceSetNum(const int problemUserNumber /*<The user number of the problem number with the Newton solver to set the relative tolerance for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the relative tolerance for. */,
    const int solverIndex /*<The solver index to set the relative tolerance for. */,
    const double relativeTolerance /*<The relative tolerance for the Newton solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the relative tolerance for a Newton solver identified by an object. */
CMISSError CMISSSolver_NewtonRelativeToleranceSet(const CMISSSolverType solver /*<The Newton solver to set the relative tolerance for. */,
    const double relativeTolerance /*<The relative tolerance for the Newton solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the solution tolerance for a Newton solver identified by an user number. */
CMISSError CMISSSolver_NewtonSolutionToleranceSetNum(const int problemUserNumber /*<The user number of the problem number with the Newton solver to set the solution tolerance for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the solution tolerance for. */,
    const int solverIndex /*<The solver index to set the solution tolerance for. */,
    const double solutionTolerance /*<The absolulte tolerance for the Newton solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the solution tolerance for a Newton solver identified by an object. */
CMISSError CMISSSolver_NewtonSolutionToleranceSet(const CMISSSolverType solver /*<The Newton solver to set the solution tolerance for. */,
    const double solutionTolerance /*<The solution tolerance for the Newton solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the delta0 for a Newton trust region solver identified by an user number. */
CMISSError CMISSSolver_NewtonTrustRegionDelta0SetNum(const int problemUserNumber /*<The user number of the problem number with the Newton trust region solver to set the delta0 for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the delta0 for. */,
    const int solverIndex /*<The solver index to set the delta0 for. */,
    const double delta0 /*<The delta0 for the Newton trust region solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the delta0 for a Newton trust region solver identified by an object. */
CMISSError CMISSSolver_NewtonTrustRegionDelta0Set(const CMISSSolverType solver /*<The Newton trust region solver to set the delta0 for. */,
    const double delta0 /*<The delta0 for the Newton trust region solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the tolerance for a Newton trust region solver identified by an user number. */
CMISSError CMISSSolver_NewtonTrustRegionToleranceSetNum(const int problemUserNumber /*<The user number of the problem number with the Newton trust region solver to set the tolerance for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the tolerance for. */,
    const int solverIndex /*<The solver index to set the tolerance for. */,
    const double tolerance /*<The tolerance for the Newton trust region solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the tolerance for a Newton trust region solver identified by an object. */
CMISSError CMISSSolver_NewtonTrustRegionToleranceSet(const CMISSSolverType solver /*<The Newton trust region solver to set the tolerance for. */,
    const double tolerance /*<The tolerance for the Newton trust region solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the type of a Newton solver identified by an user number. */
CMISSError CMISSSolver_NewtonTypeSetNum(const int problemUserNumber /*<The user number of the problem number with the Newton solver to set the type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the type for. */,
    const int solverIndex /*<The solver index to set the type for. */,
    const int newtonSolveType /*<The type of the Newton solver to set. \see OPENCMISS_NewtonSolverTypes */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the type of a Newton solver identified by an object. */
CMISSError CMISSSolver_NewtonTypeSet(const CMISSSolverType solver /*<The Newton solver to set the type for. */,
    const int newtonSolveType /*<The type of the Newton solver to set. \see OPENCMISS_NewtonSolverTypes */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the absolute tolerance for a Quasi-Newton solver identified by an user number. */
CMISSError CMISSSolver_QuasiNewtonAbsoluteToleranceSetNum(const int problemUserNumber /*<The user number of the problem number with the Quasi-Newton solver to set the absolute tolerance for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the absolute tolerance for. */,
    const int solverIndex /*<The solver index to set the absolute tolerance for. */,
    const double absoluteTolerance /*<The absolute tolerance for the Quasi-Newton solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the absolute tolerance for a Quasi-Newton solver identified by an object. */
CMISSError CMISSSolver_QuasiNewtonAbsoluteToleranceSet(const CMISSSolverType solver /*<The Quasi-Newton solver to set the absolute tolerance for. */,
    const double absoluteTolerance /*<The absolute tolerance for the Quasi-Newton solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (const CMISSBool DummyInputBool){(const CMISSBool *monitorLinesearchFlag)};
/*>Enables/disables output monitoring for a nonlinear Quasi-Newton line search solver identified by an user number. */
CMISSError CMISSSolver_QuasiNewtonLineSearchMonitorOutputSetNum(const int problemUserNumber /*<The user number of the problem number with the Quasi-Newton solver to set the linesearch monitoring for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the linesearch monitoring for. */,
    const int solverIndex /*<The solver index to set the absolute tolerance for. */,
    const CMISSBool monitorLinesearchFlag /*<Flag to determine whether to enable/disable linsearch monitor output. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (const CMISSBool *monitorLinesearchFlag);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *monitorLinesearchFlag)};
/*>Enables/disables output monitoring for a nonlinear Quasi-Newton line search solver identified by an object. */
CMISSError CMISSSolver_QuasiNewtonLineSearchMonitorOutputSet(const CMISSSolverType solver /*<The Quasi-Newton solver to set the linesearch monitoring for. */,
    const CMISSBool monitorLinesearchFlag /*<Flag to determine whether to enable/disable linsearch monitor output. */);
%clear (const CMISSBool *monitorLinesearchFlag);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the Jacobian calculation type for a Quasi-Newton solver identified by an user number. */
CMISSError CMISSSolver_QuasiNewtonJacobianCalculationTypeSetNum(const int problemUserNumber /*<The user number of the problem number with the Quasi-Newton solver to set the Jacobian calculation type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the Jacobian calculation type for. */,
    const int solverIndex /*<The solver index to set the Jacobian calculation type for. */,
    const int jacobianCalculationType /*<The Jacobian calculation type for the Quasi-Newton solver to set. \see OPENCMISS_JacobianCalculationTypes */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the Jacobian calculation type for a Quasi-Newton solver identified by an object. */
CMISSError CMISSSolver_QuasiNewtonJacobianCalculationTypeSet(const CMISSSolverType solver /*<The Quasi-Newton solver to set the Jacobian calculation type for. */,
    const int jacobianCalculationType /*<The Jacobian calculation type for the Quasi-Newton solver to set. \see OPENCMISS_JacobianCalculationTypes */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (int *DummyOutputScalar){(int *linearSolverIndex)};
/*>Returns the linear solver associated with a Quasi-Newton solver identified by an user number. */
CMISSError CMISSSolver_QuasiNewtonLinearSolverGetNum(const int problemUserNumber /*<The user number of the problem number with the solver to get the Quasi-Newton linear solver for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the Quasi-Newton linear solver for. */,
    const int solverIndex /*<The solver index to get the Quasi-Newton linear solver for. */,
    int *linearSolverIndex /*<On return, the Quasi-Newton linear solver index. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (int *linearSolverIndex);

/*>Returns the linear solver associated with a Quasi-Newton solver identified by an object. */
CMISSError CMISSSolver_QuasiNewtonLinearSolverGet(const CMISSSolverType solver /*<The solver to get the Quasi-Newton linear solver for. */,
    CMISSSolverType linearSolver /*<On return, the Quasi-Newton linear solver. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (int *DummyOutputScalar){(int *CellMLSolverIndex)};
/*>Returns the CellML solver associated with a Quasi-Newton solver identified by an user number. */
CMISSError CMISSSolver_QuasiNewtonCellMLSolverGetNum(const int problemUserNumber /*<The user number of the problem number with the solver to get the Quasi-Newton CellML solver for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the Quasi-Newton CellML solver for. */,
    const int solverIndex /*<The solver index to get the Quasi-Newton CellML solver for. */,
    int *CellMLSolverIndex /*<On return, the Quasi-Newton CellML solver index. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (int *CellMLSolverIndex);

/*>Returns the CellML solver associated with a Quasi-Newton solver identified by an object. */
CMISSError CMISSSolver_QuasiNewtonCellMLSolverGet(const CMISSSolverType solver /*<The solver to get the Quasi-Newton CellML solver for. */,
    CMISSSolverType CellMLSolver /*<On return, the Quasi-Newton CellML solver. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the convergence test type for a Quasi-Newton solver identified by an user number. */
CMISSError CMISSSolver_QuasiNewtonConvergenceTestTypeSetNum(const int problemUserNumber /*<The user number of the problem number with the Quasi-Newton solver to set the convergence test type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the convergence test type for. */,
    const int solverIndex /*<The solver index to set the convergence test type for. */,
    const int convergenceTestType /*<The convergence test type for the Quasi-Newton solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the convergence test type for a Quasi-Newton solver identified by an object. */
CMISSError CMISSSolver_QuasiNewtonConvergenceTestTypeSet(const CMISSSolverType solver /*<The Quasi-Newton solver to set the convergence test type for. */,
    const int convergenceTestType /*<The convergence test type for the Quasi-Newton solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the line search maximum step for a Quasi-Newton line search solver identified by an user number. */
CMISSError CMISSSolver_QuasiNewtonLineSearchMaxStepSetNum(const int problemUserNumber /*<The user number of the problem number with the Quasi-Newton line search solver to set the maximum step for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the maximum step for. */,
    const int solverIndex /*<The solver index to set the maximum step for. */,
    const double maxStep /*<The maximum step for the Quasi-Newton line search solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the line search maximum step for a Quasi-Newton line search solver identified by an object. */
CMISSError CMISSSolver_QuasiNewtonLineSearchMaxStepSet(const CMISSSolverType solver /*<The Quasi-Newton line search solver to set the maximum step for. */,
    const double maxStep /*<The maximum step for the Quasi-Newton line search solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the line search step tolerance for a Quasi-Newton line search solver identified by an user number. */
CMISSError CMISSSolver_QuasiNewtonLineSearchStepTolSetNum(const int problemUserNumber /*<The user number of the problem number with the Quasi-Newton line search solver to set the step tolerance for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the step tolerance for. */,
    const int solverIndex /*<The solver index to set the step tolerance for. */,
    const double stepTol /*<The step tolerance for the Quasi-Newton line search solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the line search step tolerance for a Quasi-Newton line search solver identified by an object. */
CMISSError CMISSSolver_QuasiNewtonLineSearchStepTolSet(const CMISSSolverType solver /*<The Quasi-Newton line search solver to set the step tolerance for. */,
    const double stepTol /*<The step tolerance for the Quasi-Newton line search solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the type of line search for a Quasi-Newton line search solver identified by an user number. */
CMISSError CMISSSolver_QuasiNewtonLineSearchTypeSetNum(const int problemUserNumber /*<The user number of the problem number with the Quasi-Newton line search solver to set the line search type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the line search type for. */,
    const int solverIndex /*<The solver index to set the line search type for. */,
    const int lineSearchType /*<The type of line search for the Quasi-Newton line search solver to set. \see OPENCMISS_QuasiNewtonLineSearchTypes */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the type of line search for a Quasi-Newton line search solver identified by an object. */
CMISSError CMISSSolver_QuasiNewtonLineSearchTypeSet(const CMISSSolverType solver /*<The Quasi-Newton line search solver to set the line search type for. */,
    const int lineSearchType /*<The type of line search for the Quasi-Newton line search solver to set. \see OPENCMISS_QuasiNewtonLineSearchTypes */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the maximum number of function evaluations for a Quasi-Newton solver identified by an user number. */
CMISSError CMISSSolver_QuasiNewtonMaximumFunctionEvaluationsSetNum(const int problemUserNumber /*<The user number of the problem number with the Quasi-Newton solver to set the maximum function evaluations for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the maximum function evaluations for. */,
    const int solverIndex /*<The solver index to set the maximum function evaluations for. */,
    const int maximumFunctionEvaluations /*<The maximum number of function evaluations for the Quasi-Newton solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the maximum number of function evaluations for a Quasi-Newton solver identified by an object. */
CMISSError CMISSSolver_QuasiNewtonMaximumFunctionEvaluationsSet(const CMISSSolverType solver /*<The Quasi-Newton solver to set the maximum number of function evaluations for. */,
    const int maximumFunctionEvaluations /*<The maximum number of function evaluations for the Quasi-Newton solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the maximum number of iterations for a Quasi-Newton solver identified by an user number. */
CMISSError CMISSSolver_QuasiNewtonMaximumIterationsSetNum(const int problemUserNumber /*<The user number of the problem number with the Quasi-Newton solver to set the maximum iterations for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the maximum iterations for. */,
    const int solverIndex /*<The solver index to set the maximum iterations for. */,
    const int maximumIterations /*<The maximum number of iterations for the Quasi-Newton solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the maximum number of iterations for a Quasi-Newton solver identified by an object. */
CMISSError CMISSSolver_QuasiNewtonMaximumIterationsSet(const CMISSSolverType solver /*<The Quasi-Newton solver to set the maximum number of iterations for. */,
    const int maximumIterations /*<The maximum number of iterations for the Quasi-Newton solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the relative tolerance for a Quasi-Newton solver identified by an user number. */
CMISSError CMISSSolver_QuasiNewtonRelativeToleranceSetNum(const int problemUserNumber /*<The user number of the problem number with the Quasi-Newton solver to set the relative tolerance for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the relative tolerance for. */,
    const int solverIndex /*<The solver index to set the relative tolerance for. */,
    const double relativeTolerance /*<The relative tolerance for the Quasi-Newton solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the relative tolerance for a Quasi-Newton solver identified by an object. */
CMISSError CMISSSolver_QuasiNewtonRelativeToleranceSet(const CMISSSolverType solver /*<The Quasi-Newton solver to set the relative tolerance for. */,
    const double relativeTolerance /*<The relative tolerance for the Quasi-Newton solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the solution tolerance for a Quasi-Newton solver identified by an user number. */
CMISSError CMISSSolver_QuasiNewtonSolutionToleranceSetNum(const int problemUserNumber /*<The user number of the problem number with the Quasi-Newton solver to set the solution tolerance for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the solution tolerance for. */,
    const int solverIndex /*<The solver index to set the solution tolerance for. */,
    const double solutionTolerance /*<The absolulte tolerance for the Quasi-Newton solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the solution tolerance for a Quasi-Newton solver identified by an object. */
CMISSError CMISSSolver_QuasiNewtonSolutionToleranceSet(const CMISSSolverType solver /*<The Quasi-Newton solver to set the solution tolerance for. */,
    const double solutionTolerance /*<The solution tolerance for the Quasi-Newton solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the delta0 for a Quasi-Newton trust region solver identified by an user number. */
CMISSError CMISSSolver_QuasiNewtonTrustRegionDelta0SetNum(const int problemUserNumber /*<The user number of the problem number with the Quasi-Newton trust region solver to set the delta0 for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the delta0 for. */,
    const int solverIndex /*<The solver index to set the delta0 for. */,
    const double delta0 /*<The delta0 for the Quasi-Newton trust region solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the delta0 for a Quasi-Newton trust region solver identified by an object. */
CMISSError CMISSSolver_QuasiNewtonTrustRegionDelta0Set(const CMISSSolverType solver /*<The Quasi-Newton trust region solver to set the delta0 for. */,
    const double delta0 /*<The delta0 for the Quasi-Newton trust region solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the tolerance for a Quasi-Newton trust region solver identified by an user number. */
CMISSError CMISSSolver_QuasiNewtonTrustRegionToleranceSetNum(const int problemUserNumber /*<The user number of the problem number with the Quasi-Newton trust region solver to set the tolerance for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the tolerance for. */,
    const int solverIndex /*<The solver index to set the tolerance for. */,
    const double tolerance /*<The tolerance for the Quasi-Newton trust region solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the tolerance for a Quasi-Newton trust region solver identified by an object. */
CMISSError CMISSSolver_QuasiNewtonTrustRegionToleranceSet(const CMISSSolverType solver /*<The Quasi-Newton trust region solver to set the tolerance for. */,
    const double tolerance /*<The tolerance for the Quasi-Newton trust region solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the restart of a Quasi-Newton solver identified by an user number. */
CMISSError CMISSSolver_QuasiNewtonRestartSetNum(const int problemUserNumber /*<The user number of the problem number with the Quasi-Newton solver to set the for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the for. */,
    const int solverIndex /*<The solver index to set the for. */,
    const int quasiNewtonRestart /*<The restart of the Quasi-Newton solver to set. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the restart of a Quasi-Newton solver identified by an object. */
CMISSError CMISSSolver_QuasiNewtonRestartSet(const CMISSSolverType solver /*<The Quasi-Newton solver to set the for. */,
    const int quasiNewtonRestart /*<The restart of the Quasi-Newton solver to set. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the restart type of a Quasi-Newton solver identified by an user number. */
CMISSError CMISSSolver_QuasiNewtonRestartTypeSetNum(const int problemUserNumber /*<The user number of the problem number with the Quasi-Newton solver to set the type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the type for. */,
    const int solverIndex /*<The solver index to set the type for. */,
    const int quasiNewtonRestartType /*<The restart type of the Quasi-Newton solver to set. \see OPENCMISS_QuasiNewtonRestartTypes */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the restart type of a Quasi-Newton solver identified by an object. */
CMISSError CMISSSolver_QuasiNewtonRestartTypeSet(const CMISSSolverType solver /*<The Quasi-Newton solver to set the type for. */,
    const int quasiNewtonRestartType /*<The restart type of the Quasi-Newton solver to set. \see OPENCMISS_QuasiNewtonRestartTypes */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the scale type of a Quasi-Newton solver identified by an user number. */
CMISSError CMISSSolver_QuasiNewtonScaleTypeSetNum(const int problemUserNumber /*<The user number of the problem number with the Quasi-Newton solver to set the type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the type for. */,
    const int solverIndex /*<The solver index to set the type for. */,
    const int quasiNewtonScaleType /*<The scale type of the Quasi-Newton solver to set. \see OPENCMISS_QuasiNewtonScaleTypes */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the scale type of a Quasi-Newton solver identified by an object. */
CMISSError CMISSSolver_QuasiNewtonScaleTypeSet(const CMISSSolverType solver /*<The Quasi-Newton solver to set the type for. */,
    const int quasiNewtonScaleType /*<The scale type of the Quasi-Newton solver to set. \see OPENCMISS_QuasiNewtonScaleTypes */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the type of a Quasi-Newton solver identified by an user number. */
CMISSError CMISSSolver_QuasiNewtonSolveTypeSetNum(const int problemUserNumber /*<The user number of the problem number with the Quasi-Newton solver to set the type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the type for. */,
    const int solverIndex /*<The solver index to set the type for. */,
    const int quasiNewtonSolveType /*<The type of the Quasi-Newton solver to set. \see OPENCMISS_QuasiNewtonSolverTypes */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the type of a Quasi-Newton solver identified by an object. */
CMISSError CMISSSolver_QuasiNewtonSolveTypeSet(const CMISSSolverType solver /*<The Quasi-Newton solver to set the type for. */,
    const int quasiNewtonSolveType /*<The type of the Quasi-Newton solver to set. \see OPENCMISS_QuasiNewtonSolverTypes */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the type of a Quasi-Newton solver identified by an user number. */
CMISSError CMISSSolver_QuasiNewtonTypeSetNum(const int problemUserNumber /*<The user number of the problem number with the Quasi-Newton solver to set the type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the type for. */,
    const int solverIndex /*<The solver index to set the type for. */,
    const int quasiNewtonType /*<The Quasi-Newton type to set. \see OPENCMISS_QuasiNewtonTypes */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the type of a Quasi-Newton solver identified by an object. */
CMISSError CMISSSolver_QuasiNewtonTypeSet(const CMISSSolverType solver /*<The Quasi-Newton solver to set the type for. */,
    const int quasiNewtonType /*<The Quasi-Newton type to set. \see OPENCMISS_QuasiNewtonTypes */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the type of a nonlinear solver identified by an user number. */
CMISSError CMISSSolver_NonlinearTypeSetNum(const int problemUserNumber /*<The user number of the problem number with the nonlinear solver to set the type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the type for. */,
    const int solverIndex /*<The solver index to set the type for. */,
    const int nonlinearSolveType /*<The type of the nonlinear solver to set. \see OPENCMISS_NonlinearSolverTypes */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the type of a nonlinear solver identified by an object. */
CMISSError CMISSSolver_NonlinearTypeSet(const CMISSSolverType solver /*<The nonlinear solver to set the type for. */,
    const int nonlinearSolveType /*<The type of the nonlinear solver to set. \see OPENCMISS_NonlinearSolverTypes */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the type of output for a solver identified by an user number. */
CMISSError CMISSSolver_OutputTypeSetNum(const int problemUserNumber /*<The user number of the problem number with the solver to set the output type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the output type for. */,
    const int solverIndex /*<The solver index to set the output type for. */,
    const int outputType /*<The type of solver output to set. \see OPENCMISS_SolverOutputTypes */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the output type for a solver identified by an object. */
CMISSError CMISSSolver_OutputTypeSet(const CMISSSolverType solver /*<The solver to set the output type for. */,
    const int outputType /*<The type of solver output to set. \see OPENCMISS_SolverOutputTypes */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Returns the solver equations for a solver identified by an user number. */
CMISSError CMISSSolver_SolverEquationsGetNum(const int problemUserNumber /*<The user number of the problem number with the solver to get the solver equations for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the solver equations for. */,
    const int solverIndex /*<The solver index to get the solver equations for. */,
    CMISSSolverEquationsType solverEquations /*<On return, the solver equations for the solver. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Returns the solver equations for a solver identified by an object. */
CMISSError CMISSSolver_SolverEquationsGet(const CMISSSolverType solver /*<The solver to get the solver equations for. */,
    CMISSSolverEquationsType solverEquations /*<On return, the solver equations for the solver. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (int *DummyOutputScalar){(int *equationsSetIndex)};
/*>Adds equations sets to solver equations identified by an user number. */
CMISSError CMISSSolverEquations_EquationsSetAddNum(const int problemUserNumber /*<The user number of the problem number with the solver to add the equations set for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to add the equations set for. */,
    const int solverIndex /*<The solver index to add the equations set for. */,
    const int regionUserNumber /*<The user number of the region with the equations set to add. */,
    const int equationsSetUserNumber /*<The user number of the equations set to add. */,
    int *equationsSetIndex /*<On return, the index of the added equations set in the solver equations. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (int *equationsSetIndex);

%apply (int *DummyOutputScalar){(int *equationsSetIndex)};
/*>Adds equations sets to solver equations identified by an object. */
CMISSError CMISSSolverEquations_EquationsSetAdd(const CMISSSolverEquationsType solverEquations /*<The solver equations to add the equations set for. */,
    const CMISSEquationsSetType equationsSet /*<The equations set to add. */,
    int *equationsSetIndex /*<On return, the index of the added equations set in the solver equations. */);
%clear (int *equationsSetIndex);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
%apply (int *DummyOutputScalar){(int *interfaceConditionIndex)};
/*>Adds an interface condition to solver equations identified by an user number. */
CMISSError CMISSSolverEquations_InterfaceConditionAddNum(const int problemUserNumber /*<The user number of the problem number with the solver to add the interface condition for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to add the interface condition for. */,
    const int solverIndex /*<The solver index to add the interface condition for. */,
    const int interfaceRegionUserNumber /*<The user number of the region containing the interface and interface condition to add. */,
    const int interfaceUserNumber /*<The user number of the interface containting the interface condition to add. */,
    const int interfaceConditionUserNumber /*<The user number of the interface conditions to add. */,
    int *interfaceConditionIndex /*<On return, the index of the added interface condition in the solver equations. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);
%clear (int *interfaceConditionIndex);

%apply (int *DummyOutputScalar){(int *interfaceConditionIndex)};
/*>Adds an interface condition to solver equations identified by an object. */
CMISSError CMISSSolverEquations_InterfaceConditionAdd(const CMISSSolverEquationsType solverEquations /*<The solver equations to add the equations set for. */,
    const CMISSInterfaceConditionType interfaceCondition /*<The interface condition to add. */,
    int *interfaceConditionIndex /*<On return, the index of the added interface condition in the solver equations. */);
%clear (int *interfaceConditionIndex);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *hasTranspose)};
%apply (const int DIM1, int *IN_ARRAY1){(const int timeDependenceTypesSize, const int *timeDependenceTypes)};
/*>Set the time dependence type of interface matrices */
CMISSError CMISSInterfaceMatrices_TimeDependenceTypeSet(const CMISSInterfaceConditionType interfaceCondition /*<The interface condition to add. */,
    const int interfaceMatrixIndex /*< */,
    const CMISSBool hasTranspose /*< */,
    const int timeDependenceTypesSize /*<Length of timeDependenceTypes */,
    const int *timeDependenceTypes /*<Time dependence types for the given interface matrix and it's transpose (if any). \see INTERFACE_MATRICES_ROUTINES_InterfaceMatricesTimeDependenceTypes,INTERFACE_MATRICES_ROUTINES */);
%clear (const CMISSBool *hasTranspose);
%clear (const int timeDependenceTypesSize, const int *timeDependenceTypes);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *hasTranspose)};
%apply (const int DIM1, int *ARGOUT_ARRAY1){(const int timeDependenceTypesSize, int *timeDependenceTypes)};
/*>Get the time dependence type of interface matrices */
CMISSError CMISSInterfaceMatrices_TimeDependenceTypeGet(const CMISSInterfaceConditionType interfaceCondition /*<The interface condition to add. */,
    const int interfaceMatrixIndex /*< */,
    const CMISSBool hasTranspose /*< */,
    const int timeDependenceTypesSize /*<Length of timeDependenceTypes */,
    int *timeDependenceTypes /*<Time dependence types for the given interface matrix and it's transpose (if any). \see INTERFACE_MATRICES_ROUTINES_InterfaceMatricesTimeDependenceTypes,INTERFACE_MATRICES_ROUTINES */);
%clear (const CMISSBool *hasTranspose);
%clear (const int timeDependenceTypesSize, int *timeDependenceTypes);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Sets/changes the sparsity type for solver equations identified by an user number. */
CMISSError CMISSSolverEquations_SparsityTypeSetNum(const int problemUserNumber /*<The user number of the problem number with the solver to set the sparsity type for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to set the sparsity type for. */,
    const int solverIndex /*<The solver index to set the sparsity type for. */,
    const int sparsityType /*<The sparsity type to set. \see OPENCMISS_SolverEquationsSparsityTypes */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Sets/changes the sparsity type for solver equations identified by an object. */
CMISSError CMISSSolverEquations_SparsityTypeSet(const CMISSSolverEquationsType solverEquations /*<The solver equations to set the sparsity type for. */,
    const int sparsityType /*<The sparsity type to set. \see OPENCMISS_SolverEquationsSparsityTypes */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Finish the creation of the boundary conditions for the solver equations identified by the user numbers */
CMISSError CMISSSolverEquations_BoundaryConditionsCreateFinishNum(const int problemUserNumber /*<The user number of the problem containing the solver equations to finish the boundary conditions for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the solver equations boundary conditions for. */,
    const int solverIndex /*<The solver index to get the solver equations boundary conditions for. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Finish the creation of the boundary conditions for the solver equations */
CMISSError CMISSSolverEquations_BoundaryConditionsCreateFinish(const CMISSSolverEquationsType solverEquations /*<The solver equations containing the boundary conditions to finish. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Start the creation of boundary conditions for solver equations identified by user numbers */
CMISSError CMISSSolverEquations_BoundaryConditionsCreateStartNum(const int problemUserNumber /*<The user number of the problem containing the solver equations to start the boundary conditions for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the solver equations boundary conditions for. */,
    const int solverIndex /*<The solver index to get the solver equations boundary conditions for. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Start the creation of boundary conditions for solver equations */
CMISSError CMISSSolverEquations_BoundaryConditionsCreateStart(CMISSSolverEquationsType solverEquations /*<The solver equations containing the boundary conditions to start. */,
    CMISSBoundaryConditionsType boundaryConditions /*<On return, the created boundary conditions. */);

%apply (const int DIM1, int *IN_ARRAY1){(const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers)};
/*>Get the boundary conditions for solver equations identified by user numbers */
CMISSError CMISSSolverEquations_BoundaryConditionsGetNum(const int problemUserNumber /*<The user number of the problem containing the solver equations to start the boundary conditions for. */,
    const int controlLoopIdentifiersSize /*<Length of controlLoopIdentifiers */,
    const int *controlLoopIdentifiers /*<controlLoopIdentifiers(i). The i'th control loop identifier to get the solver equations boundary conditions for. */,
    const int solverIndex /*<The solver index to get the solver equations boundary conditions for. */,
    CMISSBoundaryConditionsType boundaryConditions /*<On return, The boundary conditions for the specified solver equations. */);
%clear (const int controlLoopIdentifiersSize, const int *controlLoopIdentifiers);

/*>Get the boundary conditions for solver equations */
CMISSError CMISSSolverEquations_BoundaryConditionsGet(const CMISSSolverEquationsType solverEquations /*<The solver equations to get the boundary conditions for. */,
    CMISSBoundaryConditionsType boundaryConditions /*<On return, The boundary conditions for the specified solver equations. */);

%apply (int *DummyOutputScalar){(int *numberOfMatrices)};
/*>Get the number of solver matrices for the solver equations */
CMISSError CMISSSolverEquations_NumberOfMatricesGet(const CMISSSolverEquationsType solverEquations /*<The solver equations to get the number of matrices for */,
    int *numberOfMatrices /*<On return, the number of matrices for the solver equations */);
%clear (int *numberOfMatrices);

/*>Get a solver matrix from the solver equations matrices */
CMISSError CMISSSolverEquations_MatrixGet(const CMISSSolverEquationsType solverEquations /*<The solver equations to get the matrix for */,
    const int matrixIndex /*<The solver matrix index to get */,
    CMISSDistributedMatrixType matrix /*<On return, the requested solver matrix */);

/*>Get the Jacobian matrix from the solver equations matrices for nonlinear solver equations */
CMISSError CMISSSolverEquations_JacobianMatrixGet(const CMISSSolverEquationsType solverEquations /*<The solver equations to get the Jacobian matrix for */,
    CMISSDistributedMatrixType matrix /*<On return, the solver equations Jacobian matrix */);

/*>Get the vector assiciated with a solver matrix from the solver equations matrices */
CMISSError CMISSSolverEquations_VectorGet(const CMISSSolverEquationsType solverEquations /*<The solver equations to get the vector for */,
    const int matrixIndex /*<The solver matrix index to get the vector for */,
    CMISSDistributedVectorType vector /*<On return, the requested solver matrix vector */);

/*>Get the residual vector from the solver equations for nonlinear problems */
CMISSError CMISSSolverEquations_ResidualVectorGet(const CMISSSolverEquationsType solverEquations /*<The solver equations to get the residual vector for */,
    CMISSDistributedVectorType residualVector /*<On return, the solver residual vector */);

/*>Get the right hand side vector from the solver equations */
CMISSError CMISSSolverEquations_RhsVectorGet(const CMISSSolverEquationsType solverEquations /*<The solver equations to get the right hand side vector for */,
    CMISSDistributedVectorType rhsVector /*<On return, the solver right hand side vector */);

%apply (int *DummyOutputScalar){(int *userNumber)};
/*>Get the user number of the given region. */
CMISSError CMISSUserNumberGetRegion(const CMISSRegionType region /*<The region to get the user number for */,
    int *userNumber /*<The region's user number */);
%clear (int *userNumber);

%apply (int *DummyOutputScalar){(int *userNumber)};
/*>Get the user number of the given mesh. */
CMISSError CMISSUserNumberGetMesh(const CMISSMeshType mesh /*<The mesh to get the user number for */,
    int *userNumber /*<The mesh's user number */);
%clear (int *userNumber);

%apply (int *DummyOutputScalar){(int *userNumber)};
/*>Get the user number of the given basis. */
CMISSError CMISSUserNumberGetBasis(const CMISSBasisType basis /*<The basis to get the user number for */,
    int *userNumber /*<The basis's user number */);
%clear (int *userNumber);

%apply (const CMISSBool DummyInputBool){(const CMISSBool *calcClosestGaussPoint)};
/*>Update the bioelectrics geometric field by interpolating the finite elasticity geometric field */
CMISSError CMISSBioelectricsFiniteElasticity_UpdateGeometricField(CMISSControlLoopType controlLoop /*<The bioelectrics control loop */,
    const CMISSBool calcClosestGaussPoint /*< */);
%clear (const CMISSBool *calcClosestGaussPoint);

%apply (const int Size, const char *DummyInputString){(const int filenameSize, const char *filename)};
/*>Initialise the given FieldML context using the given FieldML XML file. */
CMISSError CMISSFieldML_InputCreateFromFile(const int filenameSize /*<Length of filename string */,
    const char *filename /*<The FieldML XML file to parse. */,
    CMISSFieldMLIOType fieldml /*<The FieldML context to initialise. */);
%clear (const int filenameSize, const char *filename);

%apply (const int Size, const char *DummyInputString){(const int meshArgumentNameSize, const char *meshArgumentName)};
/*>Creates a mesh using the given FieldML evaluator. */
CMISSError CMISSFieldML_InputMeshCreateStart(CMISSFieldMLIOType fieldml /*<The FieldML context containing the evaluator to use. */,
    const int meshArgumentNameSize /*<Length of meshArgumentName string */,
    const char *meshArgumentName /*<The name of the argument evaluator to create a mesh from. */,
    CMISSMeshType mesh /*<On return, the newly created mesh. */,
    const int meshNumber /*<The user number to assign to the new mesh. */,
    const CMISSRegionType region /*<The region in which to create the mesh. */);
%clear (const int meshArgumentNameSize, const char *meshArgumentName);

%apply (const int Size, const char *DummyInputString){(const int meshArgumentNameSize, const char *meshArgumentName)};
/*>Creates a mesh with the given user number using the given FieldML evaluator. */
CMISSError CMISSFieldML_InputMeshCreateStartNum(CMISSFieldMLIOType fieldml /*<The FieldML context containing the evaluator to use. */,
    const int meshArgumentNameSize /*<Length of meshArgumentName string */,
    const char *meshArgumentName /*<The name of the mesh argument evaluator to create a mesh from. */,
    const int meshNumber /*<The user number to assign to the new mesh. */,
    const int regionNumber /*<The user number of the region in which to create the mesh. */);
%clear (const int meshArgumentNameSize, const char *meshArgumentName);

%apply (const int Size, const char *DummyInputString){(const int evaluatorNameSize, const char *evaluatorName)};
/*>Create a coordinate system using the given FieldML evaluator. */
CMISSError CMISSFieldML_InputCoordinateSystemCreateStart(CMISSFieldMLIOType fieldml /*<The FieldML context containing the evaluator to use. */,
    const int evaluatorNameSize /*<Length of evaluatorName string */,
    const char *evaluatorName /*<The name of the argument evaluator to create the coordinate system from. */,
    CMISSCoordinateSystemType coordinateSystem /*<On return, the newly created coordinate system. */,
    const int userNumber /*<The user number to assign to the new coordinate system. */);
%clear (const int evaluatorNameSize, const char *evaluatorName);

%apply (const int Size, const char *DummyInputString){(const int evaluatorNameSize, const char *evaluatorName)};
/*>Create a coordinate system using the given FieldML evaluator. */
CMISSError CMISSFieldML_InputCoordinateSystemCreateStartNum(CMISSFieldMLIOType fieldml /*<The FieldML context containing the evaluator to use. */,
    const int evaluatorNameSize /*<Length of evaluatorName string */,
    const char *evaluatorName /*<The name of the argument evaluator to create the coordinate system from. */,
    const int userNumber /*<The user number to assign to the new coordinate system. */);
%clear (const int evaluatorNameSize, const char *evaluatorName);

%apply (const int Size, const char *DummyInputString){(const int evaluatorNameSize, const char *evaluatorName)};
/*>Create a basis using the given FieldML evaluator. */
CMISSError CMISSFieldML_InputBasisCreateStartNum(CMISSFieldMLIOType fieldml /*<The FieldML context containing the evaluator to use. */,
    const int evaluatorNameSize /*<Length of evaluatorName string */,
    const char *evaluatorName /*<The name of the argument evaluator to create the basis from. */,
    const int userNumber /*<The user number to assign to the new basis. */);
%clear (const int evaluatorNameSize, const char *evaluatorName);

%apply (const int Size, const char *DummyInputString){(const int evaluatorNameSize, const char *evaluatorName)};
/*>Create a basis using the given FieldML evaluator. */
CMISSError CMISSFieldML_InputBasisCreateStart(CMISSFieldMLIOType fieldml /*<The FieldML context containing the evaluator to use. */,
    const int evaluatorNameSize /*<Length of evaluatorName string */,
    const char *evaluatorName /*<The name of the argument evaluator to create the basis from. */,
    const int userNumber /*<The user number to assign to the new basis. */,
    CMISSBasisType basis /*<On return, the newly created basis. */);
%clear (const int evaluatorNameSize, const char *evaluatorName);

%apply (const int Size, const char *DummyInputString){(const int nodesArgumentNameSize, const char *nodesArgumentName)};
/*>Creates a region's nodes using the given FieldML evaluator. */
CMISSError CMISSFieldML_InputNodesCreateStartNum(CMISSFieldMLIOType fieldml /*<The FieldML context containing the evaluator to use. */,
    const int nodesArgumentNameSize /*<Length of nodesArgumentName string */,
    const char *nodesArgumentName /*<The name of the argument evaluator to create the nodes from. */,
    const int regionNumber /*<The user number of the region to create to the nodes in. */,
    CMISSNodesType nodes /*<On return, the newly created nodes. */);
%clear (const int nodesArgumentNameSize, const char *nodesArgumentName);

%apply (const int Size, const char *DummyInputString){(const int nodesArgumentNameSize, const char *nodesArgumentName)};
/*>Creates a region's nodes using the given FieldML evaluator. */
CMISSError CMISSFieldML_InputNodesCreateStart(CMISSFieldMLIOType fieldml /*<The FieldML context containing the evaluator to use. */,
    const int nodesArgumentNameSize /*<Length of nodesArgumentName string */,
    const char *nodesArgumentName /*<The name of the argument evaluator to create the basis from. */,
    const CMISSRegionType region /*<The user number of the region to create to the nodes in. */,
    CMISSNodesType nodes /*<On return, the newly created nodes. */);
%clear (const int nodesArgumentNameSize, const char *nodesArgumentName);

%apply (const int Size, const char *DummyInputString){(const int evaluatorNameSize, const char *evaluatorName)};
/*>Use the given FieldML evaluator as a template to create a component on the given mesh. */
CMISSError CMISSFieldML_InputCreateMeshComponent(CMISSFieldMLIOType fieldml /*<The FieldML context containing the evaluator to use. */,
    const CMISSMeshType mesh /*<The mesh for which to create the mesh component. */,
    const int componentNumber /*<The number of the mesh component to create. */,
    const int evaluatorNameSize /*<Length of evaluatorName string */,
    const char *evaluatorName /*<The name of the argument evaluator to create the mesh from. */);
%clear (const int evaluatorNameSize, const char *evaluatorName);

%apply (const int Size, const char *DummyInputString){(const int evaluatorNameSize, const char *evaluatorName)};
/*>Use the given FieldML evaluator as a template to create a component on the mesh identified by the given user number. */
CMISSError CMISSFieldML_InputCreateMeshComponentNum(CMISSFieldMLIOType fieldml /*<The FieldML context containing the evaluator to use. */,
    const int regionNumber /*<The user number of the region in which the mesh component is to be created. */,
    const int meshNumber /*<The user number of the mesh for which the mesh component is to be created. */,
    const int componentNumber /*<The number of the mesh component to create. */,
    const int evaluatorNameSize /*<Length of evaluatorName string */,
    const char *evaluatorName /*<The name of the argument evaluator to create the basis from. */);
%clear (const int evaluatorNameSize, const char *evaluatorName);

%apply (const int Size, const char *DummyInputString){(const int evaluatorNameSize, const char *evaluatorName)};
/*>Create a field using the given FieldML evaluator. */
CMISSError CMISSFieldML_InputFieldCreateStart(CMISSFieldMLIOType fieldml /*<The FieldML context containing the evaluator to use. */,
    const CMISSRegionType region /*<The region in which the field is to be created. */,
    const CMISSDecompositionType decomposition /*<The decomposition to use when creating the field. */,
    const int fieldNumber /*<The user number to assign to the new field. */,
    CMISSFieldType field /*<On return, the newly created field. */,
    const int variableType /*<The OpenCMISS variable type. */,
    const int evaluatorNameSize /*<Length of evaluatorName string */,
    const char *evaluatorName /*<The name of the argument evaluator to create the field from. */);
%clear (const int evaluatorNameSize, const char *evaluatorName);

%apply (const int Size, const char *DummyInputString){(const int evaluatorNameSize, const char *evaluatorName)};
/*>Create a field with the given user number using the given FieldML evaluator. */
CMISSError CMISSFieldML_InputFieldCreateStartNum(CMISSFieldMLIOType fieldml /*<The FieldML context containing the evaluator to use. */,
    const int regionNumber /*<The user number of the region in which to create the field. */,
    const int meshNumber /*<The user number of the mesh to use when creating the field. */,
    const int decompositionNumber /*<The user number of the decomposition to use when creating the field. */,
    const int fieldNumber /*<The user number to assign to the new field. */,
    const int variableType /*<The OpenCMISS variable type. */,
    const int evaluatorNameSize /*<Length of evaluatorName string */,
    const char *evaluatorName /*<The name of the argument evaluator to create the field from. */);
%clear (const int evaluatorNameSize, const char *evaluatorName);

%apply (const int Size, const char *DummyInputString){(const int evaluatorNameSize, const char *evaluatorName)};
/*>Update the DOF parameters of the given field, using the given FieldML evaluator. */
CMISSError CMISSFieldML_InputFieldParametersUpdate(CMISSFieldMLIOType fieldml /*<The FieldML context containing the evaluator to use. */,
    CMISSFieldType field /*<On return, the field object. */,
    const int evaluatorNameSize /*<Length of evaluatorName string */,
    const char *evaluatorName /*<The name of the argument evaluator to get the parameters from. */,
    const int variableType /*<The OpenCMISS variable type. */,
    const int setType /*<The parameter set type. */);
%clear (const int evaluatorNameSize, const char *evaluatorName);

%apply (const int Size, const char *DummyInputString){(const int evaluatorNameSize, const char *evaluatorName)};
/*>Update the DOF parameters of field with the given user number, using the given FieldML evaluator. */
CMISSError CMISSFieldML_InputFieldParametersUpdateNum(CMISSFieldMLIOType fieldml /*<The FieldML context containing the evaluator to use. */,
    const int regionNumber /*<The user number of the region of the field for which parameters are to be updated. */,
    const int fieldNumber /*<The user number of the field for which parameters are to be updated. */,
    const int evaluatorNameSize /*<Length of evaluatorName string */,
    const char *evaluatorName /*<The name of the argument evaluator to get the parameters from. */,
    const int variableType /*<The OpenCMISS variable type. */,
    const int setType /*<The parameter set type. */);
%clear (const int evaluatorNameSize, const char *evaluatorName);

%apply (const int Size, const char *DummyInputString){(const int filenameSize, const char *filename)};
/*>Write the FieldML document managed by the given context to a file with the given name. */
CMISSError CMISSFieldML_OutputWrite(const CMISSFieldMLIOType fieldml /*<The FieldML context containing the evaluator to use. */,
    const int filenameSize /*<Length of filename string */,
    const char *filename /*<The name of the file to write the FieldML document to. */);
%clear (const int filenameSize, const char *filename);

%apply (const int Size, const char *DummyInputString){(const int baseNameSize, const char *baseName)};
%apply (const int Size, const char *DummyInputString){(const int dofFormatSize, const char *dofFormat)};
/*>Add the given field to the given FieldML context. The FieldML type will be inferred. */
CMISSError CMISSFieldML_OutputAddFieldNoType(const CMISSFieldMLIOType fieldml /*<The FieldML context containing the evaluator to use. */,
    const int baseNameSize /*<Length of baseName string */,
    const char *baseName /*<The prefix to use when naming automatically created FieldML objects in the context. */,
    const int dofFormatSize /*<Length of dofFormat string */,
    const char *dofFormat /*<The name of the format to use when writing dof data. */,
    const CMISSFieldType field /*<The field to add. */,
    const int variableType /*<The variable type of the field to add. */,
    const int setType /*<The parameter set type. */);
%clear (const int baseNameSize, const char *baseName);
%clear (const int dofFormatSize, const char *dofFormat);

%apply (const int Size, const char *DummyInputString){(const int baseNameSize, const char *baseName)};
%apply (const int Size, const char *DummyInputString){(const int dofFormatSize, const char *dofFormat)};
/*>Add the field with the given user number to the given FieldML context. The FieldML type will be inferred. */
CMISSError CMISSFieldML_OutputAddFieldNoTypeNum(const CMISSFieldMLIOType fieldml /*<The FieldML context containing the evaluator to use. */,
    const int baseNameSize /*<Length of baseName string */,
    const char *baseName /*<The prefix to use when naming automatically created FieldML objects in the context. */,
    const int dofFormatSize /*<Length of dofFormat string */,
    const char *dofFormat /*<The name of the format to use when writing dof data. */,
    const int regionNumber /*<The user number of the region containing the field to add to the FieldML context. */,
    const int fieldNumber /*<The user number of the field to add to the FieldML context. */,
    const int variableType /*<The variable type of the field to add to the FieldML context. */,
    const int setType /*<The parameter set type. */);
%clear (const int baseNameSize, const char *baseName);
%clear (const int dofFormatSize, const char *dofFormat);

%apply (const int Size, const char *DummyInputString){(const int baseNameSize, const char *baseName)};
%apply (const int Size, const char *DummyInputString){(const int dofFormatSize, const char *dofFormat)};
/*>Add the given field to the given FieldML context, using the given FieldML type. */
CMISSError CMISSFieldML_OutputAddFieldWithType(const CMISSFieldMLIOType fieldml /*<The FieldML context containing the evaluator to use. */,
    const int baseNameSize /*<Length of baseName string */,
    const char *baseName /*<The prefix to use when naming automatically created FieldML objects in the context. */,
    const int dofFormatSize /*<Length of dofFormat string */,
    const char *dofFormat /*<The name of the format to use when writing dof data. */,
    const CMISSFieldType field /*<The field to add to the FieldML context. */,
    const int variableType /*<The variable type of the field to add to the FieldML context. */,
    const int setType /*<The parameter set type. */,
    const int typeHandle /*<The FieldML type to assign to the new FieldML field. */);
%clear (const int baseNameSize, const char *baseName);
%clear (const int dofFormatSize, const char *dofFormat);

%apply (const int Size, const char *DummyInputString){(const int baseNameSize, const char *baseName)};
%apply (const int Size, const char *DummyInputString){(const int dofFormatSize, const char *dofFormat)};
/*>Add the given field to the given FieldML context, using the given FieldML type. */
CMISSError CMISSFieldML_OutputAddFieldWithTypeNum(const CMISSFieldMLIOType fieldml /*<The FieldML context containing the evaluator to use. */,
    const int baseNameSize /*<Length of baseName string */,
    const char *baseName /*<The prefix to use when naming automatically created FieldML objects in the context. */,
    const int dofFormatSize /*<Length of dofFormat string */,
    const char *dofFormat /*<The name of the format to use when writing dof data. */,
    const int regionNumber /*<The user number of the region owning the field to add. */,
    const int fieldNumber /*<The user number of the field to add. */,
    const int variableType /*<The variable type of the field to add to the FieldML context. */,
    const int setType /*<The parameter set type. */,
    const int typeHandle /*<The FieldML type to assign to the new FieldML field. */);
%clear (const int baseNameSize, const char *baseName);
%clear (const int dofFormatSize, const char *dofFormat);

%apply (const int Size, const char *DummyInputString){(const int locationSize, const char *location)};
%apply (const int Size, const char *DummyInputString){(const int baseNameSize, const char *baseName)};
%apply (const int Size, const char *DummyInputString){(const int connectivityFormatSize, const char *connectivityFormat)};
/*>Initialise the given FieldML context using the given mesh. */
CMISSError CMISSFieldML_OutputCreate(const CMISSMeshType mesh /*<The mesh to use when initialising the FieldML context. */,
    const int locationSize /*<Length of location string */,
    const char *location /*<The root directory in which associated data files should be created. */,
    const int baseNameSize /*<Length of baseName string */,
    const char *baseName /*<The prefix to use when naming automatically created FieldML objects in the context. */,
    const int connectivityFormatSize /*<Length of connectivityFormat string */,
    const char *connectivityFormat /*<The name of the format to use when writing connectivity data. */,
    CMISSFieldMLIOType fieldml /*<The FieldML context containing the evaluator to use. */);
%clear (const int locationSize, const char *location);
%clear (const int baseNameSize, const char *baseName);
%clear (const int connectivityFormatSize, const char *connectivityFormat);

%apply (const int Size, const char *DummyInputString){(const int locationSize, const char *location)};
%apply (const int Size, const char *DummyInputString){(const int baseNameSize, const char *baseName)};
%apply (const int Size, const char *DummyInputString){(const int connectivityFormatSize, const char *connectivityFormat)};
/*>Initialise the given FieldML context using the mesh with the given user number. */
CMISSError CMISSFieldML_OutputCreateNum(const int regionNumber /*<The user number of the region owning the mesh to use when initialising the FieldML context. */,
    const int meshNumber /*<The user number of the mesh to use when initialising the FieldML context. */,
    const int locationSize /*<Length of location string */,
    const char *location /*<The root directory in which associated data files should be created. */,
    const int baseNameSize /*<Length of baseName string */,
    const char *baseName /*<The prefix to use when naming automatically created FieldML objects in the context. */,
    const int connectivityFormatSize /*<Length of connectivityFormat string */,
    const char *connectivityFormat /*<The name of the format to use when writing connectivity data. */,
    CMISSFieldMLIOType fieldml /*<The FieldML context containing the evaluator to use. */);
%clear (const int locationSize, const char *location);
%clear (const int baseNameSize, const char *baseName);
%clear (const int connectivityFormatSize, const char *connectivityFormat);

%apply (const int Size, const char *DummyInputString){(const int baseNameSize, const char *baseName)};
%apply (const int Size, const char *DummyInputString){(const int dofFormatSize, const char *dofFormat)};
%apply (const int DIM1, int *IN_ARRAY1){(const int fieldComponentNumbersSize, const int *fieldComponentNumbers)};
/*>Add the given field to the current FieldML context, only including the given components. */
CMISSError CMISSFieldML_OutputAddFieldComponents(const CMISSFieldMLIOType fieldml /*<The FieldML context containing the evaluator to use. */,
    const int typeHandle /*<The FieldML type to assign to the new FieldML field. */,
    const int baseNameSize /*<Length of baseName string */,
    const char *baseName /*<The prefix to use when naming automatically created FieldML objects in the context. */,
    const int dofFormatSize /*<Length of dofFormat string */,
    const char *dofFormat /*<The name of the format to use when writing dof data. */,
    const CMISSFieldType field /*<The field whose components are to be added. */,
    const int fieldComponentNumbersSize /*<Length of fieldComponentNumbers */,
    const int *fieldComponentNumbers /*< */,
    const int variableType /*<The variable type of the field to add to the FieldML context. */,
    const int setType /*<The parameter set type. */);
%clear (const int baseNameSize, const char *baseName);
%clear (const int dofFormatSize, const char *dofFormat);
%clear (const int fieldComponentNumbersSize, const int *fieldComponentNumbers);

%apply (const int Size, const char *DummyInputString){(const int baseNameSize, const char *baseName)};
%apply (const int Size, const char *DummyInputString){(const int dofFormatSize, const char *dofFormat)};
%apply (const int DIM1, int *IN_ARRAY1){(const int fieldComponentNumbersSize, const int *fieldComponentNumbers)};
/*>Add the field with the given user number to the current FieldML context, only including the given components. */
CMISSError CMISSFieldML_OutputAddFieldComponentsNum(const CMISSFieldMLIOType fieldml /*<The FieldML context containing the evaluator to use. */,
    const int typeHandle /*<The FieldML type to assign to the new FieldML field. */,
    const int baseNameSize /*<Length of baseName string */,
    const char *baseName /*<The prefix to use when naming automatically created FieldML objects in the context. */,
    const int dofFormatSize /*<Length of dofFormat string */,
    const char *dofFormat /*<The name of the format to use when writing dof data. */,
    const int regionNumber /*<The user number of the region owning the field to add. */,
    const int fieldNumber /*<The user number of the field whose components are to be added. */,
    const int fieldComponentNumbersSize /*<Length of fieldComponentNumbers */,
    const int *fieldComponentNumbers /*<The component numbers to add. */,
    const int variableType /*<The variable type of the field to add to the FieldML context. */,
    const int setType /*<The parameter set type. */);
%clear (const int baseNameSize, const char *baseName);
%clear (const int dofFormatSize, const char *dofFormat);
%clear (const int fieldComponentNumbersSize, const int *fieldComponentNumbers);

%apply (const int Size, const char *DummyInputString){(const int nameSize, const char *name)};
%apply (int *DummyOutputScalar){(int *handle)};
/*>Import a FieldML object from the library into the current session. */
CMISSError CMISSFieldML_OutputAddImport(const CMISSFieldMLIOType fieldml /*<The FieldML context containing the evaluator to use. */,
    const int nameSize /*<Length of name string */,
    const char *name /*<The name of the object to import. */,
    int *handle /*<A handle to the newly imported FieldML object. */);
%clear (const int nameSize, const char *name);
%clear (int *handle);

%apply CMISSDummyFinaliseType *CMISSDummy{CMISSFieldMLIOType *fieldml};
/*>Finalises a Fieldml context. */
CMISSError CMISSFieldMLIO_Finalise(CMISSFieldMLIOType *fieldml /*<The FieldML context to finalise. */);
%clear CMISSFieldMLIOType *fieldml;

%apply CMISSDummyInitialiseType *CMISSDummy{CMISSFieldMLIOType *fieldml};
/*>Initialises a Fieldml context. */
CMISSError CMISSFieldMLIO_Initialise(CMISSFieldMLIOType *fieldml /*<The FieldML context to initialise. */);
%clear CMISSFieldMLIOType *fieldml;

%apply (int *DummyOutputScalar){(int *sessionHandle)};
/*>Get the session handle from a Fieldml context. */
CMISSError CMISSFieldMLIO_GetSession(CMISSFieldMLIOType fieldml /*<The FieldML context whose session handle is to be returned. */,
    int *sessionHandle /*<The session handle. */);
%clear (int *sessionHandle);
